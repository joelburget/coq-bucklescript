// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");
var Backtrace$ReactTemplate = require("./backtrace.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function repr(x) {
  return x;
}

function unrepr(x) {
  return x;
}

function utf8_length(s) {
  var len = s.length;
  var cnt = 0;
  var nc = 0;
  var p = 0;
  while(p < len) {
    var match = Caml_string.get(s, p);
    nc = match >= 240 ? (
        match >= 252 ? (
            match >= 254 ? 0 : 5
          ) : (
            match >= 248 ? 4 : 3
          )
      ) : (
        match >= 192 ? (
            match >= 224 ? 2 : 1
          ) : 0
      );
    p = p + 1 | 0;
    while(p < len && nc > 0) {
      var match$1 = Caml_string.get(s, p);
      if (match$1 > 191 || match$1 < 128) {
        nc = 0;
      } else {
        p = p + 1 | 0;
        nc = nc - 1 | 0;
      }
    };
    cnt = cnt + 1 | 0;
  };
  return cnt;
}

function app(d1, d2) {
  var exit = 0;
  var exit$1 = 0;
  var exit$2 = 0;
  var exit$3 = 0;
  if (typeof d1 === "number") {
    if (d1) {
      exit$3 = 4;
    } else {
      return d2;
    }
  } else {
    switch (d1.tag | 0) {
      case 1 : 
          var match = d1[0];
          if (match) {
            var match$1 = match[1];
            if (match$1) {
              if (match$1[1]) {
                exit$3 = 4;
              } else if (typeof d2 === "number") {
                if (d2) {
                  exit$2 = 3;
                } else {
                  exit$3 = 4;
                }
              } else if (d2.tag === 1) {
                return /* Ppcmd_glue */Block.__(1, [/* :: */[
                            match[0],
                            /* :: */[
                              match$1[0],
                              d2[0]
                            ]
                          ]]);
              } else {
                exit$2 = 3;
              }
            } else {
              exit$3 = 4;
            }
          } else {
            exit$3 = 4;
          }
          break;
      case 3 : 
          var t1 = d1[0];
          if (typeof d2 === "number") {
            if (d2) {
              exit = 1;
            } else {
              exit$3 = 4;
            }
          } else {
            switch (d2.tag | 0) {
              case 1 : 
                  exit$1 = 2;
                  break;
              case 3 : 
                  if (t1 === d2[0]) {
                    return /* Ppcmd_tag */Block.__(3, [
                              t1,
                              app(d1[1], d2[1])
                            ]);
                  } else {
                    exit = 1;
                  }
                  break;
              default:
                exit = 1;
            }
          }
          break;
      default:
        exit$3 = 4;
    }
  }
  if (exit$3 === 4) {
    if (typeof d2 === "number") {
      if (d2 !== 0) {
        exit$2 = 3;
      } else {
        return d1;
      }
    } else {
      exit$2 = 3;
    }
  }
  if (exit$2 === 3) {
    if (typeof d1 === "number") {
      exit$1 = 2;
    } else if (d1.tag === 1) {
      var match$2 = d1[0];
      if (match$2) {
        var match$3 = match$2[1];
        if (match$3) {
          if (match$3[1]) {
            exit$1 = 2;
          } else {
            return /* Ppcmd_glue */Block.__(1, [/* :: */[
                        match$2[0],
                        /* :: */[
                          match$3[0],
                          /* :: */[
                            d2,
                            /* [] */0
                          ]
                        ]
                      ]]);
          }
        } else {
          exit$1 = 2;
        }
      } else {
        exit$1 = 2;
      }
    } else {
      exit$1 = 2;
    }
  }
  if (exit$1 === 2) {
    if (typeof d2 === "number") {
      exit = 1;
    } else if (d2.tag === 1) {
      return /* Ppcmd_glue */Block.__(1, [/* :: */[
                  d1,
                  d2[0]
                ]]);
    } else {
      exit = 1;
    }
  }
  if (exit === 1) {
    return /* Ppcmd_glue */Block.__(1, [/* :: */[
                d1,
                /* :: */[
                  d2,
                  /* [] */0
                ]
              ]]);
  }
  
}

function seq(s) {
  return /* Ppcmd_glue */Block.__(1, [s]);
}

function str(s) {
  return /* Ppcmd_string */Block.__(0, [s]);
}

function brk(param) {
  return /* Ppcmd_print_break */Block.__(4, [
            param[0],
            param[1]
          ]);
}

function fnl() {
  return /* Ppcmd_force_newline */1;
}

function ws(n) {
  return /* Ppcmd_print_break */Block.__(4, [
            n,
            0
          ]);
}

function comment(l) {
  return /* Ppcmd_comment */Block.__(5, [l]);
}

function mt() {
  return /* Ppcmd_empty */0;
}

function spc() {
  return /* Ppcmd_print_break */Block.__(4, [
            1,
            0
          ]);
}

function cut() {
  return /* Ppcmd_print_break */Block.__(4, [
            0,
            0
          ]);
}

function align() {
  return /* Ppcmd_print_break */Block.__(4, [
            0,
            0
          ]);
}

function $$int(n) {
  return /* Ppcmd_string */Block.__(0, [Pervasives.string_of_int(n)]);
}

function real(r) {
  return /* Ppcmd_string */Block.__(0, [Pervasives.string_of_float(r)]);
}

function bool(b) {
  return /* Ppcmd_string */Block.__(0, [Pervasives.string_of_bool(b)]);
}

function strbrk(s) {
  var aux = function (p, _n) {
    while(true) {
      var n = _n;
      if (n < s.length) {
        if (Caml_string.get(s, n) === /* " " */32) {
          if (p === n) {
            return /* :: */[
                    /* Ppcmd_print_break */Block.__(4, [
                        1,
                        0
                      ]),
                    aux(n + 1 | 0, n + 1 | 0)
                  ];
          } else {
            return /* :: */[
                    /* Ppcmd_string */Block.__(0, [$$String.sub(s, p, n - p | 0)]),
                    /* :: */[
                      /* Ppcmd_print_break */Block.__(4, [
                          1,
                          0
                        ]),
                      aux(n + 1 | 0, n + 1 | 0)
                    ]
                  ];
          }
        } else {
          _n = n + 1 | 0;
          continue ;
          
        }
      } else if (p === n) {
        return /* [] */0;
      } else {
        return /* :: */[
                /* Ppcmd_string */Block.__(0, [$$String.sub(s, p, n - p | 0)]),
                /* [] */0
              ];
      }
    };
  };
  return /* Ppcmd_glue */Block.__(1, [aux(0, 0)]);
}

function ismt(param) {
  if (typeof param === "number" && param === 0) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function h(n, s) {
  return /* Ppcmd_box */Block.__(2, [
            /* Pp_hbox */Block.__(0, [n]),
            s
          ]);
}

function v(n, s) {
  return /* Ppcmd_box */Block.__(2, [
            /* Pp_vbox */Block.__(1, [n]),
            s
          ]);
}

function hv(n, s) {
  return /* Ppcmd_box */Block.__(2, [
            /* Pp_hvbox */Block.__(2, [n]),
            s
          ]);
}

function hov(n, s) {
  return /* Ppcmd_box */Block.__(2, [
            /* Pp_hovbox */Block.__(3, [n]),
            s
          ]);
}

function tag(t, s) {
  return /* Ppcmd_tag */Block.__(3, [
            t,
            s
          ]);
}

function escape_string(s) {
  var _s = s;
  var _i = s.length - 1 | 0;
  while(true) {
    var i = _i;
    var s$1 = _s;
    if (i < 0) {
      return s$1;
    } else if (Caml_string.get(s$1, i) === /* "\"" */34) {
      var s$prime = $$String.sub(s$1, 0, i) + ("\"" + $$String.sub(s$1, i, s$1.length - i | 0));
      _i = i - 1 | 0;
      _s = s$prime;
      continue ;
      
    } else {
      _i = i - 1 | 0;
      continue ;
      
    }
  };
}

function qstring(s) {
  return app(app(/* Ppcmd_string */Block.__(0, ["\""]), /* Ppcmd_string */Block.__(0, [escape_string(s)])), /* Ppcmd_string */Block.__(0, ["\""]));
}

function quote(s) {
  var s$1 = app(app(/* Ppcmd_string */Block.__(0, ["\""]), s), /* Ppcmd_string */Block.__(0, ["\""]));
  return /* Ppcmd_box */Block.__(2, [
            /* Pp_hbox */Block.__(0, [0]),
            s$1
          ]);
}

function pp_with(ft, pp) {
  var cpp_open_box = function (param) {
    switch (param.tag | 0) {
      case 0 : 
          return Format.pp_open_hbox(ft, /* () */0);
      case 1 : 
          return Format.pp_open_vbox(ft, param[0]);
      case 2 : 
          return Format.pp_open_hvbox(ft, param[0]);
      case 3 : 
          return Format.pp_open_hovbox(ft, param[0]);
      
    }
  };
  var pp_cmd = function (param) {
    if (typeof param === "number") {
      if (param) {
        return Format.pp_force_newline(ft, /* () */0);
      } else {
        return /* () */0;
      }
    } else {
      switch (param.tag | 0) {
        case 0 : 
            var str = param[0];
            var n = utf8_length(str);
            return Format.pp_print_as(ft, n, str);
        case 1 : 
            return List.iter(pp_cmd, param[0]);
        case 2 : 
            cpp_open_box(param[0]);
            if (!Format.over_max_boxes(/* () */0)) {
              pp_cmd(param[1]);
            }
            return Format.pp_close_box(ft, /* () */0);
        case 3 : 
            Format.pp_open_tag(ft, param[0]);
            pp_cmd(param[1]);
            return Format.pp_close_tag(ft, /* () */0);
        case 4 : 
            return Format.pp_print_break(ft, param[0], param[1]);
        case 5 : 
            return List.iter((function (param) {
                          var ft$1 = ft;
                          var _s = param;
                          while(true) {
                            var s = _s;
                            var match;
                            try {
                              var n = $$String.index(s, /* "\n" */10);
                              match = /* tuple */[
                                $$String.sub(s, 0, n),
                                /* Some */[$$String.sub(s, n + 1 | 0, (s.length - n | 0) - 1 | 0)]
                              ];
                            }
                            catch (exn){
                              if (exn === Caml_builtin_exceptions.not_found) {
                                match = /* tuple */[
                                  s,
                                  /* None */0
                                ];
                              } else {
                                throw exn;
                              }
                            }
                            var os = match[1];
                            var s1 = match[0];
                            Format.pp_print_as(ft$1, utf8_length(s1), s1);
                            if (os) {
                              Format.pp_force_newline(ft$1, /* () */0);
                              _s = os[0];
                              continue ;
                              
                            } else {
                              return /* () */0;
                            }
                          };
                        }), param[0]);
        
      }
    }
  };
  try {
    return pp_cmd(pp);
  }
  catch (raw_reraise){
    var reraise = Js_exn.internalToOCamlException(raw_reraise);
    var reraise$1 = Backtrace$ReactTemplate.add_backtrace(reraise);
    Format.pp_print_flush(ft, /* () */0);
    return Exninfo$ReactTemplate.iraise(reraise$1);
  }
}

function string_of_ppcmds(c) {
  Curry._2(Format.fprintf(Format.str_formatter, /* Format */[
            /* Formatting_gen */Block.__(18, [
                /* Open_box */Block.__(1, [/* Format */[
                      /* End_of_format */0,
                      ""
                    ]]),
                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                        /* Close_box */0,
                        /* End_of_format */0
                      ])])
              ]),
            "@[%a@]"
          ]), pp_with, c);
  return Format.flush_str_formatter(/* () */0);
}

function pr_comma() {
  return app(/* Ppcmd_string */Block.__(0, [","]), /* Ppcmd_print_break */Block.__(4, [
                1,
                0
              ]));
}

function pr_semicolon() {
  return app(/* Ppcmd_string */Block.__(0, [";"]), /* Ppcmd_print_break */Block.__(4, [
                1,
                0
              ]));
}

function pr_bar() {
  return app(/* Ppcmd_string */Block.__(0, ["|"]), /* Ppcmd_print_break */Block.__(4, [
                1,
                0
              ]));
}

function pr_spcbar() {
  return app(/* Ppcmd_string */Block.__(0, [" |"]), /* Ppcmd_print_break */Block.__(4, [
                1,
                0
              ]));
}

function pr_arg(pr, x) {
  return app(/* Ppcmd_print_break */Block.__(4, [
                1,
                0
              ]), Curry._1(pr, x));
}

function pr_non_empty_arg(pr, x) {
  var pp = Curry._1(pr, x);
  if (ismt(pp)) {
    return /* Ppcmd_empty */0;
  } else {
    return app(/* Ppcmd_print_break */Block.__(4, [
                  1,
                  0
                ]), Curry._1(pr, x));
  }
}

function pr_opt(pr, param) {
  if (param) {
    return pr_arg(pr, param[0]);
  } else {
    return /* Ppcmd_empty */0;
  }
}

function pr_opt_no_spc(pr, param) {
  if (param) {
    return Curry._1(pr, param[0]);
  } else {
    return /* Ppcmd_empty */0;
  }
}

function pr_nth(n) {
  var s;
  if ((n / 10 | 0) % 10 === 1) {
    s = "th";
  } else {
    var match = n % 10;
    var switcher = match - 1 | 0;
    if (switcher > 2 || switcher < 0) {
      s = "th";
    } else {
      switch (switcher) {
        case 0 : 
            s = "st";
            break;
        case 1 : 
            s = "nd";
            break;
        case 2 : 
            s = "rd";
            break;
        
      }
    }
  }
  return app(/* Ppcmd_string */Block.__(0, [Pervasives.string_of_int(n)]), /* Ppcmd_string */Block.__(0, [s]));
}

function prlist(pr, l) {
  return /* Ppcmd_glue */Block.__(1, [List.map(pr, l)]);
}

function prlist_sep_lastsep(no_empty, sep_thunk, lastsep_thunk, elem, l) {
  var sep = Curry._1(sep_thunk, /* () */0);
  var lastsep = Curry._1(lastsep_thunk, /* () */0);
  var elems = List.map(elem, l);
  var filtered_elems = no_empty ? List.filter((function (e) {
              return 1 - ismt(e);
            }))(elems) : elems;
  var insert_seps = function (es) {
    if (es) {
      var t = es[1];
      var e = es[0];
      if (t) {
        if (t[1]) {
          return app(app(e, sep), insert_seps(t));
        } else {
          return app(app(e, lastsep), t[0]);
        }
      } else {
        return e;
      }
    } else {
      return /* Ppcmd_empty */0;
    }
  };
  return insert_seps(filtered_elems);
}

function prlist_strict(pr, l) {
  return prlist_sep_lastsep(/* true */1, mt, mt, pr, l);
}

function prlist_with_sep(sep, pr, l) {
  return prlist_sep_lastsep(/* false */0, sep, sep, pr, l);
}

function pr_sequence(pr, l) {
  return prlist_sep_lastsep(/* true */1, spc, spc, pr, l);
}

function pr_enum(pr, l) {
  return prlist_sep_lastsep(/* true */1, pr_comma, (function () {
                return app(/* Ppcmd_string */Block.__(0, [" and"]), /* Ppcmd_print_break */Block.__(4, [
                              1,
                              0
                            ]));
              }), pr, l);
}

function pr_vertical_list(pr, l) {
  if (l) {
    var s = prlist_with_sep(fnl, pr, l);
    return app(app(app(/* Ppcmd_force_newline */1, /* Ppcmd_string */Block.__(0, ["  "])), /* Ppcmd_box */Block.__(2, [
                      /* Pp_hovbox */Block.__(3, [0]),
                      s
                    ])), /* Ppcmd_force_newline */1);
  } else {
    return app(/* Ppcmd_string */Block.__(0, ["none"]), /* Ppcmd_force_newline */1);
  }
}

function prvecti_with_sep(sep, elem, v) {
  var pr = function (i) {
    if (i) {
      var r = pr(i - 1 | 0);
      var s = Curry._1(sep, /* () */0);
      var e = Curry._2(elem, i, Caml_array.caml_array_get(v, i));
      return app(app(r, s), e);
    } else {
      return Curry._2(elem, 0, Caml_array.caml_array_get(v, 0));
    }
  };
  var n = v.length;
  if (n) {
    return pr(n - 1 | 0);
  } else {
    return /* Ppcmd_empty */0;
  }
}

function prvecti(elem, v) {
  return prvecti_with_sep(mt, elem, v);
}

function prvect_with_sep(sep, elem, v) {
  return prvecti_with_sep(sep, (function () {
                return elem;
              }), v);
}

function prvect(elem, v) {
  return prvecti_with_sep(mt, (function () {
                return elem;
              }), v);
}

function surround(p) {
  var s = app(app(/* Ppcmd_string */Block.__(0, ["("]), p), /* Ppcmd_string */Block.__(0, [")"]));
  return /* Ppcmd_box */Block.__(2, [
            /* Pp_hovbox */Block.__(3, [1]),
            s
          ]);
}

var $plus$plus = app;

var qs = qstring;

exports.repr = repr;
exports.unrepr = unrepr;
exports.str = str;
exports.brk = brk;
exports.fnl = fnl;
exports.ws = ws;
exports.mt = mt;
exports.ismt = ismt;
exports.comment = comment;
exports.app = app;
exports.seq = seq;
exports.$plus$plus = $plus$plus;
exports.spc = spc;
exports.cut = cut;
exports.align = align;
exports.$$int = $$int;
exports.real = real;
exports.bool = bool;
exports.qstring = qstring;
exports.qs = qs;
exports.quote = quote;
exports.strbrk = strbrk;
exports.h = h;
exports.v = v;
exports.hv = hv;
exports.hov = hov;
exports.tag = tag;
exports.pr_comma = pr_comma;
exports.pr_semicolon = pr_semicolon;
exports.pr_bar = pr_bar;
exports.pr_spcbar = pr_spcbar;
exports.pr_arg = pr_arg;
exports.pr_non_empty_arg = pr_non_empty_arg;
exports.pr_opt = pr_opt;
exports.pr_opt_no_spc = pr_opt_no_spc;
exports.pr_nth = pr_nth;
exports.prlist = prlist;
exports.prlist_strict = prlist_strict;
exports.prlist_with_sep = prlist_with_sep;
exports.prvect = prvect;
exports.prvecti = prvecti;
exports.prvect_with_sep = prvect_with_sep;
exports.prvecti_with_sep = prvecti_with_sep;
exports.pr_enum = pr_enum;
exports.pr_sequence = pr_sequence;
exports.surround = surround;
exports.pr_vertical_list = pr_vertical_list;
exports.pp_with = pp_with;
exports.string_of_ppcmds = string_of_ppcmds;
/* Format Not a pure module */
