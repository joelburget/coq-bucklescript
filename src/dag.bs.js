// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var CMap$ReactTemplate = require("./cMap.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Make(funarg) {
  var NodeSet = $$Set.Make(funarg);
  var equal = function (param, param$1) {
    return +(param[/* uid */1] === param$1[/* uid */1]);
  };
  var compare = function (param, param$1) {
    return Caml_primitive.caml_int_compare(param[/* uid */1], param$1[/* uid */1]);
  };
  var to_string = function (param) {
    return Pervasives.string_of_int(param[/* uid */1]);
  };
  var data = function (param) {
    return param[/* data */0];
  };
  var having_it = function (param) {
    return param[/* having_it */2];
  };
  var Property = /* module */[
    /* equal */equal,
    /* compare */compare,
    /* to_string */to_string,
    /* data */data,
    /* having_it */having_it
  ];
  var NodeMap = CMap$ReactTemplate.Make(funarg);
  var empty_000 = /* graph */NodeMap[/* empty */0];
  var empty_001 = /* properties */NodeMap[/* empty */0];
  var empty_002 = /* infos */NodeMap[/* empty */0];
  var empty = /* record */[
    empty_000,
    empty_001,
    empty_002
  ];
  var mem = function (param, id) {
    return Curry._2(NodeMap[/* mem */2], id, param[/* graph */0]);
  };
  var add_edge = function (dag, from, trans, dest) {
    var tmp;
    try {
      tmp = Curry._3(NodeMap[/* modify */26], from, (function (_, arcs) {
              return /* :: */[
                      /* tuple */[
                        dest,
                        trans
                      ],
                      arcs
                    ];
            }), dag[/* graph */0]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        tmp = Curry._3(NodeMap[/* add */3], from, /* :: */[
              /* tuple */[
                dest,
                trans
              ],
              /* [] */0
            ], dag[/* graph */0]);
      } else {
        throw exn;
      }
    }
    return /* record */[
            /* graph */tmp,
            /* properties */dag[/* properties */1],
            /* infos */dag[/* infos */2]
          ];
  };
  var from_node = function (param, id) {
    return Curry._2(NodeMap[/* find */21], id, param[/* graph */0]);
  };
  var del_edge = function (dag, id, tgt) {
    var tmp;
    try {
      var modify = function (_, arcs) {
        var filter = function (param) {
          return +(Curry._2(funarg[/* compare */0], param[0], tgt) !== 0);
        };
        return List.filter(filter)(arcs);
      };
      tmp = Curry._3(NodeMap[/* modify */26], id, modify, dag[/* graph */0]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        tmp = dag[/* graph */0];
      } else {
        throw exn;
      }
    }
    return /* record */[
            /* graph */tmp,
            /* properties */dag[/* properties */1],
            /* infos */dag[/* infos */2]
          ];
  };
  var del_nodes = function (dag, s) {
    return /* record */[
            /* graph */Curry._2(NodeMap[/* filter */13], (function (n, l) {
                    var drop = Curry._2(NodeSet[/* mem */2], n, s);
                    if (!drop) {
                      if (!List.for_all((function (param) {
                                return 1 - Curry._2(NodeSet[/* mem */2], param[0], s);
                              }), l)) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              [
                                "dag.ml",
                                106,
                                8
                              ]
                            ];
                      }
                      
                    }
                    return 1 - drop;
                  }), dag[/* graph */0]),
            /* properties */Curry._2(NodeMap[/* filter */13], (function (n, _) {
                    return 1 - Curry._2(NodeSet[/* mem */2], n, s);
                  }), dag[/* properties */1]),
            /* infos */Curry._2(NodeMap[/* filter */13], (function (n, _) {
                    return 1 - Curry._2(NodeSet[/* mem */2], n, s);
                  }), dag[/* infos */2])
          ];
  };
  var clid = [1];
  var create_property = function (dag, l, data) {
    clid[0] = clid[0] + 1 | 0;
    var having_it = List.fold_right(NodeSet[/* add */3], l, NodeSet[/* empty */0]);
    var property_001 = /* uid */clid[0];
    var property = /* record */[
      /* data */data,
      property_001,
      /* having_it */having_it
    ];
    return /* record */[
            /* graph */dag[/* graph */0],
            /* properties */List.fold_right((function (x, ps) {
                    var k = x;
                    var v = property;
                    var m = ps;
                    try {
                      var l = Curry._2(NodeMap[/* find */21], k, m);
                      return Curry._3(NodeMap[/* add */3], k, /* :: */[
                                  v,
                                  l
                                ], m);
                    }
                    catch (exn){
                      if (exn === Caml_builtin_exceptions.not_found) {
                        return Curry._3(NodeMap[/* add */3], k, /* :: */[
                                    v,
                                    /* [] */0
                                  ], m);
                      } else {
                        throw exn;
                      }
                    }
                  }), l, dag[/* properties */1]),
            /* infos */dag[/* infos */2]
          ];
  };
  var property_of = function (dag, id) {
    try {
      return Curry._2(NodeMap[/* find */21], id, dag[/* properties */1]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return /* [] */0;
      } else {
        throw exn;
      }
    }
  };
  var del_property = function (dag, c) {
    return /* record */[
            /* graph */dag[/* graph */0],
            /* properties */Curry._2(NodeMap[/* filter */13], (function (_, cl) {
                    return +(cl !== /* [] */0);
                  }), Curry._2(NodeMap[/* map */22], (function (cl) {
                        return List.filter((function (c$prime) {
                                        return 1 - equal(c$prime, c);
                                      }))(cl);
                      }), dag[/* properties */1])),
            /* infos */dag[/* infos */2]
          ];
  };
  var get_info = function (dag, id) {
    try {
      return /* Some */[Curry._2(NodeMap[/* find */21], id, dag[/* infos */2])];
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return /* None */0;
      } else {
        throw exn;
      }
    }
  };
  var set_info = function (dag, id, info) {
    return /* record */[
            /* graph */dag[/* graph */0],
            /* properties */dag[/* properties */1],
            /* infos */Curry._3(NodeMap[/* add */3], id, info, dag[/* infos */2])
          ];
  };
  var clear_info = function (dag, id) {
    return /* record */[
            /* graph */dag[/* graph */0],
            /* properties */dag[/* properties */1],
            /* infos */Curry._2(NodeMap[/* remove */5], id, dag[/* infos */2])
          ];
  };
  var iter = function (dag, f) {
    return Curry._2(NodeMap[/* iter */9], (function (k, v) {
                  return Curry._4(f, k, property_of(dag, k), get_info(dag, k), v);
                }), dag[/* graph */0]);
  };
  var all_nodes = function (dag) {
    return Curry._1(NodeMap[/* domain */27], dag[/* graph */0]);
  };
  return [
          NodeSet,
          empty,
          add_edge,
          from_node,
          mem,
          del_edge,
          del_nodes,
          all_nodes,
          get_info,
          set_info,
          clear_info,
          Property,
          create_property,
          property_of,
          del_property,
          iter
        ];
}

exports.Make = Make;
/* No side effect */
