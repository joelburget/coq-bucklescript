// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var cur = [1];

function match_000() {
  cur[0] = cur[0] + 1 | 0;
  return cur[0];
}

function match_001(id) {
  if (id >= 0) {
    return +(id <= cur[0]);
  } else {
    return /* false */0;
  }
}

var in_range = match_001;

function of_int(id) {
  if (Flags$ReactTemplate.ide_slave[0]) {
    if (!Curry._1(in_range, id)) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "stateid.ml",
              21,
              27
            ]
          ];
    }
    
  }
  return id;
}

function to_int(id) {
  return id;
}

var newer_than = Caml_obj.caml_greaterthan;

var state_id_info = Curry._1(Exninfo$ReactTemplate.make, /* () */0);

function add(exn, valid, id) {
  return Curry._3(Exninfo$ReactTemplate.add, exn, state_id_info, /* tuple */[
              valid,
              id
            ]);
}

function get(exn) {
  return Curry._2(Exninfo$ReactTemplate.get, exn, state_id_info);
}

function equal(prim, prim$1) {
  return +(prim === prim$1);
}

function compare(x, y) {
  if (Caml_obj.caml_lessthan(x, y)) {
    return -1;
  } else if (x === y) {
    return 0;
  } else {
    return 1;
  }
}

var Self = /* module */[/* compare */compare];

var $$Set$1 = $$Set.Make(Self);

var initial = 1;

var dummy = 0;

var fresh = match_000;

var to_string = Pervasives.string_of_int;

exports.equal = equal;
exports.compare = compare;
exports.Self = Self;
exports.$$Set = $$Set$1;
exports.initial = initial;
exports.dummy = dummy;
exports.fresh = fresh;
exports.to_string = to_string;
exports.of_int = of_int;
exports.to_int = to_int;
exports.newer_than = newer_than;
exports.add = add;
exports.get = get;
/* state_id_info Not a pure module */
