// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pp$ReactTemplate = require("../src/pp.bs.js");
var Evd$ReactTemplate = require("../src/evd.bs.js");
var Term$ReactTemplate = require("../src/term.bs.js");
var Univ$ReactTemplate = require("../src/univ.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Vars$ReactTemplate = require("../src/vars.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var Constr$ReactTemplate = require("../src/constr.bs.js");
var Coqlib$ReactTemplate = require("../library/coqlib.bs.js");
var Global$ReactTemplate = require("../src/global.bs.js");
var Indrec$ReactTemplate = require("../src/indrec.bs.js");
var UState$ReactTemplate = require("../src/uState.bs.js");
var CErrors$ReactTemplate = require("../src/cErrors.bs.js");
var Context$ReactTemplate = require("../src/context.bs.js");
var EConstr$ReactTemplate = require("../src/eConstr.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Namegen$ReactTemplate = require("../src/namegen.bs.js");
var Termops$ReactTemplate = require("../src/termops.bs.js");
var Retyping$ReactTemplate = require("../src/retyping.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Globnames$ReactTemplate = require("../src/globnames.bs.js");
var Inductive$ReactTemplate = require("../src/inductive.bs.js");
var Universes$ReactTemplate = require("../src/universes.bs.js");
var Ind_tables$ReactTemplate = require("./ind_tables.bs.js");
var Safe_typing$ReactTemplate = require("../src/safe_typing.bs.js");
var Inductiveops$ReactTemplate = require("../src/inductiveops.bs.js");
var Reductionops$ReactTemplate = require("../src/reductionops.bs.js");

var hid = Names$ReactTemplate.Id[/* of_string */5]("H");

var xid = Names$ReactTemplate.Id[/* of_string */5]("X");

function default_id_of_sort(param) {
  if (param >= 2) {
    return xid;
  } else {
    return hid;
  }
}

function fresh(_, id) {
  return Namegen$ReactTemplate.next_global_ident_away(id, Names$ReactTemplate.Id[/* Set */9][/* empty */0]);
}

function with_context_set(ctx, param) {
  return /* tuple */[
          param[0],
          Univ$ReactTemplate.ContextSet[/* union */6](ctx, param[1])
        ];
}

function build_dependent_inductive(ind, param) {
  var mip = param[1];
  var match = Curry._2(Util$ReactTemplate.List[/* chop */99], mip[/* mind_nrealdecls */6], mip[/* mind_arity_ctxt */1]);
  return Term$ReactTemplate.applist(/* tuple */[
              Constr$ReactTemplate.mkIndU(ind),
              Util$ReactTemplate.$at(Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, mip[/* mind_nrealdecls */6], param[0][/* mind_params_ctxt */7]), Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, 0, match[0]))
            ]);
}

function named_hd(env, t, na) {
  return Namegen$ReactTemplate.named_hd(env, Evd$ReactTemplate.empty, EConstr$ReactTemplate.of_constr(t), na);
}

function name_assumption(env, param) {
  if (param.tag) {
    var c = param[1];
    return /* LocalDef */Block.__(1, [
              named_hd(env, c, param[0]),
              c,
              param[2]
            ]);
  } else {
    var t = param[1];
    return /* LocalAssum */Block.__(0, [
              named_hd(env, t, param[0]),
              t
            ]);
  }
}

function name_context(env, hyps) {
  return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (param, d) {
                  var env = param[0];
                  var d$prime = name_assumption(env, d);
                  return /* tuple */[
                          Environ$ReactTemplate.push_rel(d$prime, env),
                          /* :: */[
                            d$prime,
                            param[1]
                          ]
                        ];
                }), /* tuple */[
                env,
                /* [] */0
              ], Curry._1(Util$ReactTemplate.List[/* rev */4], hyps))[1];
}

function my_it_mkLambda_or_LetIn_name(s, c) {
  var env = Global$ReactTemplate.env(/* () */0);
  return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (c, d) {
                var d$1 = d;
                var b = c;
                return Term$ReactTemplate.mkLambda_or_LetIn(name_assumption(env, d$1), b);
              }), c, s);
}

function get_coq_eq(ctx) {
  try {
    var eq = Globnames$ReactTemplate.destIndRef(Coqlib$ReactTemplate.glob_eq);
    var match = with_context_set(ctx, Universes$ReactTemplate.fresh_inductive_instance(Global$ReactTemplate.env(/* () */0), eq));
    var eq$1 = match[0];
    return /* tuple */[
            Constr$ReactTemplate.mkIndU(eq$1),
            Constr$ReactTemplate.mkConstructUi(/* tuple */[
                  eq$1,
                  1
                ]),
            match[1]
          ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("eq not found."));
    } else {
      throw exn;
    }
  }
}

function univ_of_eq(env, eq) {
  var eq$1 = EConstr$ReactTemplate.of_constr(eq);
  var match = Constr$ReactTemplate.kind(EConstr$ReactTemplate.Unsafe[/* to_constr */0](Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, env, Evd$ReactTemplate.empty, eq$1)));
  if (match.tag === 6) {
    var match$1 = Constr$ReactTemplate.kind(match[1]);
    if (match$1.tag === 4) {
      var match$2 = match$1[0];
      if (match$2.tag) {
        return match$2[0];
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "eqschemes.ml",
                113,
                72
              ]
            ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "eqschemes.ml",
              113,
              72
            ]
          ];
    }
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "eqschemes.ml",
            114,
            9
          ]
        ];
  }
}

function error(msg) {
  return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str(msg));
}

function get_sym_eq_data(env, param) {
  var u = param[1];
  var specif = Inductive$ReactTemplate.lookup_mind_specif(env, param[0]);
  var mip = specif[1];
  var mib = specif[0];
  if (mib[/* mind_packets */0].length !== 1 || mip[/* mind_nf_lc */8].length !== 1) {
    error("Not an inductive type with a single constructor.");
  }
  var arityctxt = Vars$ReactTemplate.subst_instance_context(u, mip[/* mind_arity_ctxt */1]);
  var match = Curry._2(Util$ReactTemplate.List[/* chop */99], mip[/* mind_nrealdecls */6], arityctxt);
  var realsign = match[0];
  if (Curry._2(Util$ReactTemplate.List[/* exists */21], Context$ReactTemplate.Rel[/* Declaration */0][/* is_local_def */6], realsign)) {
    error("Inductive equalities with local definitions in arity not supported.");
  }
  var match$1 = Term$ReactTemplate.decompose_prod_assum(Caml_array.caml_array_get(mip[/* mind_nf_lc */8], 0));
  var match$2 = Constr$ReactTemplate.decompose_app(match$1[1]);
  if (Curry._1(Context$ReactTemplate.Rel[/* length */3], match$1[0]) !== Curry._1(Context$ReactTemplate.Rel[/* length */3], mib[/* mind_params_ctxt */7])) {
    error("Constructor must have no arguments");
  }
  var match$3 = Curry._2(Util$ReactTemplate.List[/* chop */99], mib[/* mind_nparams */5], match$2[1]);
  if (mip[/* mind_nrealargs */5] > mib[/* mind_nparams */5]) {
    error("Constructors arguments must repeat the parameters.");
  }
  var match$4 = Curry._2(Util$ReactTemplate.List[/* chop */99], mib[/* mind_nparams */5] - mip[/* mind_nrealargs */5] | 0, match$3[0]);
  var paramsctxt = Vars$ReactTemplate.subst_instance_context(u, mib[/* mind_params_ctxt */7]);
  var match$5 = Curry._2(Util$ReactTemplate.List[/* chop */99], mib[/* mind_nparams */5] - mip[/* mind_nrealargs */5] | 0, paramsctxt);
  if (!Curry._3(Util$ReactTemplate.List[/* equal */44], Constr$ReactTemplate.equal, match$4[1], match$3[1])) {
    error("Constructors arguments must repeat the parameters.");
  }
  return /* tuple */[
          specif,
          mip[/* mind_nrealargs */5],
          realsign,
          paramsctxt,
          match$5[0]
        ];
}

function get_non_sym_eq_data(env, param) {
  var u = param[1];
  var specif = Inductive$ReactTemplate.lookup_mind_specif(env, param[0]);
  var mip = specif[1];
  var mib = specif[0];
  if (mib[/* mind_packets */0].length !== 1 || mip[/* mind_nf_lc */8].length !== 1) {
    error("Not an inductive type with a single constructor.");
  }
  var arityctxt = Vars$ReactTemplate.subst_instance_context(u, mip[/* mind_arity_ctxt */1]);
  var match = Curry._2(Util$ReactTemplate.List[/* chop */99], mip[/* mind_nrealdecls */6], arityctxt);
  var realsign = match[0];
  if (Curry._2(Util$ReactTemplate.List[/* exists */21], Context$ReactTemplate.Rel[/* Declaration */0][/* is_local_def */6], realsign)) {
    error("Inductive equalities with local definitions in arity not supported");
  }
  var match$1 = Term$ReactTemplate.decompose_prod_assum(Caml_array.caml_array_get(mip[/* mind_nf_lc */8], 0));
  var match$2 = Constr$ReactTemplate.decompose_app(match$1[1]);
  if (Curry._1(Context$ReactTemplate.Rel[/* length */3], match$1[0]) !== Curry._1(Context$ReactTemplate.Rel[/* length */3], mib[/* mind_params_ctxt */7])) {
    error("Constructor must have no arguments");
  }
  var match$3 = Curry._2(Util$ReactTemplate.List[/* chop */99], mib[/* mind_nparams */5], match$2[1]);
  var constrargs = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          return Vars$ReactTemplate.subst_instance_constr(u, param);
        }), match$3[1]);
  var paramsctxt = Vars$ReactTemplate.subst_instance_context(u, mib[/* mind_params_ctxt */7]);
  return /* tuple */[
          specif,
          constrargs,
          realsign,
          paramsctxt,
          mip[/* mind_nrealargs */5]
        ];
}

function build_sym_scheme(env, ind) {
  var match = Universes$ReactTemplate.fresh_inductive_instance(env, ind);
  var indu = match[0];
  var match$1 = get_sym_eq_data(env, indu);
  var nrealargs = match$1[1];
  var specif = match$1[0];
  var mib = specif[0];
  var cstr = function (n) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                Constr$ReactTemplate.mkConstructUi(/* tuple */[
                      indu,
                      1
                    ]),
                Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, n, mib[/* mind_params_ctxt */7])
              ]);
  };
  var varH = fresh(env, default_id_of_sort(Inductive$ReactTemplate.mind_arity(specif[1])[1]));
  var applied_ind = build_dependent_inductive(indu, specif);
  var realsign_ind = name_context(env, /* :: */[
        /* LocalAssum */Block.__(0, [
            /* Name */[varH],
            applied_ind
          ]),
        match$1[2]
      ]);
  var ci = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), indu[0], /* RegularStyle */4);
  var c = my_it_mkLambda_or_LetIn_name(realsign_ind, Constr$ReactTemplate.mkCase(/* tuple */[
            ci,
            my_it_mkLambda_or_LetIn_name(Termops$ReactTemplate.lift_rel_context(nrealargs + 1 | 0)(realsign_ind), Constr$ReactTemplate.mkApp(/* tuple */[
                      Constr$ReactTemplate.mkIndU(indu),
                      Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                            Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs) + 2 | 0, match$1[4]),
                            /* :: */[
                              Termops$ReactTemplate.rel_vect(1, nrealargs),
                              /* :: */[
                                Termops$ReactTemplate.rel_vect((nrealargs << 1) + 2 | 0, nrealargs),
                                /* [] */0
                              ]
                            ]
                          ])
                    ])),
            Constr$ReactTemplate.mkRel(1),
            /* array */[cstr(nrealargs + 1 | 0)]
          ]));
  var c$1 = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c), match$1[3]);
  return /* tuple */[
          c$1,
          UState$ReactTemplate.of_context_set(match[1])
        ];
}

var sym_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_sym_internal", /* None */0, (function (_, ind) {
        var match = build_sym_scheme(Global$ReactTemplate.env(/* () */0), ind);
        return /* tuple */[
                /* tuple */[
                  match[0],
                  match[1]
                ],
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

function const_of_scheme(kind, _, ind, ctx) {
  var match = Ind_tables$ReactTemplate.find_scheme(/* None */0, kind, ind);
  var match$1 = with_context_set(ctx, Universes$ReactTemplate.fresh_constant_instance(Global$ReactTemplate.env(/* () */0), match[0]));
  return /* tuple */[
          Constr$ReactTemplate.mkConstU(match$1[0]),
          match$1[1],
          match[1]
        ];
}

function build_sym_involutive_scheme(env, ind) {
  var match = Universes$ReactTemplate.fresh_inductive_instance(env, ind);
  var indu = match[0];
  var ind$1 = indu[0];
  var match$1 = get_sym_eq_data(env, indu);
  var paramsctxt1 = match$1[4];
  var paramsctxt = match$1[3];
  var nrealargs = match$1[1];
  var specif = match$1[0];
  var match$2 = get_coq_eq(match[1]);
  var match$3 = const_of_scheme(sym_scheme_kind, env, ind$1, match$2[2]);
  var sym = match$3[0];
  var cstr = function (n) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                Constr$ReactTemplate.mkConstructUi(/* tuple */[
                      indu,
                      1
                    ]),
                Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, n, paramsctxt)
              ]);
  };
  var varH = fresh(env, default_id_of_sort(Inductive$ReactTemplate.mind_arity(specif[1])[1]));
  var applied_ind = build_dependent_inductive(indu, specif);
  var applied_ind_C = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkIndU(indu),
        Util$ReactTemplate.$$Array[/* append */3](Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, nrealargs + 1 | 0, specif[0][/* mind_params_ctxt */7]), Termops$ReactTemplate.rel_vect(nrealargs + 1 | 0, nrealargs))
      ]);
  var realsign_ind = name_context(env, /* :: */[
        /* LocalAssum */Block.__(0, [
            /* Name */[varH],
            applied_ind
          ]),
        match$1[2]
      ]);
  var ci = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), ind$1, /* RegularStyle */4);
  var c = my_it_mkLambda_or_LetIn_name(realsign_ind, Constr$ReactTemplate.mkCase(/* tuple */[
            ci,
            my_it_mkLambda_or_LetIn_name(Termops$ReactTemplate.lift_rel_context(nrealargs + 1 | 0)(realsign_ind), Constr$ReactTemplate.mkApp(/* tuple */[
                      match$2[0],
                      /* array */[
                        Constr$ReactTemplate.mkApp(/* tuple */[
                              Constr$ReactTemplate.mkIndU(indu),
                              Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                                    Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs) + 2 | 0, paramsctxt1),
                                    /* :: */[
                                      Termops$ReactTemplate.rel_vect((nrealargs << 1) + 2 | 0, nrealargs),
                                      /* :: */[
                                        Termops$ReactTemplate.rel_vect(1, nrealargs),
                                        /* [] */0
                                      ]
                                    ]
                                  ])
                            ]),
                        Constr$ReactTemplate.mkApp(/* tuple */[
                              sym,
                              Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                                    Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs) + 2 | 0, paramsctxt1),
                                    /* :: */[
                                      Termops$ReactTemplate.rel_vect(1, nrealargs),
                                      /* :: */[
                                        Termops$ReactTemplate.rel_vect((nrealargs << 1) + 2 | 0, nrealargs),
                                        /* :: */[
                                          /* array */[Constr$ReactTemplate.mkApp(/* tuple */[
                                                  sym,
                                                  Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                                                        Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs) + 2 | 0, paramsctxt1),
                                                        /* :: */[
                                                          Termops$ReactTemplate.rel_vect((nrealargs << 1) + 2 | 0, nrealargs),
                                                          /* :: */[
                                                            Termops$ReactTemplate.rel_vect(1, nrealargs),
                                                            /* :: */[
                                                              /* array */[Constr$ReactTemplate.mkRel(1)],
                                                              /* [] */0
                                                            ]
                                                          ]
                                                        ]
                                                      ])
                                                ])],
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ])
                            ]),
                        Constr$ReactTemplate.mkRel(1)
                      ]
                    ])),
            Constr$ReactTemplate.mkRel(1),
            /* array */[Constr$ReactTemplate.mkApp(/* tuple */[
                    match$2[1],
                    /* array */[
                      applied_ind_C,
                      cstr(nrealargs + 1 | 0)
                    ]
                  ])]
          ]));
  var c$1 = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c), paramsctxt);
  return /* tuple */[
          /* tuple */[
            c$1,
            UState$ReactTemplate.of_context_set(match$3[1])
          ],
          match$3[2]
        ];
}

var sym_involutive_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_sym_involutive", /* None */0, (function (_, ind) {
        return build_sym_involutive_scheme(Global$ReactTemplate.env(/* () */0), ind);
      }));

function build_l2r_rew_scheme(dep, env, ind, kind) {
  var match = Universes$ReactTemplate.fresh_inductive_instance(env, ind);
  var indu = match[0];
  var ind$1 = indu[0];
  var match$1 = get_sym_eq_data(env, indu);
  var paramsctxt1 = match$1[4];
  var realsign = match$1[2];
  var nrealargs = match$1[1];
  var specif = match$1[0];
  var mip = specif[1];
  var match$2 = const_of_scheme(sym_scheme_kind, env, ind$1, match[1]);
  var sym = match$2[0];
  var match$3 = const_of_scheme(sym_involutive_scheme_kind, env, ind$1, match$2[1]);
  var match$4 = get_coq_eq(match$3[1]);
  var eq = match$4[0];
  var cstr = function (n, p) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                Constr$ReactTemplate.mkConstructUi(/* tuple */[
                      indu,
                      1
                    ]),
                Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                      Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, n, paramsctxt1),
                      /* :: */[
                        Termops$ReactTemplate.rel_vect(p, nrealargs),
                        /* [] */0
                      ]
                    ])
              ]);
  };
  var varH = fresh(env, default_id_of_sort(Inductive$ReactTemplate.mind_arity(mip)[1]));
  var varHC = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("HC"));
  var varP = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("P"));
  var applied_ind = build_dependent_inductive(indu, specif);
  var applied_ind_P = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkIndU(indu),
        Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
              Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs), paramsctxt1),
              /* :: */[
                Termops$ReactTemplate.rel_vect(0, nrealargs),
                /* :: */[
                  Termops$ReactTemplate.rel_vect(nrealargs, nrealargs),
                  /* [] */0
                ]
              ]
            ])
      ]);
  var applied_ind_G = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkIndU(indu),
        Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
              Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs) + 3 | 0, paramsctxt1),
              /* :: */[
                Termops$ReactTemplate.rel_vect(nrealargs + 3 | 0, nrealargs),
                /* :: */[
                  Termops$ReactTemplate.rel_vect(0, nrealargs),
                  /* [] */0
                ]
              ]
            ])
      ]);
  var realsign_P = Termops$ReactTemplate.lift_rel_context(nrealargs)(realsign);
  var realsign_ind_P = name_context(env, /* :: */[
        /* LocalAssum */Block.__(0, [
            /* Name */[varH],
            applied_ind_P
          ]),
        realsign_P
      ]);
  var realsign_ind_G = name_context(env, /* :: */[
        /* LocalAssum */Block.__(0, [
            /* Name */[varH],
            applied_ind_G
          ]),
        Termops$ReactTemplate.lift_rel_context(nrealargs + 3 | 0)(realsign)
      ]);
  var applied_sym_C = function (n) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                sym,
                Util$ReactTemplate.$$Array[/* append */3](Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, n, mip[/* mind_arity_ctxt */1]), /* array */[Constr$ReactTemplate.mkVar(varH)])
              ]);
  };
  var applied_sym_G = Constr$ReactTemplate.mkApp(/* tuple */[
        sym,
        Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
              Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(nrealargs, 3) + 4 | 0, paramsctxt1),
              /* :: */[
                Termops$ReactTemplate.rel_vect(nrealargs + 4 | 0, nrealargs),
                /* :: */[
                  Termops$ReactTemplate.rel_vect(1, nrealargs),
                  /* :: */[
                    /* array */[Constr$ReactTemplate.mkRel(1)],
                    /* [] */0
                  ]
                ]
              ]
            ])
      ]);
  var match$5 = Universes$ReactTemplate.fresh_sort_in_family(Global$ReactTemplate.env(/* () */0), kind);
  var ctx = Univ$ReactTemplate.ContextSet[/* union */6](match$4[2], match$5[1]);
  var s = Constr$ReactTemplate.mkSort(match$5[0]);
  var ci = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), ind$1, /* RegularStyle */4);
  var cieq = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), Constr$ReactTemplate.destInd(eq)[0], /* RegularStyle */4);
  var applied_PC = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        Util$ReactTemplate.$$Array[/* append */3](Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, 1, realsign), dep ? /* array */[cstr((nrealargs << 1) + 1 | 0, 1)] : /* array */[])
      ]);
  var applied_PG = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        Util$ReactTemplate.$$Array[/* append */3](Termops$ReactTemplate.rel_vect(1, nrealargs), dep ? /* array */[applied_sym_G] : /* array */[])
      ]);
  var applied_PR = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        Util$ReactTemplate.$$Array[/* append */3](Termops$ReactTemplate.rel_vect(nrealargs + 5 | 0, nrealargs), dep ? /* array */[Constr$ReactTemplate.mkRel(2)] : /* array */[])
      ]);
  var applied_sym_sym = Constr$ReactTemplate.mkApp(/* tuple */[
        sym,
        Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
              Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, (nrealargs << 1) + 4 | 0, paramsctxt1),
              /* :: */[
                Termops$ReactTemplate.rel_vect(4, nrealargs),
                /* :: */[
                  Termops$ReactTemplate.rel_vect(nrealargs + 4 | 0, nrealargs),
                  /* :: */[
                    /* array */[Constr$ReactTemplate.mkApp(/* tuple */[
                            sym,
                            Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                                  Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, (nrealargs << 1) + 4 | 0, paramsctxt1),
                                  /* :: */[
                                    Termops$ReactTemplate.rel_vect(nrealargs + 4 | 0, nrealargs),
                                    /* :: */[
                                      Termops$ReactTemplate.rel_vect(4, nrealargs),
                                      /* :: */[
                                        /* array */[Constr$ReactTemplate.mkRel(2)],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ])
                          ])],
                    /* [] */0
                  ]
                ]
              ]
            ])
      ]);
  var main_body = Constr$ReactTemplate.mkCase(/* tuple */[
        ci,
        my_it_mkLambda_or_LetIn_name(realsign_ind_G, applied_PG),
        applied_sym_C(3),
        /* array */[Constr$ReactTemplate.mkVar(varHC)]
      ]);
  var c = my_it_mkLambda_or_LetIn_name(realsign, Term$ReactTemplate.mkNamedLambda(varP, Curry._2(Term$ReactTemplate.it_mkProd_or_LetIn, s, dep ? realsign_ind_P : realsign_P), Term$ReactTemplate.mkNamedLambda(varHC, applied_PC, Term$ReactTemplate.mkNamedLambda(varH, Vars$ReactTemplate.lift(2)(applied_ind), dep ? Constr$ReactTemplate.mkCase(/* tuple */[
                          cieq,
                          Constr$ReactTemplate.mkLambda(/* tuple */[
                                /* Name */[varH],
                                Vars$ReactTemplate.lift(3)(applied_ind),
                                Constr$ReactTemplate.mkLambda(/* tuple */[
                                      /* Anonymous */0,
                                      Constr$ReactTemplate.mkApp(/* tuple */[
                                            eq,
                                            /* array */[
                                              Vars$ReactTemplate.lift(4)(applied_ind),
                                              applied_sym_sym,
                                              Constr$ReactTemplate.mkRel(1)
                                            ]
                                          ]),
                                      applied_PR
                                    ])
                              ]),
                          Constr$ReactTemplate.mkApp(/* tuple */[
                                match$3[0],
                                Util$ReactTemplate.$$Array[/* append */3](Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, 3, mip[/* mind_arity_ctxt */1]), /* array */[Constr$ReactTemplate.mkVar(varH)])
                              ]),
                          /* array */[main_body]
                        ]) : main_body))));
  var c$1 = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c), match$1[3]);
  return /* tuple */[
          /* tuple */[
            c$1,
            UState$ReactTemplate.of_context_set(ctx)
          ],
          Safe_typing$ReactTemplate.concat_private(match$3[2], match$2[2])
        ];
}

function build_l2r_forward_rew_scheme(dep, env, ind, kind) {
  var match = Universes$ReactTemplate.fresh_inductive_instance(env, ind);
  var indu = match[0];
  var match$1 = get_sym_eq_data(env, indu);
  var paramsctxt1 = match$1[4];
  var realsign = match$1[2];
  var nrealargs = match$1[1];
  var specif = match$1[0];
  var cstr = function (n, p) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                Constr$ReactTemplate.mkConstructUi(/* tuple */[
                      indu,
                      1
                    ]),
                Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
                      Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, n, paramsctxt1),
                      /* :: */[
                        Termops$ReactTemplate.rel_vect(p, nrealargs),
                        /* [] */0
                      ]
                    ])
              ]);
  };
  var varH = fresh(env, default_id_of_sort(Inductive$ReactTemplate.mind_arity(specif[1])[1]));
  var varHC = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("HC"));
  var varP = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("P"));
  var applied_ind = build_dependent_inductive(indu, specif);
  var applied_ind_P = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkIndU(indu),
        Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
              Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, (nrealargs << 2) + 2 | 0, paramsctxt1),
              /* :: */[
                Termops$ReactTemplate.rel_vect(0, nrealargs),
                /* :: */[
                  Termops$ReactTemplate.rel_vect(nrealargs + 1 | 0, nrealargs),
                  /* [] */0
                ]
              ]
            ])
      ]);
  var applied_ind_P$prime = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkIndU(indu),
        Util$ReactTemplate.$$Array[/* concat */4](/* :: */[
              Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, Caml_int32.imul(3, nrealargs) + 1 | 0, paramsctxt1),
              /* :: */[
                Termops$ReactTemplate.rel_vect(0, nrealargs),
                /* :: */[
                  Termops$ReactTemplate.rel_vect((nrealargs << 1) + 1 | 0, nrealargs),
                  /* [] */0
                ]
              ]
            ])
      ]);
  var realsign_P = function (n) {
    return Termops$ReactTemplate.lift_rel_context(Caml_int32.imul(nrealargs, n) + n | 0)(realsign);
  };
  var realsign_ind = name_context(env, /* :: */[
        /* LocalAssum */Block.__(0, [
            /* Name */[varH],
            applied_ind
          ]),
        realsign
      ]);
  var realsign_ind_P = function (n, aP) {
    return name_context(env, /* :: */[
                /* LocalAssum */Block.__(0, [
                    /* Name */[varH],
                    aP
                  ]),
                realsign_P(n)
              ]);
  };
  var match$2 = Universes$ReactTemplate.fresh_sort_in_family(Global$ReactTemplate.env(/* () */0), kind);
  var ctx = Univ$ReactTemplate.ContextSet[/* union */6](match[1], match$2[1]);
  var s = Constr$ReactTemplate.mkSort(match$2[0]);
  var ci = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), indu[0], /* RegularStyle */4);
  var applied_PC = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        Util$ReactTemplate.$$Array[/* append */3](Termops$ReactTemplate.rel_vect((nrealargs << 1) + 3 | 0, nrealargs), dep ? /* array */[Constr$ReactTemplate.mkRel(2)] : /* array */[])
      ]);
  var applied_PC$prime = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        Util$ReactTemplate.$$Array[/* append */3](Termops$ReactTemplate.rel_vect(nrealargs + 2 | 0, nrealargs), dep ? /* array */[cstr((nrealargs << 1) + 2 | 0, nrealargs + 2 | 0)] : /* array */[])
      ]);
  var applied_PG = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        Util$ReactTemplate.$$Array[/* append */3](Termops$ReactTemplate.rel_vect(3, nrealargs), dep ? /* array */[cstr(Caml_int32.imul(3, nrealargs) + 4 | 0, 3)] : /* array */[])
      ]);
  var s$1 = dep ? realsign_ind_P(2, applied_ind_P) : realsign_P(2);
  var s$2 = dep ? realsign_ind_P(1, applied_ind_P$prime) : realsign_P(2);
  var c = my_it_mkLambda_or_LetIn_name(realsign, Term$ReactTemplate.mkNamedLambda(varH, applied_ind, Constr$ReactTemplate.mkCase(/* tuple */[
                ci,
                my_it_mkLambda_or_LetIn_name(Termops$ReactTemplate.lift_rel_context(nrealargs + 1 | 0)(realsign_ind), Term$ReactTemplate.mkNamedProd(varP, Curry._2(Term$ReactTemplate.it_mkProd_or_LetIn, s, s$1), Term$ReactTemplate.mkNamedProd(varHC, applied_PC, applied_PG))),
                Constr$ReactTemplate.mkVar(varH),
                /* array */[Term$ReactTemplate.mkNamedLambda(varP, Curry._2(Term$ReactTemplate.it_mkProd_or_LetIn, s, s$2), Term$ReactTemplate.mkNamedLambda(varHC, applied_PC$prime, Constr$ReactTemplate.mkVar(varHC)))]
              ])));
  var c$1 = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c), match$1[3]);
  return /* tuple */[
          c$1,
          UState$ReactTemplate.of_context_set(ctx)
        ];
}

function build_r2l_forward_rew_scheme(dep, env, ind, kind) {
  var match = Universes$ReactTemplate.fresh_inductive_instance(env, ind);
  var indu = match[0];
  var match$1 = get_non_sym_eq_data(env, indu);
  var nrealargs = match$1[4];
  var realsign = match$1[2];
  var constrargs = match$1[1];
  var specif = match$1[0];
  var mib = specif[0];
  var cstr = function (n) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                Constr$ReactTemplate.mkConstructUi(/* tuple */[
                      indu,
                      1
                    ]),
                Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, n, mib[/* mind_params_ctxt */7])
              ]);
  };
  var constrargs_cstr = Util$ReactTemplate.$at(constrargs, /* :: */[
        cstr(0),
        /* [] */0
      ]);
  var varH = fresh(env, default_id_of_sort(Inductive$ReactTemplate.mind_arity(specif[1])[1]));
  var varHC = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("HC"));
  var varP = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("P"));
  var applied_ind = build_dependent_inductive(indu, specif);
  var realsign_ind = name_context(env, /* :: */[
        /* LocalAssum */Block.__(0, [
            /* Name */[varH],
            applied_ind
          ]),
        realsign
      ]);
  var match$2 = Universes$ReactTemplate.fresh_sort_in_family(Global$ReactTemplate.env(/* () */0), kind);
  var ctx = Univ$ReactTemplate.ContextSet[/* union */6](match[1], match$2[1]);
  var s = Constr$ReactTemplate.mkSort(match$2[0]);
  var ci = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), indu[0], /* RegularStyle */4);
  var applied_PC = Term$ReactTemplate.applist(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        dep ? constrargs_cstr : constrargs
      ]);
  var applied_PG = Constr$ReactTemplate.mkApp(/* tuple */[
        Constr$ReactTemplate.mkVar(varP),
        dep ? Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, 0, realsign_ind) : Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, 1, realsign)
      ]);
  var s$1 = Termops$ReactTemplate.lift_rel_context(nrealargs + 1 | 0)(dep ? realsign_ind : realsign);
  var c = my_it_mkLambda_or_LetIn_name(realsign_ind, Term$ReactTemplate.mkNamedLambda(varP, Curry._2(Term$ReactTemplate.it_mkProd_or_LetIn, s, s$1), Term$ReactTemplate.mkNamedLambda(varHC, Vars$ReactTemplate.lift(1)(applied_PG), Constr$ReactTemplate.mkApp(/* tuple */[
                    Constr$ReactTemplate.mkCase(/* tuple */[
                          ci,
                          my_it_mkLambda_or_LetIn_name(Termops$ReactTemplate.lift_rel_context(nrealargs + 3 | 0)(realsign_ind), Term$ReactTemplate.mkArrow(applied_PG, Vars$ReactTemplate.lift((nrealargs << 1) + 5 | 0)(applied_PC))),
                          Constr$ReactTemplate.mkRel(3),
                          /* array */[Constr$ReactTemplate.mkLambda(/* tuple */[
                                  /* Name */[varHC],
                                  Vars$ReactTemplate.lift(nrealargs + 3 | 0)(applied_PC),
                                  Constr$ReactTemplate.mkRel(1)
                                ])]
                        ]),
                    /* array */[Constr$ReactTemplate.mkVar(varHC)]
                  ]))));
  var c$1 = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c), match$1[3]);
  return /* tuple */[
          c$1,
          UState$ReactTemplate.of_context_set(ctx)
        ];
}

function fix_r2l_forward_rew_scheme(param) {
  var c = param[0];
  var t = Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, Global$ReactTemplate.env(/* () */0), Evd$ReactTemplate.empty, EConstr$ReactTemplate.of_constr(c));
  var t$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](t);
  var match = Term$ReactTemplate.decompose_prod_assum(t$1);
  var ctx = match[0];
  var exit = 0;
  if (ctx) {
    var match$1 = ctx[1];
    if (match$1) {
      var match$2 = match$1[1];
      if (match$2) {
        var indargs = match$2[1];
        var c$1 = Term$ReactTemplate.mkLambda_or_LetIn(Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], (function (param) {
                    return Vars$ReactTemplate.liftn(-1, 1, param);
                  }), match$1[0]), Term$ReactTemplate.mkLambda_or_LetIn(Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], (function (param) {
                        return Vars$ReactTemplate.liftn(-1, 2, param);
                      }), ctx[0]), Term$ReactTemplate.mkLambda_or_LetIn(Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], Vars$ReactTemplate.lift(2), match$2[0]), EConstr$ReactTemplate.Unsafe[/* to_constr */0](Reductionops$ReactTemplate.whd_beta(Evd$ReactTemplate.empty, EConstr$ReactTemplate.of_constr(Term$ReactTemplate.applist(/* tuple */[
                                      c,
                                      Util$ReactTemplate.$at(Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, 3, indargs), /* :: */[
                                            Constr$ReactTemplate.mkRel(1),
                                            /* :: */[
                                              Constr$ReactTemplate.mkRel(3),
                                              /* :: */[
                                                Constr$ReactTemplate.mkRel(2),
                                                /* [] */0
                                              ]
                                            ]
                                          ])
                                    ])))))));
        var c$prime = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c$1), indargs);
        return /* tuple */[
                c$prime,
                param[1]
              ];
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Ill-formed non-dependent left-to-right rewriting scheme."));
  }
  
}

function build_r2l_rew_scheme(dep, env, ind, k) {
  var sigma = Evd$ReactTemplate.from_env(env);
  var match = Evd$ReactTemplate.fresh_inductive_instance(/* None */0, env, sigma, ind);
  var match$1 = Indrec$ReactTemplate.build_case_analysis_scheme(env, match[0], match[1], dep, k);
  return /* tuple */[
          match$1[1],
          Evd$ReactTemplate.evar_universe_context(match$1[0])
        ];
}

var rew_l2r_dep_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_rew_r_dep", /* None */0, (function (_, ind) {
        return build_l2r_rew_scheme(/* true */1, Global$ReactTemplate.env(/* () */0), ind, /* InType */2);
      }));

var rew_r2l_dep_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_rew_dep", /* None */0, (function (_, ind) {
        return /* tuple */[
                build_r2l_rew_scheme(/* true */1, Global$ReactTemplate.env(/* () */0), ind, /* InType */2),
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

var rew_r2l_forward_dep_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_rew_fwd_dep", /* None */0, (function (_, ind) {
        return /* tuple */[
                build_r2l_forward_rew_scheme(/* true */1, Global$ReactTemplate.env(/* () */0), ind, /* InType */2),
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

var rew_l2r_forward_dep_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_rew_fwd_r_dep", /* None */0, (function (_, ind) {
        return /* tuple */[
                build_l2r_forward_rew_scheme(/* true */1, Global$ReactTemplate.env(/* () */0), ind, /* InType */2),
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

var rew_l2r_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_rew_r", /* None */0, (function (_, ind) {
        return /* tuple */[
                fix_r2l_forward_rew_scheme(build_r2l_forward_rew_scheme(/* false */0, Global$ReactTemplate.env(/* () */0), ind, /* InType */2)),
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

var rew_r2l_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_rew", /* None */0, (function (_, ind) {
        return /* tuple */[
                build_r2l_rew_scheme(/* false */0, Global$ReactTemplate.env(/* () */0), ind, /* InType */2),
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

function build_congr(env, param, ind) {
  var eq = param[0];
  var match = with_context_set(param[2], Universes$ReactTemplate.fresh_inductive_instance(env, ind));
  var indu = match[0];
  var u = indu[1];
  var ind$1 = indu[0];
  var match$1 = Inductive$ReactTemplate.lookup_mind_specif(env, ind$1);
  var mip = match$1[1];
  var mib = match$1[0];
  if (mib[/* mind_packets */0].length !== 1 || mip[/* mind_nf_lc */8].length !== 1) {
    error("Not an inductive type with a single constructor.");
  }
  if (mip[/* mind_nrealargs */5] !== 1) {
    error("Expect an inductive type with one predicate parameter.");
  }
  var arityctxt = Vars$ReactTemplate.subst_instance_context(u, mip[/* mind_arity_ctxt */1]);
  var paramsctxt = Vars$ReactTemplate.subst_instance_context(u, mib[/* mind_params_ctxt */7]);
  var match$2 = Curry._2(Util$ReactTemplate.List[/* chop */99], mip[/* mind_nrealdecls */6], arityctxt);
  var realsign = match$2[0];
  if (Curry._2(Util$ReactTemplate.List[/* exists */21], Context$ReactTemplate.Rel[/* Declaration */0][/* is_local_def */6], realsign)) {
    error("Inductive equalities with local definitions in arity not supported.");
  }
  var env_with_arity = Environ$ReactTemplate.push_rel_context(arityctxt, env);
  var ty = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], Environ$ReactTemplate.lookup_rel((mip[/* mind_nrealargs */5] - 1 | 0) + 1 | 0, env_with_arity));
  var match$3 = Term$ReactTemplate.decompose_prod_assum(Caml_array.caml_array_get(mip[/* mind_nf_lc */8], 0));
  var match$4 = Constr$ReactTemplate.decompose_app(match$3[1]);
  if (Curry._1(Context$ReactTemplate.Rel[/* length */3], match$3[0]) !== Curry._1(Context$ReactTemplate.Rel[/* length */3], mib[/* mind_params_ctxt */7])) {
    error("Constructor must have no arguments");
  }
  var b = Curry._2(Util$ReactTemplate.List[/* nth */3], match$4[1], (1 + mib[/* mind_nparams */5] | 0) - 1 | 0);
  var varB = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("B"));
  var varH = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("H"));
  var varf = fresh(env, Names$ReactTemplate.Id[/* of_string */5]("f"));
  var ci = Inductiveops$ReactTemplate.make_case_info(Global$ReactTemplate.env(/* () */0), ind$1, /* RegularStyle */4);
  var match$5 = Universes$ReactTemplate.extend_context(Universes$ReactTemplate.new_global_univ(/* () */0), match[1]);
  var ctx = match$5[1];
  var uni = match$5[0];
  var ctx_000 = ctx[0];
  var ctx_001 = Univ$ReactTemplate.enforce_leq(uni, univ_of_eq(env, eq), ctx[1]);
  var ctx$1 = /* tuple */[
    ctx_000,
    ctx_001
  ];
  var c = Term$ReactTemplate.mkNamedLambda(varB, Constr$ReactTemplate.mkSort(/* Type */Block.__(1, [uni])), Term$ReactTemplate.mkNamedLambda(varf, Term$ReactTemplate.mkArrow(Vars$ReactTemplate.lift(1)(ty), Constr$ReactTemplate.mkVar(varB)), my_it_mkLambda_or_LetIn_name(Termops$ReactTemplate.lift_rel_context(2)(realsign), Term$ReactTemplate.mkNamedLambda(varH, Term$ReactTemplate.applist(/* tuple */[
                        Constr$ReactTemplate.mkIndU(indu),
                        Util$ReactTemplate.$at(Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, mip[/* mind_nrealargs */5] + 2 | 0, paramsctxt), Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, 0, realsign))
                      ]), Constr$ReactTemplate.mkCase(/* tuple */[
                        ci,
                        my_it_mkLambda_or_LetIn_name(Termops$ReactTemplate.lift_rel_context(mip[/* mind_nrealargs */5] + 3 | 0)(realsign), Constr$ReactTemplate.mkLambda(/* tuple */[
                                  /* Anonymous */0,
                                  Term$ReactTemplate.applist(/* tuple */[
                                        Constr$ReactTemplate.mkIndU(indu),
                                        Util$ReactTemplate.$at(Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, (mip[/* mind_nrealdecls */6] << 1) + 3 | 0, paramsctxt), Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, 0, realsign))
                                      ]),
                                  Constr$ReactTemplate.mkApp(/* tuple */[
                                        eq,
                                        /* array */[
                                          Constr$ReactTemplate.mkVar(varB),
                                          Constr$ReactTemplate.mkApp(/* tuple */[
                                                Constr$ReactTemplate.mkVar(varf),
                                                /* array */[Vars$ReactTemplate.lift((mip[/* mind_nrealdecls */6] << 1) + 4 | 0)(b)]
                                              ]),
                                          Constr$ReactTemplate.mkApp(/* tuple */[
                                                Constr$ReactTemplate.mkVar(varf),
                                                /* array */[Constr$ReactTemplate.mkRel((mip[/* mind_nrealargs */5] - 1 | 0) + 2 | 0)]
                                              ])
                                        ]
                                      ])
                                ])),
                        Constr$ReactTemplate.mkVar(varH),
                        /* array */[Constr$ReactTemplate.mkApp(/* tuple */[
                                param[1],
                                /* array */[
                                  Constr$ReactTemplate.mkVar(varB),
                                  Constr$ReactTemplate.mkApp(/* tuple */[
                                        Constr$ReactTemplate.mkVar(varf),
                                        /* array */[Vars$ReactTemplate.lift(mip[/* mind_nrealargs */5] + 3 | 0)(b)]
                                      ])
                                ]
                              ])]
                      ])))));
  var c$1 = Curry._1(Termops$ReactTemplate.it_mkLambda_or_LetIn(c), paramsctxt);
  return /* tuple */[
          c$1,
          UState$ReactTemplate.of_context_set(ctx$1)
        ];
}

var congr_scheme_kind = Ind_tables$ReactTemplate.declare_individual_scheme_object("_congr", /* None */0, (function (_, ind) {
        return /* tuple */[
                build_congr(Global$ReactTemplate.env(/* () */0), get_coq_eq(Univ$ReactTemplate.ContextSet[/* empty */0]), ind),
                Safe_typing$ReactTemplate.empty_private_constants
              ];
      }));

exports.rew_l2r_dep_scheme_kind = rew_l2r_dep_scheme_kind;
exports.rew_l2r_scheme_kind = rew_l2r_scheme_kind;
exports.rew_r2l_forward_dep_scheme_kind = rew_r2l_forward_dep_scheme_kind;
exports.rew_l2r_forward_dep_scheme_kind = rew_l2r_forward_dep_scheme_kind;
exports.rew_r2l_dep_scheme_kind = rew_r2l_dep_scheme_kind;
exports.rew_r2l_scheme_kind = rew_r2l_scheme_kind;
exports.build_r2l_rew_scheme = build_r2l_rew_scheme;
exports.build_l2r_rew_scheme = build_l2r_rew_scheme;
exports.build_r2l_forward_rew_scheme = build_r2l_forward_rew_scheme;
exports.build_l2r_forward_rew_scheme = build_l2r_forward_rew_scheme;
exports.build_sym_scheme = build_sym_scheme;
exports.sym_scheme_kind = sym_scheme_kind;
exports.build_sym_involutive_scheme = build_sym_involutive_scheme;
exports.sym_involutive_scheme_kind = sym_involutive_scheme_kind;
exports.congr_scheme_kind = congr_scheme_kind;
exports.build_congr = build_congr;
/* hid Not a pure module */
