// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Evd$ReactTemplate = require("./evd.bs.js");
var Int$ReactTemplate = require("./int.bs.js");
var Loc$ReactTemplate = require("./loc.bs.js");
var Evar$ReactTemplate = require("./evar.bs.js");
var Hook$ReactTemplate = require("./hook.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Sorts$ReactTemplate = require("./sorts.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Coqlib$ReactTemplate = require("../library/coqlib.bs.js");
var Global$ReactTemplate = require("./global.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var EConstr$ReactTemplate = require("./eConstr.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Nameops$ReactTemplate = require("./nameops.bs.js");
var Termops$ReactTemplate = require("./termops.bs.js");
var CClosure$ReactTemplate = require("./cClosure.bs.js");
var CProfile$ReactTemplate = require("../shims/cProfile.bs.js");
var Evarutil$ReactTemplate = require("./evarutil.bs.js");
var Feedback$ReactTemplate = require("./feedback.bs.js");
var Goptions$ReactTemplate = require("./goptions.bs.js");
var Retyping$ReactTemplate = require("./retyping.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Evarsolve$ReactTemplate = require("./evarsolve.bs.js");
var Recordops$ReactTemplate = require("./recordops.bs.js");
var Reduction$ReactTemplate = require("./reduction.bs.js");
var Universes$ReactTemplate = require("./universes.bs.js");
var Evardefine$ReactTemplate = require("./evardefine.bs.js");
var Conv_oracle$ReactTemplate = require("./conv_oracle.bs.js");
var Inductiveops$ReactTemplate = require("./inductiveops.bs.js");
var Reductionops$ReactTemplate = require("./reductionops.bs.js");
var Pretype_errors$ReactTemplate = require("./pretype_errors.bs.js");

var debug_unification = [/* false */0];

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"Print states sent to Evarconv unification",
      /* optkey : :: */[
        "Debug",
        /* :: */[
          "Unification",
          /* [] */0
        ]
      ],
      /* optread */(function () {
          return debug_unification[0];
        }),
      /* optwrite */(function (a) {
          debug_unification[0] = a;
          return /* () */0;
        })
    ]);

function impossible_default_case() {
  var match = Universes$ReactTemplate.fresh_global_instance(/* None */0, Global$ReactTemplate.env(/* () */0), /* ConstRef */Block.__(1, [Coqlib$ReactTemplate.id]));
  var c = match[0];
  var match$1 = Constr$ReactTemplate.destConst(c);
  return /* Some */[/* tuple */[
            c,
            Constr$ReactTemplate.mkConstU(/* tuple */[
                  Coqlib$ReactTemplate.type_of_id,
                  match$1[1]
                ]),
            match[1]
          ]];
}

function make_judge(c, t) {
  return Environ$ReactTemplate.make_judge(EConstr$ReactTemplate.of_constr(c), EConstr$ReactTemplate.of_constr(t));
}

var na1 = /* Name */[Names$ReactTemplate.Id[/* of_string */5]("A")];

var na2 = /* Name */[Names$ReactTemplate.Id[/* of_string */5]("H")];

function coq_unit_judge() {
  var match = impossible_default_case(/* () */0);
  if (match) {
    var match$1 = match[0];
    return /* tuple */[
            make_judge(match$1[0], match$1[1]),
            match$1[2]
          ];
  } else {
    return /* tuple */[
            Environ$ReactTemplate.make_judge(EConstr$ReactTemplate.mkLambda(/* tuple */[
                      na1,
                      EConstr$ReactTemplate.mkProp,
                      EConstr$ReactTemplate.mkLambda(/* tuple */[
                            na2,
                            EConstr$ReactTemplate.mkRel(1),
                            EConstr$ReactTemplate.mkRel(1)
                          ])
                    ]), EConstr$ReactTemplate.mkProd(/* tuple */[
                      na1,
                      EConstr$ReactTemplate.mkProp,
                      EConstr$ReactTemplate.mkArrow(EConstr$ReactTemplate.mkRel(1), EConstr$ReactTemplate.mkRel(2))
                    ])),
            Univ$ReactTemplate.ContextSet[/* empty */0]
          ];
  }
}

function eval_flexible_term(ts, env, evd, c) {
  var match = EConstr$ReactTemplate.kind(evd, c);
  switch (match.tag | 0) {
    case 0 : 
        var n = match[0];
        try {
          var match$1 = EConstr$ReactTemplate.lookup_rel(n, env);
          if (match$1.tag) {
            return /* Some */[EConstr$ReactTemplate.Vars[/* lift */0](n, match$1[1])];
          } else {
            return /* None */0;
          }
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            return /* None */0;
          } else {
            throw exn;
          }
        }
        break;
    case 1 : 
        var id = match[0];
        try {
          if (CClosure$ReactTemplate.is_transparent_variable(ts, id)) {
            return Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_value */1], EConstr$ReactTemplate.lookup_named(id, env));
          } else {
            return /* None */0;
          }
        }
        catch (exn$1){
          if (exn$1 === Caml_builtin_exceptions.not_found) {
            return /* None */0;
          } else {
            throw exn$1;
          }
        }
        break;
    case 7 : 
        return /* Some */[c];
    case 8 : 
        return /* Some */[EConstr$ReactTemplate.Vars[/* subst1 */4](match[1], match[3])];
    case 10 : 
        var match$2 = match[0];
        var c$1 = match$2[0];
        if (CClosure$ReactTemplate.is_transparent_constant(ts, c$1)) {
          return Option$ReactTemplate.map(EConstr$ReactTemplate.of_constr, Environ$ReactTemplate.constant_opt_value_in(env, /* tuple */[
                          c$1,
                          EConstr$ReactTemplate.EInstance[/* kind */1](evd, match$2[1])
                        ]));
        } else {
          return /* None */0;
        }
    case 16 : 
        var p = match[0];
        if (Names$ReactTemplate.Projection[/* unfolded */3](p)) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                [
                  "evarconv.ml",
                  97,
                  34
                ]
              ];
        } else {
          var ts$1 = ts;
          var p$1 = p;
          var c$2 = match[1];
          var cst = Names$ReactTemplate.Projection[/* constant */2](p$1);
          if (CClosure$ReactTemplate.is_transparent_constant(ts$1, cst)) {
            return /* Some */[EConstr$ReactTemplate.mkProj(/* tuple */[
                          Names$ReactTemplate.Projection[/* make */0](cst, /* true */1),
                          c$2
                        ])];
          } else {
            return /* None */0;
          }
        }
        break;
    default:
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "evarconv.ml",
              99,
              9
            ]
          ];
  }
}

function flex_kind_of_term(ts, env, evd, c, sk) {
  var match = EConstr$ReactTemplate.kind(evd, c);
  var exit = 0;
  switch (match.tag | 0) {
    case 3 : 
        return /* Flexible */Block.__(1, [match[0]]);
    case 7 : 
        if (Option$ReactTemplate.is_empty(Reductionops$ReactTemplate.Stack[/* decomp */5](sk))) {
          return /* Rigid */0;
        } else {
          return /* MaybeFlexible */Block.__(0, [c]);
        }
    case 5 : 
    case 9 : 
    case 13 : 
        exit = 1;
        break;
    case 2 : 
    case 4 : 
    case 6 : 
    case 11 : 
    case 12 : 
    case 14 : 
    case 15 : 
        return /* Rigid */0;
    default:
      return Option$ReactTemplate.cata((function (x) {
                    return /* MaybeFlexible */Block.__(0, [x]);
                  }), /* Rigid */0, eval_flexible_term(ts, env, evd, c));
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "evarconv.ml",
            115,
            33
          ]
        ];
  }
  
}

function add_conv_pb(param, sigma) {
  return Evd$ReactTemplate.add_conv_pb(/* None */0, /* tuple */[
              param[0],
              param[1],
              EConstr$ReactTemplate.Unsafe[/* to_constr */0](param[2]),
              EConstr$ReactTemplate.Unsafe[/* to_constr */0](param[3])
            ], sigma);
}

function apprec_nohdbeta(ts, env, evd, c) {
  var appr = Reductionops$ReactTemplate.whd_nored_state(evd)(/* tuple */[
        c,
        /* [] */0
      ]);
  if (Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](appr[1])) {
    return Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts, env, evd, Reductionops$ReactTemplate.Cst_stack[/* empty */0], appr)[0]);
  } else {
    return c;
  }
}

function position_problem(l2r, param) {
  if (param !== 0) {
    return /* Some */[l2r];
  } else {
    return /* None */0;
  }
}

function occur_rigidly(ev, evd, t) {
  var evk = ev[0];
  var aux = function (_t) {
    while(true) {
      var t = _t;
      var match = EConstr$ReactTemplate.kind(evd, t);
      switch (match.tag | 0) {
        case 3 : 
            if (Evar$ReactTemplate.equal(evk, match[0][0])) {
              throw Termops$ReactTemplate.Occur;
            } else {
              return /* false */0;
            }
            break;
        case 5 : 
            _t = match[0];
            continue ;
            case 6 : 
            aux(match[1]) || aux(match[2]);
            return /* true */1;
        case 9 : 
            if (aux(match[0])) {
              return Util$ReactTemplate.$$Array[/* exists */24](aux, match[1]);
            } else {
              return /* false */0;
            }
        case 0 : 
        case 1 : 
        case 7 : 
        case 8 : 
        case 10 : 
            return /* false */0;
        case 13 : 
            if (EConstr$ReactTemplate.eq_constr(evd, EConstr$ReactTemplate.mkEvar(ev), match[2])) {
              throw Termops$ReactTemplate.Occur;
            } else {
              return /* false */0;
            }
            break;
        case 16 : 
            return 1 - aux(match[1]);
        default:
          return /* true */1;
      }
    };
  };
  try {
    aux(t);
    return /* false */0;
  }
  catch (exn){
    if (exn === Termops$ReactTemplate.Occur) {
      return /* true */1;
    } else {
      throw exn;
    }
  }
}

function check_conv_record(env, sigma, param, param$1) {
  var sk2 = param$1[1];
  var t2 = param$1[0];
  var sk1 = param[1];
  var match = Termops$ReactTemplate.global_app_of_constr(sigma, param[0]);
  var arg = match[1];
  var proji = match[0][0];
  var match$1;
  try {
    var match$2 = EConstr$ReactTemplate.kind(sigma, t2);
    switch (match$2.tag | 0) {
      case 4 : 
          var s = EConstr$ReactTemplate.ESorts[/* kind */1](sigma, match$2[0]);
          match$1 = /* tuple */[
            Recordops$ReactTemplate.lookup_canonical_conversion(/* tuple */[
                  proji,
                  /* Sort_cs */Block.__(1, [Sorts$ReactTemplate.family(s)])
                ]),
            /* [] */0
          ];
          break;
      case 6 : 
          var match$3 = EConstr$ReactTemplate.destProd(sigma, t2);
          var b = match$3[2];
          if (EConstr$ReactTemplate.Vars[/* noccurn */12](sigma, 1, b)) {
            match$1 = /* tuple */[
              Recordops$ReactTemplate.lookup_canonical_conversion(/* tuple */[
                    proji,
                    /* Prod_cs */0
                  ]),
              Reductionops$ReactTemplate.Stack[/* append_app */4](/* array */[
                    match$3[1],
                    Termops$ReactTemplate.pop(b)
                  ], Reductionops$ReactTemplate.Stack[/* empty */2])
            ];
          } else {
            throw Caml_builtin_exceptions.not_found;
          }
          break;
      case 16 : 
          var p = match$2[0];
          var c2 = /* ConstRef */Block.__(1, [Names$ReactTemplate.Projection[/* constant */2](p)]);
          var c = Retyping$ReactTemplate.expand_projection(env, sigma, p, match$2[1], /* [] */0);
          var match$4 = EConstr$ReactTemplate.destApp(sigma, c);
          var sk2$1 = Reductionops$ReactTemplate.Stack[/* append_app */4](match$4[1], sk2);
          match$1 = /* tuple */[
            Recordops$ReactTemplate.lookup_canonical_conversion(/* tuple */[
                  proji,
                  /* Const_cs */Block.__(0, [c2])
                ]),
            sk2$1
          ];
          break;
      default:
        var match$5 = Termops$ReactTemplate.global_of_constr(sigma, t2);
        match$1 = /* tuple */[
          Recordops$ReactTemplate.lookup_canonical_conversion(/* tuple */[
                proji,
                /* Const_cs */Block.__(0, [match$5[0]])
              ]),
          sk2
        ];
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      var match$6 = Recordops$ReactTemplate.lookup_canonical_conversion(/* tuple */[
            proji,
            /* Default_cs */1
          ]);
      match$1 = /* tuple */[
        /* tuple */[
          match$6[0],
          match$6[1]
        ],
        /* [] */0
      ];
    } else {
      throw exn;
    }
  }
  var canon_s = match$1[0];
  var match$7 = canon_s[1];
  var sk2_effective = match$1[1];
  var us = Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.of_constr, match$7[/* o_TCOMPS */6]);
  var params = Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.of_constr, match$7[/* o_TPARAMS */4]);
  var match$8;
  if (arg) {
    var c$1 = arg[0];
    var ty = Retyping$ReactTemplate.get_type_of(/* None */0, /* Some */[/* true */1], env, sigma, c$1);
    var match$9;
    try {
      match$9 = Inductiveops$ReactTemplate.find_mrectype(env, sigma, ty);
    }
    catch (exn$1){
      throw Caml_builtin_exceptions.not_found;
    }
    match$8 = /* tuple */[
      Reductionops$ReactTemplate.Stack[/* append_app_list */11](match$9[1], Reductionops$ReactTemplate.Stack[/* empty */2]),
      c$1,
      sk1
    ];
  } else {
    var match$10 = Reductionops$ReactTemplate.Stack[/* strip_n_app */13](match$7[/* o_NPARAMS */5], sk1);
    if (match$10) {
      var match$11 = match$10[0];
      match$8 = /* tuple */[
        match$11[0],
        match$11[1],
        match$11[2]
      ];
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  }
  var l_us = Curry._1(Util$ReactTemplate.List[/* length */0], us);
  var match$12;
  if (l_us) {
    var match$13 = Reductionops$ReactTemplate.Stack[/* strip_n_app */13](l_us - 1 | 0, sk2_effective);
    if (match$13) {
      var match$14 = match$13[0];
      match$12 = /* tuple */[
        Util$ReactTemplate.$at(match$14[0], Reductionops$ReactTemplate.Stack[/* append_app */4](/* array */[match$14[1]], Reductionops$ReactTemplate.Stack[/* empty */2])),
        match$14[2]
      ];
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  } else {
    match$12 = /* tuple */[
      Reductionops$ReactTemplate.Stack[/* empty */2],
      sk2_effective
    ];
  }
  var match$15 = Universes$ReactTemplate.fresh_instance_from(match$7[/* o_CTX */1], /* None */0);
  var subst = Univ$ReactTemplate.make_inverse_instance_subst(match$15[0]);
  var c$2 = EConstr$ReactTemplate.of_constr(match$7[/* o_DEF */0]);
  var c$prime = EConstr$ReactTemplate.Vars[/* subst_univs_level_constr */16](subst, c$2);
  var t$prime = EConstr$ReactTemplate.of_constr(canon_s[0]);
  var t$prime$1 = EConstr$ReactTemplate.Vars[/* subst_univs_level_constr */16](subst, t$prime);
  var partial_arg = EConstr$ReactTemplate.Vars[/* subst_univs_level_constr */16];
  var partial_arg$1 = function (param) {
    return partial_arg(subst, param);
  };
  var bs$prime = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          return Util$ReactTemplate.$percent$great(EConstr$ReactTemplate.of_constr, partial_arg$1, param);
        }), match$7[/* o_TABS */3]);
  var params$1 = Curry._2(Util$ReactTemplate.List[/* map */10], (function (c) {
          return EConstr$ReactTemplate.Vars[/* subst_univs_level_constr */16](subst, c);
        }), params);
  var us$1 = Curry._2(Util$ReactTemplate.List[/* map */10], (function (c) {
          return EConstr$ReactTemplate.Vars[/* subst_univs_level_constr */16](subst, c);
        }), us);
  var match$16 = Termops$ReactTemplate.decompose_app_vect(sigma, t$prime$1);
  return /* tuple */[
          match$15[1],
          /* tuple */[
            match$16[0],
            t2
          ],
          c$prime,
          bs$prime,
          /* tuple */[
            Reductionops$ReactTemplate.Stack[/* append_app_list */11](params$1, Reductionops$ReactTemplate.Stack[/* empty */2]),
            match$8[0]
          ],
          /* tuple */[
            Reductionops$ReactTemplate.Stack[/* append_app_list */11](us$1, Reductionops$ReactTemplate.Stack[/* empty */2]),
            match$12[0]
          ],
          /* tuple */[
            match$8[2],
            match$12[1]
          ],
          match$8[1],
          /* tuple */[
            match$7[/* o_INJ */2],
            Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, sigma, /* tuple */[
                  t2,
                  sk2
                ])
          ]
        ];
}

function ise_try(evd, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var l = param[1];
      var f = param[0];
      if (l) {
        var x = Curry._1(f, evd);
        if (x.tag) {
          _param = l;
          continue ;
          
        } else {
          return x;
        }
      } else {
        return Curry._1(f, evd);
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "evarconv.ml",
              234,
              10
            ]
          ];
    }
  };
}

function ise_and(evd, l) {
  var _i = evd;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (param) {
      var l$1 = param[1];
      var f = param[0];
      if (l$1) {
        var x = Curry._1(f, i);
        if (x.tag) {
          return x;
        } else {
          _param = l$1;
          _i = x[0];
          continue ;
          
        }
      } else {
        return Curry._1(f, i);
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "evarconv.ml",
              243,
              12
            ]
          ];
    }
  };
}

function ise_array2(evd, f, v1, v2) {
  var lv1 = v1.length;
  if (lv1 === v2.length) {
    var _i = evd;
    var _n = lv1 - 1 | 0;
    while(true) {
      var n = _n;
      var i = _i;
      if (n !== -1) {
        var x = Curry._3(f, i, Caml_array.caml_array_get(v1, n), Caml_array.caml_array_get(v2, n));
        if (x.tag) {
          return x;
        } else {
          _n = n - 1 | 0;
          _i = x[0];
          continue ;
          
        }
      } else {
        return /* Success */Block.__(0, [i]);
      }
    };
  } else {
    return /* UnifFailure */Block.__(1, [
              evd,
              /* NotSameArgSize */0
            ]);
  }
}

function ise_app_stack2(env, f, evd, sk1, sk2) {
  var exit = 0;
  if (sk1) {
    var match = sk1[0];
    if (match.tag) {
      exit = 1;
    } else if (sk2) {
      var match$1 = sk2[0];
      if (match$1.tag) {
        exit = 1;
      } else {
        var match$2 = Reductionops$ReactTemplate.Stack[/* decomp_node_last */6](match[0], sk1[1]);
        var match$3 = Reductionops$ReactTemplate.Stack[/* decomp_node_last */6](match$1[0], sk2[1]);
        var x = ise_app_stack2(env, f, evd, match$2[1], match$3[1]);
        var match$4 = x[1];
        if (match$4.tag) {
          return x;
        } else {
          return /* tuple */[
                  x[0],
                  Curry._5(f, env, match$4[0], /* CONV */0, match$2[0], match$3[0])
                ];
        }
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return /* tuple */[
            /* tuple */[
              sk1,
              sk2
            ],
            /* Success */Block.__(0, [evd])
          ];
  }
  
}

function ise_stack2(no_app, env, evd, f, sk1, sk2) {
  var ise_stack2$1 = function (_deep, _i, _sk1, _sk2) {
    while(true) {
      var sk2 = _sk2;
      var sk1 = _sk1;
      var i = _i;
      var deep = _deep;
      var fail = (function(deep,i,sk1,sk2){
      return function fail(x) {
        if (deep) {
          return /* tuple */[
                  /* Some */[/* tuple */[
                      Curry._1(Util$ReactTemplate.List[/* rev */4], sk1),
                      Curry._1(Util$ReactTemplate.List[/* rev */4], sk2)
                    ]],
                  /* Success */Block.__(0, [i])
                ];
        } else {
          return /* tuple */[
                  /* None */0,
                  x
                ];
        }
      }
      }(deep,i,sk1,sk2));
      if (sk1) {
        var match = sk1[0];
        switch (match.tag | 0) {
          case 0 : 
              if (sk2) {
                if (sk2[0].tag) {
                  return fail(/* UnifFailure */Block.__(1, [
                                i,
                                /* NotSameHead */1
                              ]));
                } else if (no_app && deep) {
                  return fail(/* UnifFailure */Block.__(1, [
                                i,
                                /* NotSameHead */1
                              ]));
                } else {
                  var match$1 = ise_app_stack2(env, f, i, sk1, sk2);
                  var x = match$1[1];
                  var match$2 = match$1[0];
                  if (x.tag) {
                    return fail(x);
                  } else {
                    _sk2 = match$2[1];
                    _sk1 = match$2[0];
                    _i = x[0];
                    _deep = /* true */1;
                    continue ;
                    
                  }
                }
              } else {
                return fail(/* UnifFailure */Block.__(1, [
                              i,
                              /* NotSameHead */1
                            ]));
              }
              break;
          case 1 : 
              if (sk2) {
                var match$3 = sk2[0];
                if (match$3.tag === 1) {
                  var x$1 = Curry._5(f, env, i, /* CONV */0, match[1], match$3[1]);
                  if (x$1.tag) {
                    return fail(x$1);
                  } else {
                    var x$2 = ise_array2(x$1[0], (function (ii) {
                            return Curry._3(f, env, ii, /* CONV */0);
                          }), match[2], match$3[2]);
                    if (x$2.tag) {
                      return fail(x$2);
                    } else {
                      _sk2 = sk2[1];
                      _sk1 = sk1[1];
                      _i = x$2[0];
                      _deep = /* true */1;
                      continue ;
                      
                    }
                  }
                } else {
                  return fail(/* UnifFailure */Block.__(1, [
                                i,
                                /* NotSameHead */1
                              ]));
                }
              } else {
                return fail(/* UnifFailure */Block.__(1, [
                              i,
                              /* NotSameHead */1
                            ]));
              }
              break;
          case 2 : 
              if (sk2) {
                var match$4 = sk2[0];
                if (match$4.tag === 2) {
                  if (Names$ReactTemplate.Constant[/* equal */12](Names$ReactTemplate.Projection[/* constant */2](match[2]), Names$ReactTemplate.Projection[/* constant */2](match$4[2]))) {
                    _sk2 = sk2[1];
                    _sk1 = sk1[1];
                    _deep = /* true */1;
                    continue ;
                    
                  } else {
                    return fail(/* UnifFailure */Block.__(1, [
                                  i,
                                  /* NotSameHead */1
                                ]));
                  }
                } else {
                  return fail(/* UnifFailure */Block.__(1, [
                                i,
                                /* NotSameHead */1
                              ]));
                }
              } else {
                return fail(/* UnifFailure */Block.__(1, [
                              i,
                              /* NotSameHead */1
                            ]));
              }
              break;
          case 3 : 
              if (sk2) {
                var match$5 = sk2[0];
                if (match$5.tag === 3) {
                  var a2 = match$5[1];
                  var match$6 = match$5[0];
                  var match$7 = match$6[1];
                  var bds2 = match$7[2];
                  var tys2 = match$7[1];
                  var match$8 = match$6[0];
                  var a1 = match[1];
                  var match$9 = match[0];
                  var recdef1 = match$9[1];
                  var bds1 = recdef1[2];
                  var tys1 = recdef1[1];
                  var match$10 = match$9[0];
                  if (match$10[1] === match$8[1] && Util$ReactTemplate.$$Array[/* equal */21]((function (prim, prim$1) {
                            return +(prim === prim$1);
                          }), match$10[0], match$8[0])) {
                    var x$3 = ise_and(i, /* :: */[
                          (function(tys1,tys2){
                          return function (i) {
                            return ise_array2(i, (function (ii) {
                                          return Curry._3(f, env, ii, /* CONV */0);
                                        }), tys1, tys2);
                          }
                          }(tys1,tys2)),
                          /* :: */[
                            (function(bds1,recdef1,bds2){
                            return function (i) {
                              return ise_array2(i, (function (ii) {
                                            return Curry._3(f, EConstr$ReactTemplate.push_rec_types(recdef1, env), ii, /* CONV */0);
                                          }), bds1, bds2);
                            }
                            }(bds1,recdef1,bds2)),
                            /* :: */[
                              (function(a1,a2){
                              return function (i) {
                                var ise = function (param, param$1) {
                                  return ise_stack2$1(/* false */0, i, param, param$1);
                                };
                                var x1 = a1;
                                var x2 = a2;
                                var match = Curry._2(ise, x1, x2);
                                if (match[0]) {
                                  var match$1 = match[1];
                                  if (match$1.tag) {
                                    return match[1];
                                  } else {
                                    return /* UnifFailure */Block.__(1, [
                                              match$1[0],
                                              /* NotSameArgSize */0
                                            ]);
                                  }
                                } else {
                                  return match[1];
                                }
                              }
                              }(a1,a2)),
                              /* [] */0
                            ]
                          ]
                        ]);
                    if (x$3.tag) {
                      return fail(x$3);
                    } else {
                      _sk2 = sk2[1];
                      _sk1 = sk1[1];
                      _i = x$3[0];
                      _deep = /* true */1;
                      continue ;
                      
                    }
                  } else {
                    return fail(/* UnifFailure */Block.__(1, [
                                  i,
                                  /* NotSameHead */1
                                ]));
                  }
                } else {
                  return fail(/* UnifFailure */Block.__(1, [
                                i,
                                /* NotSameHead */1
                              ]));
                }
              } else {
                return fail(/* UnifFailure */Block.__(1, [
                              i,
                              /* NotSameHead */1
                            ]));
              }
              break;
          case 4 : 
              return fail(/* UnifFailure */Block.__(1, [
                            i,
                            /* NotSameHead */1
                          ]));
          
        }
      } else if (sk2) {
        return fail(/* UnifFailure */Block.__(1, [
                      i,
                      /* NotSameHead */1
                    ]));
      } else {
        return /* tuple */[
                /* None */0,
                /* Success */Block.__(0, [i])
              ];
      }
    };
  };
  return ise_stack2$1(/* false */0, evd, Curry._1(Util$ReactTemplate.List[/* rev */4], sk1), Curry._1(Util$ReactTemplate.List[/* rev */4], sk2));
}

function exact_ise_stack2(env, evd, f, sk1, sk2) {
  var ise_stack2 = function (_i, _sk1, _sk2) {
    while(true) {
      var sk2 = _sk2;
      var sk1 = _sk1;
      var i = _i;
      if (sk1) {
        var match = sk1[0];
        switch (match.tag | 0) {
          case 0 : 
              if (sk2) {
                if (sk2[0].tag) {
                  return /* UnifFailure */Block.__(1, [
                            i,
                            /* NotSameHead */1
                          ]);
                } else {
                  var match$1 = ise_app_stack2(env, f, i, sk1, sk2);
                  var x = match$1[1];
                  var match$2 = match$1[0];
                  if (x.tag) {
                    return x;
                  } else {
                    _sk2 = match$2[1];
                    _sk1 = match$2[0];
                    _i = x[0];
                    continue ;
                    
                  }
                }
              } else {
                return /* UnifFailure */Block.__(1, [
                          i,
                          /* NotSameHead */1
                        ]);
              }
              break;
          case 1 : 
              if (sk2) {
                var match$3 = sk2[0];
                if (match$3.tag === 1) {
                  var q2 = sk2[1];
                  var c2 = match$3[2];
                  var t2 = match$3[1];
                  var q1 = sk1[1];
                  var c1 = match[2];
                  var t1 = match[1];
                  return ise_and(i, /* :: */[
                              (function(q1,q2){
                              return function (i) {
                                return ise_stack2(i, q1, q2);
                              }
                              }(q1,q2)),
                              /* :: */[
                                (function(c1,c2){
                                return function (i) {
                                  return ise_array2(i, (function (ii) {
                                                return Curry._3(f, env, ii, /* CONV */0);
                                              }), c1, c2);
                                }
                                }(c1,c2)),
                                /* :: */[
                                  (function(t1,t2){
                                  return function (i) {
                                    return Curry._5(f, env, i, /* CONV */0, t1, t2);
                                  }
                                  }(t1,t2)),
                                  /* [] */0
                                ]
                              ]
                            ]);
                } else {
                  return /* UnifFailure */Block.__(1, [
                            i,
                            /* NotSameHead */1
                          ]);
                }
              } else {
                return /* UnifFailure */Block.__(1, [
                          i,
                          /* NotSameHead */1
                        ]);
              }
              break;
          case 2 : 
              if (sk2) {
                var match$4 = sk2[0];
                if (match$4.tag === 2) {
                  if (Names$ReactTemplate.Constant[/* equal */12](Names$ReactTemplate.Projection[/* constant */2](match[2]), Names$ReactTemplate.Projection[/* constant */2](match$4[2]))) {
                    _sk2 = sk2[1];
                    _sk1 = sk1[1];
                    continue ;
                    
                  } else {
                    return /* UnifFailure */Block.__(1, [
                              i,
                              /* NotSameHead */1
                            ]);
                  }
                } else {
                  return /* UnifFailure */Block.__(1, [
                            i,
                            /* NotSameHead */1
                          ]);
                }
              } else {
                return /* UnifFailure */Block.__(1, [
                          i,
                          /* NotSameHead */1
                        ]);
              }
              break;
          case 3 : 
              if (sk2) {
                var match$5 = sk2[0];
                if (match$5.tag === 3) {
                  var q2$1 = sk2[1];
                  var a2 = match$5[1];
                  var match$6 = match$5[0];
                  var match$7 = match$6[1];
                  var bds2 = match$7[2];
                  var tys2 = match$7[1];
                  var match$8 = match$6[0];
                  var q1$1 = sk1[1];
                  var a1 = match[1];
                  var match$9 = match[0];
                  var recdef1 = match$9[1];
                  var bds1 = recdef1[2];
                  var tys1 = recdef1[1];
                  var match$10 = match$9[0];
                  if (match$10[1] === match$8[1] && Util$ReactTemplate.$$Array[/* equal */21]((function (prim, prim$1) {
                            return +(prim === prim$1);
                          }), match$10[0], match$8[0])) {
                    return ise_and(i, /* :: */[
                                (function(q1$1,q2$1){
                                return function (i) {
                                  return ise_stack2(i, q1$1, q2$1);
                                }
                                }(q1$1,q2$1)),
                                /* :: */[
                                  (function(tys1,tys2){
                                  return function (i) {
                                    return ise_array2(i, (function (ii) {
                                                  return Curry._3(f, env, ii, /* CONV */0);
                                                }), tys1, tys2);
                                  }
                                  }(tys1,tys2)),
                                  /* :: */[
                                    (function(bds1,recdef1,bds2){
                                    return function (i) {
                                      return ise_array2(i, (function (ii) {
                                                    return Curry._3(f, EConstr$ReactTemplate.push_rec_types(recdef1, env), ii, /* CONV */0);
                                                  }), bds1, bds2);
                                    }
                                    }(bds1,recdef1,bds2)),
                                    /* :: */[
                                      (function(a1,a2){
                                      return function (i) {
                                        return ise_stack2(i, a1, a2);
                                      }
                                      }(a1,a2)),
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]);
                  } else {
                    return /* UnifFailure */Block.__(1, [
                              i,
                              /* NotSameHead */1
                            ]);
                  }
                } else {
                  return /* UnifFailure */Block.__(1, [
                            i,
                            /* NotSameHead */1
                          ]);
                }
              } else {
                return /* UnifFailure */Block.__(1, [
                          i,
                          /* NotSameHead */1
                        ]);
              }
              break;
          case 4 : 
              return /* UnifFailure */Block.__(1, [
                        i,
                        /* NotSameHead */1
                      ]);
          
        }
      } else if (sk2) {
        return /* UnifFailure */Block.__(1, [
                  i,
                  /* NotSameHead */1
                ]);
      } else {
        return /* Success */Block.__(0, [i]);
      }
    };
  };
  if (Reductionops$ReactTemplate.Stack[/* compare_shape */7](sk1, sk2)) {
    return ise_stack2(evd, Curry._1(Util$ReactTemplate.List[/* rev */4], sk1), Curry._1(Util$ReactTemplate.List[/* rev */4], sk2));
  } else {
    return /* UnifFailure */Block.__(1, [
              evd,
              /* NotSameHead */1
            ]);
  }
}

function evar_conv_x(ts, env, evd, pbty, term1, term2) {
  var term1$1 = Evarutil$ReactTemplate.whd_head_evar(evd, term1);
  var term2$1 = Evarutil$ReactTemplate.whd_head_evar(evd, term2);
  var ground_test;
  if (Evarutil$ReactTemplate.is_ground_term(evd, term1$1) && Evarutil$ReactTemplate.is_ground_term(evd, term2$1)) {
    var e;
    try {
      var match = Reductionops$ReactTemplate.infer_conv(/* Some */[/* false */0], /* Some */[pbty], /* Some */[ts[0]], env, evd, term1$1, term2$1);
      var evd$1 = match[0];
      e = match[1] ? /* Success */Block.__(0, [evd$1]) : /* UnifFailure */Block.__(1, [
            evd$1,
            /* ConversionFailed */Block.__(2, [
                env,
                term1$1,
                term2$1
              ])
          ]);
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Univ$ReactTemplate.UniverseInconsistency) {
        e = /* UnifFailure */Block.__(1, [
            evd,
            /* UnifUnivInconsistency */Block.__(5, [exn[1]])
          ]);
      } else {
        throw exn;
      }
    }
    ground_test = e.tag ? (
        Evarutil$ReactTemplate.is_ground_env(e[0], env) ? /* Some */[e] : /* None */0
      ) : /* Some */[e];
  } else {
    ground_test = /* None */0;
  }
  if (ground_test) {
    return ground_test[0];
  } else {
    var term1$2 = apprec_nohdbeta(ts[0], env, evd, term1$1);
    var term2$2 = apprec_nohdbeta(ts[0], env, evd, term2$1);
    var $$default = function () {
      return evar_eqappr_x(/* None */0, ts, env, evd, pbty, /* tuple */[
                  Reductionops$ReactTemplate.whd_nored_state(evd)(/* tuple */[
                        term1$2,
                        Reductionops$ReactTemplate.Stack[/* empty */2]
                      ]),
                  Reductionops$ReactTemplate.Cst_stack[/* empty */0]
                ], /* tuple */[
                  Reductionops$ReactTemplate.whd_nored_state(evd)(/* tuple */[
                        term2$2,
                        Reductionops$ReactTemplate.Stack[/* empty */2]
                      ]),
                  Reductionops$ReactTemplate.Cst_stack[/* empty */0]
                ]);
    };
    var match$1 = EConstr$ReactTemplate.kind(evd, term1$2);
    var match$2 = EConstr$ReactTemplate.kind(evd, term2$2);
    var exit = 0;
    if (match$1.tag === 3) {
      var ev = match$1[0];
      if (Evd$ReactTemplate.is_undefined(evd, ev[0])) {
        var x = Evarsolve$ReactTemplate.solve_simple_eqn((function (param, param$1, param$2, param$3, param$4) {
                return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
              }), /* None */0, env, evd, /* tuple */[
              position_problem(/* true */1, pbty),
              ev,
              term2$2
            ]);
        if (x.tag) {
          var tmp = x[1];
          if (typeof tmp === "number" || tmp.tag) {
            return x;
          } else {
            return $$default(/* () */0);
          }
        } else {
          return x;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (match$2.tag === 3) {
        var ev$1 = match$2[0];
        if (Evd$ReactTemplate.is_undefined(evd, ev$1[0])) {
          var x$1 = Evarsolve$ReactTemplate.solve_simple_eqn((function (param, param$1, param$2, param$3, param$4) {
                  return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                }), /* None */0, env, evd, /* tuple */[
                position_problem(/* false */0, pbty),
                ev$1,
                term1$2
              ]);
          if (x$1.tag) {
            var tmp$1 = x$1[1];
            if (typeof tmp$1 === "number" || tmp$1.tag) {
              return x$1;
            } else {
              return $$default(/* () */0);
            }
          } else {
            return x$1;
          }
        } else {
          return $$default(/* () */0);
        }
      } else {
        return $$default(/* () */0);
      }
    }
    
  }
}

function evar_eqappr_x(_$staropt$star, ts, env, evd, pbty, _param, _param$1) {
  while(true) {
    var param = _param$1;
    var param$1 = _param;
    var $staropt$star = _$staropt$star;
    var csts2 = param[1];
    var appr2 = param[0];
    var sk2 = appr2[1];
    var term2 = appr2[0];
    var csts1 = param$1[1];
    var appr1 = param$1[0];
    var sk1 = appr1[1];
    var term1 = appr1[0];
    var rhs_is_already_stuck = $staropt$star ? $staropt$star[0] : /* false */0;
    var miller_pfenning = function (on_left, fallback, ev, lF, tM, evd) {
      var match = Evarsolve$ReactTemplate.is_unification_pattern_evar(env, evd, ev, lF, tM);
      if (match) {
        var t2 = Evarsolve$ReactTemplate.solve_pattern_eqn(env, evd, match[0], tM);
        return Evarsolve$ReactTemplate.solve_simple_eqn((function (param, param$1, param$2, param$3, param$4) {
                      return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                    }), /* None */0, env, evd, /* tuple */[
                    position_problem(on_left, pbty),
                    ev,
                    t2
                  ]);
      } else {
        return Curry._1(fallback, /* () */0);
      }
    };
    var consume_stack = function (on_left, param, param$1, evd) {
      var skO = param$1[1];
      var termO = param$1[0];
      var termF = param[0];
      var $$switch = function (f, a, b) {
        if (on_left) {
          return Curry._2(f, a, b);
        } else {
          return Curry._2(f, b, a);
        }
      };
      var not_only_app = Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](skO);
      var match = $$switch((function (param, param$1) {
              return ise_stack2(not_only_app, env, evd, (function (param, param$1, param$2, param$3, param$4) {
                            return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                          }), param, param$1);
            }), param[1], skO);
      var match$1 = match[0];
      if (match$1) {
        var match$2 = match[1];
        var match$3 = match$1[0];
        var r = match$3[1];
        var l = match$3[0];
        if (match$2.tag) {
          return match[1];
        } else {
          var i$prime = match$2[0];
          if (on_left && (not_only_app || Curry._1(Util$ReactTemplate.List[/* is_empty */45], l))) {
            return $$switch((function (param, param$1) {
                          return evar_conv_x(ts, env, i$prime, pbty, param, param$1);
                        }), Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                            termF,
                            l
                          ]), Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                            termO,
                            r
                          ]));
          } else if (!on_left && (not_only_app || Curry._1(Util$ReactTemplate.List[/* is_empty */45], r))) {
            return $$switch((function (param, param$1) {
                          return evar_conv_x(ts, env, i$prime, pbty, param, param$1);
                        }), Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                            termF,
                            r
                          ]), Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                            termO,
                            l
                          ]));
          } else {
            return /* UnifFailure */Block.__(1, [
                      evd,
                      /* NotSameArgSize */0
                    ]);
          }
        }
      } else {
        var match$4 = match[1];
        if (match$4.tag) {
          return match[1];
        } else {
          var i$prime$1 = match$4[0];
          return $$switch((function (param, param$1) {
                        return evar_conv_x(ts, env, i$prime$1, pbty, param, param$1);
                      }), termF, termO);
        }
      }
    };
    var eta = function (env, evd, onleft, sk, term, sk$prime, term$prime) {
      if (!(
          sk ? /* false */0 : /* true */1
        )) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "evarconv.ml",
                439,
                4
              ]
            ];
      }
      var match = EConstr$ReactTemplate.destLambda(evd, term);
      var c = Evarutil$ReactTemplate.nf_evar(evd, match[1]);
      var env$prime = EConstr$ReactTemplate.push_rel(/* LocalAssum */Block.__(0, [
              match[0],
              c
            ]), env);
      var out1 = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env$prime, evd, Reductionops$ReactTemplate.Cst_stack[/* empty */0], /* tuple */[
            match[2],
            Reductionops$ReactTemplate.Stack[/* empty */2]
          ]);
      var out2_000 = Reductionops$ReactTemplate.whd_nored_state(evd)(/* tuple */[
            EConstr$ReactTemplate.Vars[/* lift */0](1, Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                      term$prime,
                      sk$prime
                    ])),
            Reductionops$ReactTemplate.Stack[/* append_app */4](/* array */[EConstr$ReactTemplate.mkRel(1)], Reductionops$ReactTemplate.Stack[/* empty */2])
          ]);
      var out2_001 = Reductionops$ReactTemplate.Cst_stack[/* empty */0];
      var out2 = /* tuple */[
        out2_000,
        out2_001
      ];
      if (onleft) {
        return evar_eqappr_x(/* None */0, ts, env$prime, evd, /* CONV */0, out1, out2);
      } else {
        return evar_eqappr_x(/* None */0, ts, env$prime, evd, /* CONV */0, out2, out1);
      }
    };
    var flex_maybeflex = function (on_left, ev, param, param$1, vM) {
      var cstsM = param$1[1];
      var apprM = param$1[0];
      var skM = apprM[1];
      var cstsF = param[1];
      var apprF = param[0];
      var skF = apprF[1];
      var $$switch = function (f, a, b) {
        if (on_left) {
          return Curry._2(f, a, b);
        } else {
          return Curry._2(f, b, a);
        }
      };
      var not_only_app = Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](skM);
      var f1 = function (i) {
        var match = Reductionops$ReactTemplate.Stack[/* list_of_app_stack */15](skF);
        if (match) {
          var tM = Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, apprM);
          return miller_pfenning(on_left, (function () {
                        if (not_only_app) {
                          return $$switch((function (x, y) {
                                        return /* Success */Block.__(0, [add_conv_pb(/* tuple */[
                                                        pbty,
                                                        env,
                                                        x,
                                                        y
                                                      ], i)]);
                                      }), Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, apprF), tM);
                        } else {
                          return /* UnifFailure */Block.__(1, [
                                    i,
                                    /* NotSameHead */1
                                  ]);
                        }
                      }), ev, match[0], tM, i);
        } else {
          return /* UnifFailure */Block.__(1, [
                    evd,
                    /* NotSameHead */1
                  ]);
        }
      };
      var consume = function (apprF, apprM, i) {
        if (Reductionops$ReactTemplate.Stack[/* is_empty */3](apprF[1]) && Reductionops$ReactTemplate.Stack[/* is_empty */3](apprM[1])) {
          return /* UnifFailure */Block.__(1, [
                    i,
                    /* NotSameHead */1
                  ]);
        } else {
          return consume_stack(on_left, apprF, apprM, i);
        }
      };
      var delta = function (i) {
        return $$switch((function (param, param$1) {
                      return evar_eqappr_x(/* None */0, ts, env, i, pbty, param, param$1);
                    }), /* tuple */[
                    apprF,
                    cstsF
                  ], Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, cstsM, /* tuple */[
                        vM,
                        skM
                      ]));
      };
      var $$default = function (i) {
        return ise_try(i, /* :: */[
                    f1,
                    /* :: */[
                      (function (param) {
                          return consume(apprF, apprM, param);
                        }),
                      /* :: */[
                        delta,
                        /* [] */0
                      ]
                    ]
                  ]);
      };
      var match = EConstr$ReactTemplate.kind(evd, apprM[0]);
      if (match.tag === 16) {
        if (Reductionops$ReactTemplate.Stack[/* is_empty */3](skF)) {
          return $$default(evd);
        } else {
          var nargsF = Reductionops$ReactTemplate.Stack[/* args_size */17](skF);
          var nargsM = Reductionops$ReactTemplate.Stack[/* args_size */17](skM);
          if (nargsF <= nargsM) {
            return $$default(evd);
          } else {
            var f;
            try {
              var termM$prime = Retyping$ReactTemplate.expand_projection(env, evd, match[0], match[1], /* [] */0);
              var match$1 = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, evd, cstsM, /* tuple */[
                    termM$prime,
                    skM
                  ]);
              var cstsM$prime = match$1[1];
              var apprM$prime = match$1[0];
              var delta$prime = function (i) {
                return $$switch((function (param, param$1) {
                              return evar_eqappr_x(/* None */0, ts, env, i, pbty, param, param$1);
                            }), /* tuple */[
                            apprF,
                            cstsF
                          ], /* tuple */[
                            apprM$prime,
                            cstsM$prime
                          ]);
              };
              f = (function (i) {
                  return ise_try(i, /* :: */[
                              f1,
                              /* :: */[
                                (function (param) {
                                    return consume(apprF, apprM$prime, param);
                                  }),
                                /* :: */[
                                  delta$prime,
                                  /* [] */0
                                ]
                              ]
                            ]);
                });
            }
            catch (raw_exn){
              var exn = Js_exn.internalToOCamlException(raw_exn);
              if (exn[0] === Retyping$ReactTemplate.RetypeError) {
                f = $$default;
              } else {
                throw exn;
              }
            }
            return Curry._1(f, evd);
          }
        }
      } else {
        return $$default(evd);
      }
    };
    var flex_rigid = function (on_left, ev, apprF, apprR) {
      var skR = apprR[1];
      var termR = apprR[0];
      var skF = apprF[1];
      var termF = apprF[0];
      var eta$1 = function (evd) {
        var match = EConstr$ReactTemplate.kind(evd, termR);
        switch (match.tag | 0) {
          case 7 : 
              if (Curry._1(Util$ReactTemplate.List[/* is_empty */45], skR)) {
                return eta(env, evd, /* false */0, skR, termR, skF, termF);
              } else {
                return /* UnifFailure */Block.__(1, [
                          evd,
                          /* NotSameHead */1
                        ]);
              }
          case 12 : 
              return eta_constructor(ts, env, evd, skR, match[0], skF, termF);
          default:
            return /* UnifFailure */Block.__(1, [
                      evd,
                      /* NotSameHead */1
                    ]);
        }
      };
      var match = Reductionops$ReactTemplate.Stack[/* list_of_app_stack */15](skF);
      if (match) {
        var lF = match[0];
        var tR = Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, apprR);
        return miller_pfenning(on_left, (function () {
                      return ise_try(evd, /* :: */[
                                  eta$1,
                                  /* :: */[
                                    (function (i) {
                                        if (occur_rigidly(ev, i, tR)) {
                                          return /* UnifFailure */Block.__(1, [
                                                    evd,
                                                    /* OccurCheck */Block.__(0, [
                                                        ev[0],
                                                        tR
                                                      ])
                                                  ]);
                                        } else {
                                          var match;
                                          if (EConstr$ReactTemplate.isRel(i, tR) || EConstr$ReactTemplate.isVar(i, tR)) {
                                            var match$1 = Evardefine$ReactTemplate.evar_absorb_arguments(env, i, ev, lF);
                                            match = /* tuple */[
                                              match$1[0],
                                              EConstr$ReactTemplate.mkEvar(match$1[1])
                                            ];
                                          } else {
                                            match = /* tuple */[
                                              i,
                                              Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, apprF)
                                            ];
                                          }
                                          var i$1 = match[0];
                                          var f = function (x, y) {
                                            return /* Success */Block.__(0, [add_conv_pb(/* tuple */[
                                                            pbty,
                                                            env,
                                                            x,
                                                            y
                                                          ], i$1)]);
                                          };
                                          var a = match[1];
                                          var b = tR;
                                          if (on_left) {
                                            return Curry._2(f, a, b);
                                          } else {
                                            return Curry._2(f, b, a);
                                          }
                                        }
                                      }),
                                    /* [] */0
                                  ]
                                ]);
                    }), ev, lF, tR, evd);
      } else {
        return ise_try(evd, /* :: */[
                    (function (param) {
                        return consume_stack(on_left, apprF, apprR, param);
                      }),
                    /* :: */[
                      eta$1,
                      /* [] */0
                    ]
                  ]);
      }
    };
    var app_empty = sk1 || sk2 ? /* false */0 : /* true */1;
    if (debug_unification[0]) {
      Feedback$ReactTemplate.msg_notice(/* None */0, Pp$ReactTemplate.v(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Reductionops$ReactTemplate.pr_state(appr1), Pp$ReactTemplate.cut(/* () */0)), Reductionops$ReactTemplate.pr_state(appr2)), Pp$ReactTemplate.cut(/* () */0))));
    }
    var match = flex_kind_of_term(ts[0], env, evd, term1, sk1);
    var match$1 = flex_kind_of_term(ts[0], env, evd, term2, sk2);
    if (typeof match === "number") {
      if (typeof match$1 === "number") {
        if (EConstr$ReactTemplate.isLambda(evd, term1) && EConstr$ReactTemplate.isLambda(evd, term2)) {
          var match$2 = EConstr$ReactTemplate.destLambda(evd, term1);
          var c$prime1 = match$2[2];
          var c1 = match$2[1];
          var na1 = match$2[0];
          var match$3 = EConstr$ReactTemplate.destLambda(evd, term2);
          var c$prime2 = match$3[2];
          var c2 = match$3[1];
          var na2 = match$3[0];
          if (!app_empty) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "evarconv.ml",
                    808,
                    8
                  ]
                ];
          }
          return ise_and(evd, /* :: */[
                      (function(c1,c2){
                      return function (i) {
                        return evar_conv_x(ts, env, i, /* CONV */0, c1, c2);
                      }
                      }(c1,c2)),
                      /* :: */[
                        (function(na1,c1,c$prime1,na2,c$prime2){
                        return function (i) {
                          var c = Evarutil$ReactTemplate.nf_evar(i, c1);
                          var na = Nameops$ReactTemplate.Name[/* pick */16](na1, na2);
                          return evar_conv_x(ts, EConstr$ReactTemplate.push_rel(/* LocalAssum */Block.__(0, [
                                            na,
                                            c
                                          ]), env), i, /* CONV */0, c$prime1, c$prime2);
                        }
                        }(na1,c1,c$prime1,na2,c$prime2)),
                        /* [] */0
                      ]
                    ]);
        } else if (EConstr$ReactTemplate.isLambda(evd, term1) && Curry._1(Util$ReactTemplate.List[/* is_empty */45], sk1)) {
          return eta(env, evd, /* true */1, sk1, term1, sk2, term2);
        } else if (EConstr$ReactTemplate.isLambda(evd, term2) && Curry._1(Util$ReactTemplate.List[/* is_empty */45], sk2)) {
          return eta(env, evd, /* false */0, sk2, term2, sk1, term1);
        } else {
          var match$4 = EConstr$ReactTemplate.kind(evd, term1);
          var match$5 = EConstr$ReactTemplate.kind(evd, term2);
          var exit = 0;
          var exit$1 = 0;
          var exit$2 = 0;
          var exit$3 = 0;
          switch (match$4.tag | 0) {
            case 0 : 
                switch (match$5.tag | 0) {
                  case 0 : 
                      if (match$4[0] === match$5[0]) {
                        return exact_ise_stack2(env, evd, (function (param, param$1, param$2, param$3, param$4) {
                                      return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                    }), sk1, sk2);
                      } else {
                        return /* UnifFailure */Block.__(1, [
                                  evd,
                                  /* NotSameHead */1
                                ]);
                      }
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 1 : 
                  case 4 : 
                  case 6 : 
                  case 10 : 
                  case 11 : 
                  case 14 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 1 : 
                switch (match$5.tag | 0) {
                  case 1 : 
                      if (Names$ReactTemplate.Id[/* equal */0](match$4[0], match$5[0])) {
                        return exact_ise_stack2(env, evd, (function (param, param$1, param$2, param$3, param$4) {
                                      return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                    }), sk1, sk2);
                      } else {
                        return /* UnifFailure */Block.__(1, [
                                  evd,
                                  /* NotSameHead */1
                                ]);
                      }
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 0 : 
                  case 4 : 
                  case 6 : 
                  case 10 : 
                  case 11 : 
                  case 14 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 4 : 
                switch (match$5.tag | 0) {
                  case 4 : 
                      if (app_empty) {
                        try {
                          var s1 = EConstr$ReactTemplate.ESorts[/* kind */1](evd, match$4[0]);
                          var s2 = EConstr$ReactTemplate.ESorts[/* kind */1](evd, match$5[0]);
                          var evd$prime = pbty ? Evd$ReactTemplate.set_leq_sort(env, evd, s1, s2) : Evd$ReactTemplate.set_eq_sort(env, evd, s1, s2);
                          return /* Success */Block.__(0, [evd$prime]);
                        }
                        catch (raw_e){
                          var e = Js_exn.internalToOCamlException(raw_e);
                          if (e[0] === Univ$ReactTemplate.UniverseInconsistency) {
                            return /* UnifFailure */Block.__(1, [
                                      evd,
                                      /* UnifUnivInconsistency */Block.__(5, [e[1]])
                                    ]);
                          } else if (CErrors$ReactTemplate.noncritical(e)) {
                            return /* UnifFailure */Block.__(1, [
                                      evd,
                                      /* NotSameHead */1
                                    ]);
                          } else {
                            throw e;
                          }
                        }
                      } else {
                        exit$2 = 5;
                      }
                      break;
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 0 : 
                  case 1 : 
                  case 6 : 
                  case 10 : 
                  case 11 : 
                  case 14 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 6 : 
                var c$prime1$1 = match$4[2];
                var c1$1 = match$4[1];
                var n1 = match$4[0];
                switch (match$5.tag | 0) {
                  case 6 : 
                      if (app_empty) {
                        var c$prime2$1 = match$5[2];
                        var c2$1 = match$5[1];
                        var n2 = match$5[0];
                        return ise_and(evd, /* :: */[
                                    (function(c1$1,c2$1){
                                    return function (i) {
                                      return evar_conv_x(ts, env, i, /* CONV */0, c1$1, c2$1);
                                    }
                                    }(c1$1,c2$1)),
                                    /* :: */[
                                      (function(n1,c1$1,c$prime1$1,n2,c$prime2$1){
                                      return function (i) {
                                        var c = Evarutil$ReactTemplate.nf_evar(i, c1$1);
                                        var na = Nameops$ReactTemplate.Name[/* pick */16](n1, n2);
                                        return evar_conv_x(ts, EConstr$ReactTemplate.push_rel(/* LocalAssum */Block.__(0, [
                                                          na,
                                                          c
                                                        ]), env), i, pbty, c$prime1$1, c$prime2$1);
                                      }
                                      }(n1,c1$1,c$prime1$1,n2,c$prime2$1)),
                                      /* [] */0
                                    ]
                                  ]);
                      } else {
                        exit$2 = 5;
                      }
                      break;
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 0 : 
                  case 1 : 
                  case 4 : 
                  case 10 : 
                  case 11 : 
                  case 14 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 10 : 
                switch (match$5.tag | 0) {
                  case 10 : 
                      exit = 2;
                      break;
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 0 : 
                  case 1 : 
                  case 4 : 
                  case 6 : 
                  case 11 : 
                  case 14 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 11 : 
                switch (match$5.tag | 0) {
                  case 11 : 
                      exit = 2;
                      break;
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 0 : 
                  case 1 : 
                  case 4 : 
                  case 6 : 
                  case 10 : 
                  case 14 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 12 : 
                if (match$5.tag === 12) {
                  exit = 2;
                } else {
                  return eta_constructor(ts, env, evd, sk1, match$4[0], sk2, term2);
                }
                break;
            case 14 : 
                var match$6 = match$4[0];
                var recdef1 = match$6[1];
                var bds1 = recdef1[2];
                var tys1 = recdef1[1];
                var match$7 = match$6[0];
                switch (match$5.tag | 0) {
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 14 : 
                      var match$8 = match$5[0];
                      var match$9 = match$8[1];
                      var bds2 = match$9[2];
                      var tys2 = match$9[1];
                      var match$10 = match$8[0];
                      if (match$7[1] === match$10[1] && Util$ReactTemplate.$$Array[/* equal */21]((function (prim, prim$1) {
                                return +(prim === prim$1);
                              }), match$7[0], match$10[0])) {
                        return ise_and(evd, /* :: */[
                                    (function(tys1,tys2){
                                    return function (i) {
                                      return ise_array2(i, (function (i$prime) {
                                                    return (function (param, param$1) {
                                                        return evar_conv_x(ts, env, i$prime, /* CONV */0, param, param$1);
                                                      });
                                                  }), tys1, tys2);
                                    }
                                    }(tys1,tys2)),
                                    /* :: */[
                                      (function(bds1,recdef1,bds2){
                                      return function (i) {
                                        return ise_array2(i, (function (i$prime) {
                                                      var partial_arg = EConstr$ReactTemplate.push_rec_types(recdef1, env);
                                                      return (function (param, param$1) {
                                                          return evar_conv_x(ts, partial_arg, i$prime, /* CONV */0, param, param$1);
                                                        });
                                                    }), bds1, bds2);
                                      }
                                      }(bds1,recdef1,bds2)),
                                      /* :: */[
                                        (function(sk1,sk2){
                                        return function (i) {
                                          return exact_ise_stack2(env, i, (function (param, param$1, param$2, param$3, param$4) {
                                                        return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                                      }), sk1, sk2);
                                        }
                                        }(sk1,sk2)),
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                      } else {
                        return /* UnifFailure */Block.__(1, [
                                  evd,
                                  /* NotSameHead */1
                                ]);
                      }
                  case 0 : 
                  case 1 : 
                  case 4 : 
                  case 6 : 
                  case 10 : 
                  case 11 : 
                  case 15 : 
                      exit$2 = 5;
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            case 15 : 
                var match$11 = match$4[0];
                var recdef1$1 = match$11[1];
                var bds1$1 = recdef1$1[2];
                var tys1$1 = recdef1$1[1];
                switch (match$5.tag | 0) {
                  case 2 : 
                  case 12 : 
                      exit$3 = 6;
                      break;
                  case 0 : 
                  case 1 : 
                  case 4 : 
                  case 6 : 
                  case 10 : 
                  case 11 : 
                  case 14 : 
                      exit$2 = 5;
                      break;
                  case 15 : 
                      var match$12 = match$5[0];
                      if (match$11[0] === match$12[0]) {
                        var match$13 = match$12[1];
                        var bds2$1 = match$13[2];
                        var tys2$1 = match$13[1];
                        return ise_and(evd, /* :: */[
                                    (function(tys1$1,tys2$1){
                                    return function (i) {
                                      return ise_array2(i, (function (i) {
                                                    return (function (param, param$1) {
                                                        return evar_conv_x(ts, env, i, /* CONV */0, param, param$1);
                                                      });
                                                  }), tys1$1, tys2$1);
                                    }
                                    }(tys1$1,tys2$1)),
                                    /* :: */[
                                      (function(bds1$1,recdef1$1,bds2$1){
                                      return function (i) {
                                        return ise_array2(i, (function (i) {
                                                      var partial_arg = EConstr$ReactTemplate.push_rec_types(recdef1$1, env);
                                                      return (function (param, param$1) {
                                                          return evar_conv_x(ts, partial_arg, i, /* CONV */0, param, param$1);
                                                        });
                                                    }), bds1$1, bds2$1);
                                      }
                                      }(bds1$1,recdef1$1,bds2$1)),
                                      /* :: */[
                                        (function(sk1,sk2){
                                        return function (i) {
                                          return exact_ise_stack2(env, i, (function (param, param$1, param$2, param$3, param$4) {
                                                        return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                                      }), sk1, sk2);
                                        }
                                        }(sk1,sk2)),
                                        /* [] */0
                                      ]
                                    ]
                                  ]);
                      } else {
                        return /* UnifFailure */Block.__(1, [
                                  evd,
                                  /* NotSameHead */1
                                ]);
                      }
                      break;
                  default:
                    exit$1 = 4;
                }
                break;
            default:
              exit$3 = 6;
          }
          if (exit$3 === 6) {
            switch (match$5.tag | 0) {
              case 2 : 
                  exit = 3;
                  break;
              case 12 : 
                  return eta_constructor(ts, env, evd, sk2, match$5[0], sk1, term1);
              default:
                if (match$4.tag === 2) {
                  exit = 3;
                } else {
                  exit$2 = 5;
                }
            }
          }
          if (exit$2 === 5) {
            switch (match$5.tag | 0) {
              case 3 : 
              case 5 : 
              case 7 : 
              case 8 : 
              case 9 : 
              case 13 : 
              case 16 : 
                  exit$1 = 4;
                  break;
              default:
                return /* UnifFailure */Block.__(1, [
                          evd,
                          /* NotSameHead */1
                        ]);
            }
          }
          if (exit$1 === 4) {
            switch (match$4.tag | 0) {
              case 7 : 
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "evarconv.ml",
                          932,
                          20
                        ]
                      ];
              case 3 : 
              case 8 : 
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "evarconv.ml",
                          931,
                          27
                        ]
                      ];
              case 5 : 
              case 9 : 
              case 13 : 
              case 16 : 
                  exit = 1;
                  break;
              default:
                return /* UnifFailure */Block.__(1, [
                          evd,
                          /* NotSameHead */1
                        ]);
            }
          }
          switch (exit) {
            case 1 : 
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "evarconv.ml",
                        930,
                        44
                      ]
                    ];
            case 2 : 
                var env$1 = env;
                var evd$1 = evd;
                var sk = sk1;
                var term = term1;
                var sk$prime = sk2;
                var term$prime = term2;
                var check_strict = function (evd, u, u$prime) {
                  var cstrs = Univ$ReactTemplate.enforce_eq_instances(u, u$prime)(Univ$ReactTemplate.Constraint[/* empty */0]);
                  try {
                    return /* Success */Block.__(0, [Evd$ReactTemplate.add_constraints(evd, cstrs)]);
                  }
                  catch (raw_exn){
                    var exn = Js_exn.internalToOCamlException(raw_exn);
                    if (exn[0] === Univ$ReactTemplate.UniverseInconsistency) {
                      return /* UnifFailure */Block.__(1, [
                                evd,
                                /* UnifUnivInconsistency */Block.__(5, [exn[1]])
                              ]);
                    } else {
                      throw exn;
                    }
                  }
                };
                return ise_and(evd$1, /* :: */[
                            (function(env$1,sk,term,sk$prime,term$prime){
                            return function (i) {
                              try {
                                var evd = i;
                                var match = EConstr$ReactTemplate.kind(evd, term);
                                var match$1 = EConstr$ReactTemplate.kind(evd, term$prime);
                                var exit = 0;
                                switch (match.tag | 0) {
                                  case 10 : 
                                      if (match$1.tag === 10) {
                                        var match$2 = match$1[0];
                                        var match$3 = match[0];
                                        if (Names$ReactTemplate.Constant[/* equal */12](match$3[0], match$2[0])) {
                                          var u = EConstr$ReactTemplate.EInstance[/* kind */1](evd, match$3[1]);
                                          var u$prime = EConstr$ReactTemplate.EInstance[/* kind */1](evd, match$2[1]);
                                          return check_strict(evd, u, u$prime);
                                        } else {
                                          return /* UnifFailure */Block.__(1, [
                                                    evd,
                                                    /* NotSameHead */1
                                                  ]);
                                        }
                                      } else {
                                        exit = 1;
                                      }
                                      break;
                                  case 11 : 
                                      if (match$1.tag === 11) {
                                        var match$4 = match$1[0];
                                        var u$prime$1 = match$4[1];
                                        var match$5 = match[0];
                                        var u$1 = match$5[1];
                                        var ind = match$5[0];
                                        if (Names$ReactTemplate.eq_ind(ind, match$4[0])) {
                                          if (Curry._1(EConstr$ReactTemplate.EInstance[/* is_empty */3], u$1) && Curry._1(EConstr$ReactTemplate.EInstance[/* is_empty */3], u$prime$1)) {
                                            return /* Success */Block.__(0, [evd]);
                                          } else {
                                            var u$2 = EConstr$ReactTemplate.EInstance[/* kind */1](evd, u$1);
                                            var u$prime$2 = EConstr$ReactTemplate.EInstance[/* kind */1](evd, u$prime$1);
                                            var mind = Environ$ReactTemplate.lookup_mind(ind[0], env$1);
                                            var match$6 = mind[/* mind_universes */8];
                                            switch (match$6.tag | 0) {
                                              case 0 : 
                                                  throw [
                                                        Caml_builtin_exceptions.assert_failure,
                                                        [
                                                          "evarconv.ml",
                                                          470,
                                                          35
                                                        ]
                                                      ];
                                              case 1 : 
                                                  return check_strict(evd, u$2, u$prime$2);
                                              case 2 : 
                                                  var nparamsaplied = Reductionops$ReactTemplate.Stack[/* args_size */17](sk);
                                                  var nparamsaplied$prime = Reductionops$ReactTemplate.Stack[/* args_size */17](sk$prime);
                                                  var needed = Reduction$ReactTemplate.inductive_cumulativity_arguments(/* tuple */[
                                                        mind,
                                                        ind[1]
                                                      ]);
                                                  if (nparamsaplied === needed && nparamsaplied$prime === needed) {
                                                    var evd$1 = evd;
                                                    var variances = Univ$ReactTemplate.ACumulativityInfo[/* variance */1](match$6[0]);
                                                    var u$3 = u$2;
                                                    var u$prime$3 = u$prime$2;
                                                    var match$7 = Evarutil$ReactTemplate.compare_cumulative_instances(/* CONV */0, variances, u$3, u$prime$3, evd$1);
                                                    if (match$7.tag) {
                                                      return /* UnifFailure */Block.__(1, [
                                                                evd$1,
                                                                /* UnifUnivInconsistency */Block.__(5, [match$7[0]])
                                                              ]);
                                                    } else {
                                                      return /* Success */Block.__(0, [match$7[0]]);
                                                    }
                                                  } else {
                                                    return check_strict(evd, u$2, u$prime$2);
                                                  }
                                              
                                            }
                                          }
                                        } else {
                                          return /* UnifFailure */Block.__(1, [
                                                    evd,
                                                    /* NotSameHead */1
                                                  ]);
                                        }
                                      } else {
                                        exit = 1;
                                      }
                                      break;
                                  case 12 : 
                                      if (match$1.tag === 12) {
                                        var match$8 = match$1[0];
                                        var u$prime$4 = match$8[1];
                                        var match$9 = match[0];
                                        var u$4 = match$9[1];
                                        var cons = match$9[0];
                                        var match$10 = cons[0];
                                        if (Names$ReactTemplate.eq_constructor(cons, match$8[0])) {
                                          if (Curry._1(EConstr$ReactTemplate.EInstance[/* is_empty */3], u$4) && Curry._1(EConstr$ReactTemplate.EInstance[/* is_empty */3], u$prime$4)) {
                                            return /* Success */Block.__(0, [evd]);
                                          } else {
                                            var u$5 = EConstr$ReactTemplate.EInstance[/* kind */1](evd, u$4);
                                            var u$prime$5 = EConstr$ReactTemplate.EInstance[/* kind */1](evd, u$prime$4);
                                            var mind$1 = Environ$ReactTemplate.lookup_mind(match$10[0], env$1);
                                            var match$11 = mind$1[/* mind_universes */8];
                                            switch (match$11.tag | 0) {
                                              case 0 : 
                                                  throw [
                                                        Caml_builtin_exceptions.assert_failure,
                                                        [
                                                          "evarconv.ml",
                                                          490,
                                                          35
                                                        ]
                                                      ];
                                              case 1 : 
                                                  return check_strict(evd, u$5, u$prime$5);
                                              case 2 : 
                                                  var nparamsaplied$1 = Reductionops$ReactTemplate.Stack[/* args_size */17](sk);
                                                  var nparamsaplied$prime$1 = Reductionops$ReactTemplate.Stack[/* args_size */17](sk$prime);
                                                  var needed$1 = Reduction$ReactTemplate.constructor_cumulativity_arguments(/* tuple */[
                                                        mind$1,
                                                        match$10[1],
                                                        cons[1]
                                                      ]);
                                                  if (nparamsaplied$1 === needed$1 && nparamsaplied$prime$1 === needed$1) {
                                                    return /* Success */Block.__(0, [Evarutil$ReactTemplate.compare_constructor_instances(evd, u$5, u$prime$5)]);
                                                  } else {
                                                    return check_strict(evd, u$5, u$prime$5);
                                                  }
                                              
                                            }
                                          }
                                        } else {
                                          return /* UnifFailure */Block.__(1, [
                                                    evd,
                                                    /* NotSameHead */1
                                                  ]);
                                        }
                                      } else {
                                        exit = 1;
                                      }
                                      break;
                                  default:
                                    exit = 1;
                                }
                                if (exit === 1) {
                                  return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str(""));
                                }
                                
                              }
                              catch (raw_exn){
                                var exn = Js_exn.internalToOCamlException(raw_exn);
                                if (exn[0] === Univ$ReactTemplate.UniverseInconsistency) {
                                  return /* UnifFailure */Block.__(1, [
                                            i,
                                            /* UnifUnivInconsistency */Block.__(5, [exn[1]])
                                          ]);
                                } else {
                                  throw exn;
                                }
                              }
                            }
                            }(env$1,sk,term,sk$prime,term$prime)),
                            /* :: */[
                              (function(env$1,sk,sk$prime){
                              return function (i) {
                                return exact_ise_stack2(env$1, i, (function (param, param$1, param$2, param$3, param$4) {
                                              return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                            }), sk, sk$prime);
                              }
                              }(env$1,sk,sk$prime)),
                              /* [] */0
                            ]
                          ]);
            case 3 : 
                var match$14 = ise_stack2(/* true */1, env, evd, (function (param, param$1, param$2, param$3, param$4) {
                        return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                      }), sk1, sk2);
                var match$15 = match$14[0];
                var x = match$14[1];
                if (x.tag) {
                  return x;
                } else if (match$15) {
                  var i$prime = match$14[1][0];
                  var match$16 = match$15[0];
                  return evar_conv_x(ts, env, i$prime, /* CONV */0, Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, i$prime, /* tuple */[
                                  term1,
                                  match$16[0]
                                ]), Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, i$prime, /* tuple */[
                                  term2,
                                  match$16[1]
                                ]));
                } else {
                  return evar_conv_x(ts, env, match$14[1][0], /* CONV */0, term1, term2);
                }
                break;
            
          }
        }
      } else if (match$1.tag) {
        return flex_rigid(/* false */0, match$1[0], appr2, appr1);
      } else {
        var v2 = match$1[0];
        var f3 = (function(appr1,appr2){
        return function f3(i) {
          try {
            if (ts[1]) {
              return conv_record(ts, env, i, check_conv_record(env, i, appr2, appr1));
            } else {
              throw Caml_builtin_exceptions.not_found;
            }
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return /* UnifFailure */Block.__(1, [
                        i,
                        /* NoCanonicalStructure */2
                      ]);
            } else {
              throw exn;
            }
          }
        }
        }(appr1,appr2));
        var f4 = (function(appr1,csts1,term2,sk2,csts2,v2){
        return function f4(i) {
          return evar_eqappr_x(/* None */0, ts, env, i, pbty, /* tuple */[
                      appr1,
                      csts1
                    ], Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, Reductionops$ReactTemplate.Cst_stack[/* add_cst */3](term2, csts2), /* tuple */[
                          v2,
                          sk2
                        ]));
        }
        }(appr1,csts1,term2,sk2,csts2,v2));
        return ise_try(evd, /* :: */[
                    f3,
                    /* :: */[
                      f4,
                      /* [] */0
                    ]
                  ]);
      }
    } else if (match.tag) {
      var ev1 = match[0];
      var al1 = ev1[1];
      var sp1 = ev1[0];
      if (typeof match$1 === "number") {
        return flex_rigid(/* true */1, ev1, appr1, appr2);
      } else if (match$1.tag) {
        var ev2 = match$1[0];
        var al2 = ev2[1];
        var sp2 = ev2[0];
        var f1 = (function(term1,sk1,appr1,csts1,term2,sk2,appr2,csts2,ev1,ev2){
        return function f1(i) {
          var match = ise_stack2(/* false */0, env, i, (function (param, param$1, param$2, param$3, param$4) {
                  return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                }), sk1, sk2);
          var match$1 = match[0];
          var exit = 0;
          if (match$1) {
            var match$2 = match$1[0];
            var r = match$2[0];
            if (match$2[1]) {
              if (r) {
                if (match[1].tag) {
                  exit = 1;
                } else if (Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](sk2)) {
                  return flex_rigid(/* true */1, ev1, appr1, appr2);
                } else if (Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](sk1)) {
                  return flex_rigid(/* false */0, ev2, appr2, appr1);
                } else {
                  return /* UnifFailure */Block.__(1, [
                            i,
                            /* NotSameArgSize */0
                          ]);
                }
              } else {
                var match$3 = match[1];
                if (match$3.tag) {
                  exit = 1;
                } else {
                  var i$prime = match$3[0];
                  var ev1$prime = Evarutil$ReactTemplate.whd_evar(i$prime, EConstr$ReactTemplate.mkEvar(ev1));
                  if (EConstr$ReactTemplate.isEvar(i$prime, ev1$prime)) {
                    return Evarsolve$ReactTemplate.solve_simple_eqn((function (param, param$1, param$2, param$3, param$4) {
                                  return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                }), /* None */0, env, i$prime, /* tuple */[
                                position_problem(/* true */1, pbty),
                                EConstr$ReactTemplate.destEvar(i$prime, ev1$prime),
                                Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                                      term2,
                                      match$2[1]
                                    ])
                              ]);
                  } else {
                    return evar_eqappr_x(/* None */0, ts, env, evd, pbty, /* tuple */[
                                /* tuple */[
                                  ev1$prime,
                                  sk1
                                ],
                                csts1
                              ], /* tuple */[
                                /* tuple */[
                                  term2,
                                  sk2
                                ],
                                csts2
                              ]);
                  }
                }
              }
            } else {
              var match$4 = match[1];
              if (match$4.tag) {
                exit = 1;
              } else {
                var i$prime$1 = match$4[0];
                var ev2$prime = Evarutil$ReactTemplate.whd_evar(i$prime$1, EConstr$ReactTemplate.mkEvar(ev2));
                if (EConstr$ReactTemplate.isEvar(i$prime$1, ev2$prime)) {
                  return Evarsolve$ReactTemplate.solve_simple_eqn((function (param, param$1, param$2, param$3, param$4) {
                                return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                              }), /* None */0, env, i$prime$1, /* tuple */[
                              position_problem(/* false */0, pbty),
                              EConstr$ReactTemplate.destEvar(i$prime$1, ev2$prime),
                              Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                                    term1,
                                    r
                                  ])
                            ]);
                } else {
                  return evar_eqappr_x(/* None */0, ts, env, evd, pbty, /* tuple */[
                              /* tuple */[
                                ev2$prime,
                                sk1
                              ],
                              csts1
                            ], /* tuple */[
                              /* tuple */[
                                term2,
                                sk2
                              ],
                              csts2
                            ]);
                }
              }
            }
          } else {
            var x = match[1];
            if (x.tag) {
              if (Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](sk2)) {
                return flex_rigid(/* true */1, ev1, appr1, appr2);
              } else if (Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](sk1)) {
                return flex_rigid(/* false */0, ev2, appr2, appr1);
              } else {
                return x;
              }
            } else {
              var i$prime$2 = x[0];
              var ev1$prime$1 = Evarutil$ReactTemplate.whd_evar(i$prime$2, EConstr$ReactTemplate.mkEvar(ev1));
              if (EConstr$ReactTemplate.isEvar(i$prime$2, ev1$prime$1)) {
                return Evarsolve$ReactTemplate.solve_simple_eqn((function (param, param$1, param$2, param$3, param$4) {
                              return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                            }), /* None */0, env, i$prime$2, /* tuple */[
                            position_problem(/* true */1, pbty),
                            EConstr$ReactTemplate.destEvar(i$prime$2, ev1$prime$1),
                            term2
                          ]);
              } else {
                return evar_eqappr_x(/* None */0, ts, env, evd, pbty, /* tuple */[
                            /* tuple */[
                              ev1$prime$1,
                              sk1
                            ],
                            csts1
                          ], /* tuple */[
                            /* tuple */[
                              term2,
                              sk2
                            ],
                            csts2
                          ]);
              }
            }
          }
          if (exit === 1) {
            return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Unexpected result from ise_stack2."));
          }
          
        }
        }(term1,sk1,appr1,csts1,term2,sk2,appr2,csts2,ev1,ev2));
        var f2 = (function(sk1,sk2,sp1,al1,sp2,al2){
        return function f2(i) {
          if (Evar$ReactTemplate.equal(sp1, sp2)) {
            var match = ise_stack2(/* false */0, env, i, (function (param, param$1, param$2, param$3, param$4) {
                    return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                  }), sk1, sk2);
            var exit = 0;
            if (match[0]) {
              exit = 1;
            } else {
              var match$1 = match[1];
              if (match$1.tag) {
                exit = 1;
              } else {
                return /* Success */Block.__(0, [Evarsolve$ReactTemplate.solve_refl(/* None */0, (function (env, i, pbty, a1, a2) {
                                  return Evarsolve$ReactTemplate.is_success(evar_conv_x(ts, env, i, pbty, a1, a2));
                                }), env, match$1[0], position_problem(/* true */1, pbty), sp1, al1, al2)]);
              }
            }
            if (exit === 1) {
              var x = match[1];
              if (x.tag) {
                return x;
              } else {
                return /* UnifFailure */Block.__(1, [
                          i,
                          /* NotSameArgSize */0
                        ]);
              }
            }
            
          } else {
            return /* UnifFailure */Block.__(1, [
                      i,
                      /* NotSameHead */1
                    ]);
          }
        }
        }(sk1,sk2,sp1,al1,sp2,al2));
        return ise_try(evd, /* :: */[
                    f1,
                    /* :: */[
                      f2,
                      /* [] */0
                    ]
                  ]);
      } else {
        return flex_maybeflex(/* true */1, ev1, /* tuple */[
                    appr1,
                    csts1
                  ], /* tuple */[
                    appr2,
                    csts2
                  ], match$1[0]);
      }
    } else {
      var v1 = match[0];
      if (typeof match$1 === "number") {
        var f3$1 = (function(appr1,appr2){
        return function f3$1(i) {
          try {
            if (ts[1]) {
              return conv_record(ts, env, i, check_conv_record(env, i, appr1, appr2));
            } else {
              throw Caml_builtin_exceptions.not_found;
            }
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return /* UnifFailure */Block.__(1, [
                        i,
                        /* NoCanonicalStructure */2
                      ]);
            } else {
              throw exn;
            }
          }
        }
        }(appr1,appr2));
        var f4$1 = (function(term1,sk1,csts1,appr2,csts2,v1){
        return function f4$1(i) {
          return evar_eqappr_x(/* None */0, ts, env, i, pbty, Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, Reductionops$ReactTemplate.Cst_stack[/* add_cst */3](term1, csts1), /* tuple */[
                          v1,
                          sk1
                        ]), /* tuple */[
                      appr2,
                      csts2
                    ]);
        }
        }(term1,sk1,csts1,appr2,csts2,v1));
        return ise_try(evd, /* :: */[
                    f3$1,
                    /* :: */[
                      f4$1,
                      /* [] */0
                    ]
                  ]);
      } else if (match$1.tag) {
        return flex_maybeflex(/* false */0, match$1[0], /* tuple */[
                    appr2,
                    csts2
                  ], /* tuple */[
                    appr1,
                    csts1
                  ], v1);
      } else {
        var v2$1 = match$1[0];
        var match$17 = EConstr$ReactTemplate.kind(evd, term1);
        var match$18 = EConstr$ReactTemplate.kind(evd, term2);
        var exit$4 = 0;
        switch (match$17.tag | 0) {
          case 8 : 
              if (match$18.tag === 8) {
                var c$prime2$2 = match$18[3];
                var t2 = match$18[2];
                var b2 = match$18[1];
                var na2$1 = match$18[0];
                var c$prime1$2 = match$17[3];
                var t1 = match$17[2];
                var b1 = match$17[1];
                var na1$1 = match$17[0];
                var f1$1 = (function(sk1,sk2,na1$1,b1,t1,c$prime1$2,na2$1,b2,t2,c$prime2$2){
                return function f1$1(i) {
                  return ise_and(i, /* :: */[
                              (function (i) {
                                  return ise_try(i, /* :: */[
                                              (function (i) {
                                                  return evar_conv_x(ts, env, i, /* CUMUL */1, t1, t2);
                                                }),
                                              /* :: */[
                                                (function (i) {
                                                    return evar_conv_x(ts, env, i, /* CUMUL */1, t2, t1);
                                                  }),
                                                /* [] */0
                                              ]
                                            ]);
                                }),
                              /* :: */[
                                (function (i) {
                                    return evar_conv_x(ts, env, i, /* CONV */0, b1, b2);
                                  }),
                                /* :: */[
                                  (function (i) {
                                      var b = Evarutil$ReactTemplate.nf_evar(i, b1);
                                      var t = Evarutil$ReactTemplate.nf_evar(i, t1);
                                      var na = Nameops$ReactTemplate.Name[/* pick */16](na1$1, na2$1);
                                      return evar_conv_x(ts, EConstr$ReactTemplate.push_rel(/* LocalDef */Block.__(1, [
                                                        na,
                                                        b,
                                                        t
                                                      ]), env), i, pbty, c$prime1$2, c$prime2$2);
                                    }),
                                  /* :: */[
                                    (function (i) {
                                        return exact_ise_stack2(env, i, (function (param, param$1, param$2, param$3, param$4) {
                                                      return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                                    }), sk1, sk2);
                                      }),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]);
                }
                }(sk1,sk2,na1$1,b1,t1,c$prime1$2,na2$1,b2,t2,c$prime2$2));
                var f2$1 = (function(sk1,csts1,sk2,csts2,v1,v2$1){
                return function f2$1(i) {
                  var out1 = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, csts1, /* tuple */[
                        v1,
                        sk1
                      ]);
                  var out2 = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, csts2, /* tuple */[
                        v2$1,
                        sk2
                      ]);
                  return evar_eqappr_x(/* None */0, ts, env, i, pbty, out1, out2);
                }
                }(sk1,csts1,sk2,csts2,v1,v2$1));
                return ise_try(evd, /* :: */[
                            f1$1,
                            /* :: */[
                              f2$1,
                              /* [] */0
                            ]
                          ]);
              } else {
                exit$4 = 1;
              }
              break;
          case 10 : 
              if (match$18.tag === 16) {
                var p$prime = match$18[0];
                if (Names$ReactTemplate.Constant[/* equal */12](match$17[0][0], Names$ReactTemplate.Projection[/* constant */2](p$prime))) {
                  var res;
                  try {
                    res = /* Some */[EConstr$ReactTemplate.destApp(evd, Retyping$ReactTemplate.expand_projection(env, evd, p$prime, match$18[1], /* [] */0))];
                  }
                  catch (raw_exn){
                    var exn = Js_exn.internalToOCamlException(raw_exn);
                    if (exn[0] === Retyping$ReactTemplate.RetypeError) {
                      res = /* None */0;
                    } else {
                      throw exn;
                    }
                  }
                  if (res) {
                    var match$19 = res[0];
                    _param$1 = /* tuple */[
                      /* tuple */[
                        match$19[0],
                        Reductionops$ReactTemplate.Stack[/* append_app */4](match$19[1], sk2)
                      ],
                      csts2
                    ];
                    _param = /* tuple */[
                      appr1,
                      csts1
                    ];
                    _$staropt$star = /* None */0;
                    continue ;
                    
                  } else {
                    return /* UnifFailure */Block.__(1, [
                              evd,
                              /* NotSameHead */1
                            ]);
                  }
                } else {
                  exit$4 = 1;
                }
              } else {
                exit$4 = 1;
              }
              break;
          case 16 : 
              var c = match$17[1];
              var p = match$17[0];
              switch (match$18.tag | 0) {
                case 10 : 
                    if (Names$ReactTemplate.Constant[/* equal */12](Names$ReactTemplate.Projection[/* constant */2](p), match$18[0][0])) {
                      var res$1;
                      try {
                        res$1 = /* Some */[EConstr$ReactTemplate.destApp(evd, Retyping$ReactTemplate.expand_projection(env, evd, p, c, /* [] */0))];
                      }
                      catch (raw_exn$1){
                        var exn$1 = Js_exn.internalToOCamlException(raw_exn$1);
                        if (exn$1[0] === Retyping$ReactTemplate.RetypeError) {
                          res$1 = /* None */0;
                        } else {
                          throw exn$1;
                        }
                      }
                      if (res$1) {
                        var match$20 = res$1[0];
                        _param$1 = /* tuple */[
                          appr2,
                          csts2
                        ];
                        _param = /* tuple */[
                          /* tuple */[
                            match$20[0],
                            Reductionops$ReactTemplate.Stack[/* append_app */4](match$20[1], sk1)
                          ],
                          csts1
                        ];
                        _$staropt$star = /* None */0;
                        continue ;
                        
                      } else {
                        return /* UnifFailure */Block.__(1, [
                                  evd,
                                  /* NotSameHead */1
                                ]);
                      }
                    } else {
                      exit$4 = 1;
                    }
                    break;
                case 16 : 
                    var c$prime = match$18[1];
                    if (Names$ReactTemplate.Constant[/* equal */12](Names$ReactTemplate.Projection[/* constant */2](p), Names$ReactTemplate.Projection[/* constant */2](match$18[0]))) {
                      var f1$2 = (function(sk1,sk2,c,c$prime){
                      return function f1$2(i) {
                        return ise_and(i, /* :: */[
                                    (function (i) {
                                        return evar_conv_x(ts, env, i, /* CONV */0, c, c$prime);
                                      }),
                                    /* :: */[
                                      (function (i) {
                                          return exact_ise_stack2(env, i, (function (param, param$1, param$2, param$3, param$4) {
                                                        return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                                      }), sk1, sk2);
                                        }),
                                      /* [] */0
                                    ]
                                  ]);
                      }
                      }(sk1,sk2,c,c$prime));
                      var f2$2 = (function(sk1,csts1,sk2,csts2,v1,v2$1){
                      return function f2$2(i) {
                        var out1 = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, csts1, /* tuple */[
                              v1,
                              sk1
                            ]);
                        var out2 = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, csts2, /* tuple */[
                              v2$1,
                              sk2
                            ]);
                        return evar_eqappr_x(/* None */0, ts, env, i, pbty, out1, out2);
                      }
                      }(sk1,csts1,sk2,csts2,v1,v2$1));
                      return ise_try(evd, /* :: */[
                                  f1$2,
                                  /* :: */[
                                    f2$2,
                                    /* [] */0
                                  ]
                                ]);
                    } else {
                      exit$4 = 1;
                    }
                    break;
                default:
                  exit$4 = 1;
              }
              break;
          default:
            exit$4 = 1;
        }
        if (exit$4 === 1) {
          var f1$3 = (function(term1,sk1,term2,sk2){
          return function f1$3(i) {
            var univs = EConstr$ReactTemplate.eq_constr_universes(env, evd, term1, term2);
            if (univs) {
              var univs$1 = univs[0];
              return ise_and(i, /* :: */[
                          (function (i) {
                              try {
                                return /* Success */Block.__(0, [Evd$ReactTemplate.add_universe_constraints(i, univs$1)]);
                              }
                              catch (raw_exn){
                                var exn = Js_exn.internalToOCamlException(raw_exn);
                                if (exn === Evd$ReactTemplate.UniversesDiffer) {
                                  return /* UnifFailure */Block.__(1, [
                                            i,
                                            /* NotSameHead */1
                                          ]);
                                } else if (exn[0] === Univ$ReactTemplate.UniverseInconsistency) {
                                  return /* UnifFailure */Block.__(1, [
                                            i,
                                            /* UnifUnivInconsistency */Block.__(5, [exn[1]])
                                          ]);
                                } else {
                                  throw exn;
                                }
                              }
                            }),
                          /* :: */[
                            (function (i) {
                                return exact_ise_stack2(env, i, (function (param, param$1, param$2, param$3, param$4) {
                                              return evar_conv_x(ts, param, param$1, param$2, param$3, param$4);
                                            }), sk1, sk2);
                              }),
                            /* [] */0
                          ]
                        ]);
            } else {
              return /* UnifFailure */Block.__(1, [
                        i,
                        /* NotSameHead */1
                      ]);
            }
          }
          }(term1,sk1,term2,sk2));
          var f2$3 = (function(appr1,appr2){
          return function f2$3(i) {
            try {
              if (ts[1]) {
                var tmp;
                try {
                  tmp = check_conv_record(env, i, appr1, appr2);
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    tmp = check_conv_record(env, i, appr2, appr1);
                  } else {
                    throw exn;
                  }
                }
                return conv_record(ts, env, i, tmp);
              } else {
                throw Caml_builtin_exceptions.not_found;
              }
            }
            catch (exn$1){
              if (exn$1 === Caml_builtin_exceptions.not_found) {
                return /* UnifFailure */Block.__(1, [
                          i,
                          /* NoCanonicalStructure */2
                        ]);
              } else {
                throw exn$1;
              }
            }
          }
          }(appr1,appr2));
          var f3$2 = (function(rhs_is_already_stuck,term1,sk1,appr1,csts1,term2,sk2,appr2,csts2,v1,v2$1){
          return function f3$2(i) {
            var rhs_is_stuck_and_unnamed = function () {
              var applicative_stack = Reductionops$ReactTemplate.Stack[/* strip_app */12](sk2)[0];
              var _param = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, Reductionops$ReactTemplate.Cst_stack[/* empty */0], /* tuple */[
                      v2$1,
                      applicative_stack
                    ])[0];
              while(true) {
                var param = _param;
                var args = param[1];
                var match = EConstr$ReactTemplate.kind(i, param[0]);
                var exit = 0;
                switch (match.tag | 0) {
                  case 3 : 
                      return Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](args);
                  case 7 : 
                      if (!(
                          args ? /* false */0 : /* true */1
                        )) {
                        throw [
                              Caml_builtin_exceptions.assert_failure,
                              [
                                "evarconv.ml",
                                776,
                                26
                              ]
                            ];
                      }
                      return /* true */1;
                  case 8 : 
                      _param = Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, Reductionops$ReactTemplate.Cst_stack[/* empty */0], /* tuple */[
                              EConstr$ReactTemplate.Vars[/* subst1 */4](match[1], match[3]),
                              args
                            ])[0];
                      continue ;
                      case 5 : 
                  case 9 : 
                  case 13 : 
                      exit = 1;
                      break;
                  case 0 : 
                  case 2 : 
                  case 14 : 
                  case 15 : 
                      return /* true */1;
                  case 16 : 
                      if (Names$ReactTemplate.Projection[/* unfolded */3](match[0])) {
                        return /* true */1;
                      } else {
                        return Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](args);
                      }
                  default:
                    return Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](args);
                }
                if (exit === 1) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "evarconv.ml",
                          782,
                          40
                        ]
                      ];
                }
                
              };
            };
            var rhs_is_already_stuck$1 = rhs_is_already_stuck || rhs_is_stuck_and_unnamed(/* () */0);
            if ((EConstr$ReactTemplate.isLambda(i, term1) || rhs_is_already_stuck$1) && !Reductionops$ReactTemplate.Stack[/* not_purely_applicative */14](sk1)) {
              return evar_eqappr_x(/* Some */[rhs_is_already_stuck$1], ts, env, i, pbty, Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, Reductionops$ReactTemplate.Cst_stack[/* add_cst */3](term1, csts1), /* tuple */[
                              v1,
                              sk1
                            ]), /* tuple */[
                          appr2,
                          csts2
                        ]);
            } else {
              return evar_eqappr_x(/* None */0, ts, env, i, pbty, /* tuple */[
                          appr1,
                          csts1
                        ], Reductionops$ReactTemplate.whd_betaiota_deltazeta_for_iota_state(ts[0], env, i, Reductionops$ReactTemplate.Cst_stack[/* add_cst */3](term2, csts2), /* tuple */[
                              v2$1,
                              sk2
                            ]));
            }
          }
          }(rhs_is_already_stuck,term1,sk1,appr1,csts1,term2,sk2,appr2,csts2,v1,v2$1));
          return ise_try(evd, /* :: */[
                      f1$3,
                      /* :: */[
                        f2$3,
                        /* :: */[
                          f3$2,
                          /* [] */0
                        ]
                      ]
                    ]);
        }
        
      }
    }
  };
}

function conv_record(trs, env, evd, param) {
  var match = param[8];
  var t2 = match[1];
  var n = match[0];
  var c1 = param[7];
  var match$1 = param[6];
  var sk2 = match$1[1];
  var sk1 = match$1[0];
  var match$2 = param[5];
  var us2 = match$2[1];
  var us = match$2[0];
  var match$3 = param[4];
  var params1 = match$3[1];
  var params = match$3[0];
  var bs = param[3];
  var match$4 = param[1];
  var h2 = match$4[1];
  var h = match$4[0];
  var evd$1 = Evd$ReactTemplate.merge_context_set(/* None */0, /* None */0, Evd$ReactTemplate.univ_flexible, evd, param[0]);
  if (Reductionops$ReactTemplate.Stack[/* compare_shape */7](sk1, sk2)) {
    var match$5 = Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (param, b) {
            var m = param[2];
            var ks = param[1];
            var i = param[0];
            if (n ? +(m === n[0]) : /* false */0) {
              var ty = Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, env, i, t2);
              var test = function (i) {
                return evar_conv_x(trs, env, i, /* CUMUL */1, ty, EConstr$ReactTemplate.Vars[/* substl */3](ks, b));
              };
              return /* tuple */[
                      i,
                      /* :: */[
                        t2,
                        ks
                      ],
                      m - 1 | 0,
                      test
                    ];
            } else {
              var dloc = Loc$ReactTemplate.tag(/* None */0, /* InternalHole */0);
              var match = Evarutil$ReactTemplate.new_evar(env, i, /* Some */[dloc], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, EConstr$ReactTemplate.Vars[/* substl */3](ks, b));
              return /* tuple */[
                      match[0],
                      /* :: */[
                        match[1],
                        ks
                      ],
                      m - 1 | 0,
                      param[3]
                    ];
            }
          }), /* tuple */[
          evd$1,
          /* [] */0,
          Curry._1(Util$ReactTemplate.List[/* length */0], bs),
          (function (i) {
              return /* Success */Block.__(0, [i]);
            })
        ], bs);
    var ks = match$5[1];
    var app = EConstr$ReactTemplate.mkApp(/* tuple */[
          param[2],
          Util$ReactTemplate.$$Array[/* rev_of_list */62](ks)
        ]);
    return ise_and(match$5[0], /* :: */[
                (function (i) {
                    return exact_ise_stack2(env, i, (function (env$prime, i$prime, cpb, x1, x) {
                                  return evar_conv_x(trs, env$prime, i$prime, cpb, x1, EConstr$ReactTemplate.Vars[/* substl */3](ks, x));
                                }), params1, params);
                  }),
                /* :: */[
                  (function (i) {
                      return exact_ise_stack2(env, i, (function (env$prime, i$prime, cpb, u1, u) {
                                    return evar_conv_x(trs, env$prime, i$prime, cpb, u1, EConstr$ReactTemplate.Vars[/* substl */3](ks, u));
                                  }), us2, us);
                    }),
                  /* :: */[
                    (function (i) {
                        return evar_conv_x(trs, env, i, /* CONV */0, c1, app);
                      }),
                    /* :: */[
                      (function (i) {
                          return exact_ise_stack2(env, i, (function (param, param$1, param$2, param$3, param$4) {
                                        return evar_conv_x(trs, param, param$1, param$2, param$3, param$4);
                                      }), sk1, sk2);
                        }),
                      /* :: */[
                        match$5[3],
                        /* :: */[
                          (function (i) {
                              return evar_conv_x(trs, env, i, /* CONV */0, h2, Termops$ReactTemplate.decompose_app_vect(i, EConstr$ReactTemplate.Vars[/* substl */3](ks, h))[0]);
                            }),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  } else {
    return /* UnifFailure */Block.__(1, [
              evd$1,
              /* NotSameHead */1
            ]);
  }
}

function eta_constructor(ts, env, evd, sk1, param, sk2, term2) {
  var mib = Environ$ReactTemplate.lookup_mind(param[0][0][0], env);
  var match = mib[/* mind_record */1];
  if (match) {
    var match$1 = match[0];
    if (match$1) {
      if (mib[/* mind_finite */2] === /* BiFinite */2) {
        var pars = mib[/* mind_nparams */5];
        try {
          var l1$prime = Reductionops$ReactTemplate.Stack[/* tail */18](pars, sk1);
          var term = Reductionops$ReactTemplate.Stack[/* zip */21](/* None */0, evd, /* tuple */[
                term2,
                sk2
              ]);
          var l2$prime = Curry._2(Util$ReactTemplate.List[/* map */10], (function (p) {
                  return EConstr$ReactTemplate.mkProj(/* tuple */[
                              Names$ReactTemplate.Projection[/* make */0](p, /* false */0),
                              term
                            ]);
                }), Util$ReactTemplate.$$Array[/* to_list */9](match$1[0][1]));
          var partial_arg_000 = ts[0];
          var partial_arg = /* tuple */[
            partial_arg_000,
            /* false */0
          ];
          return exact_ise_stack2(env, evd, (function (param, param$1, param$2, param$3, param$4) {
                        return evar_conv_x(partial_arg, param, param$1, param$2, param$3, param$4);
                      }), l1$prime, Reductionops$ReactTemplate.Stack[/* append_app_list */11](l2$prime, Reductionops$ReactTemplate.Stack[/* empty */2]));
        }
        catch (raw_exn){
          var exn = Js_exn.internalToOCamlException(raw_exn);
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            return /* UnifFailure */Block.__(1, [
                      evd,
                      /* NotSameHead */1
                    ]);
          } else {
            throw exn;
          }
        }
      } else {
        return /* UnifFailure */Block.__(1, [
                  evd,
                  /* NotSameHead */1
                ]);
      }
    } else {
      return /* UnifFailure */Block.__(1, [
                evd,
                /* NotSameHead */1
              ]);
    }
  } else {
    return /* UnifFailure */Block.__(1, [
              evd,
              /* NotSameHead */1
            ]);
  }
}

function evar_conv_x$1(ts) {
  var partial_arg = /* tuple */[
    ts,
    /* true */1
  ];
  return (function (param, param$1, param$2, param$3, param$4) {
      return evar_conv_x(partial_arg, param, param$1, param$2, param$3, param$4);
    });
}

var evar_conv_x$2;

if (Flags$ReactTemplate.profile) {
  var evar_conv_xkey = CProfile$ReactTemplate.declare_profile("evar_conv_x");
  evar_conv_x$2 = CProfile$ReactTemplate.profile6(evar_conv_xkey, evar_conv_x$1);
} else {
  evar_conv_x$2 = evar_conv_x$1;
}

var match = Hook$ReactTemplate.make(/* Some */[evar_conv_x$2], /* () */0);

var evar_conv_hook_set = match[1];

var evar_conv_hook_get = match[0];

function evar_conv_x$3(ts) {
  return Curry._1(Hook$ReactTemplate.get(evar_conv_hook_get), ts);
}

function set_evar_conv(f) {
  return Hook$ReactTemplate.set(evar_conv_hook_set, f);
}

function first_order_unification(ts, env, evd, param, param$1) {
  var l2 = param$1[1];
  var term2 = param$1[0];
  var l1 = param[1];
  var ev1 = param[0];
  var match = Util$ReactTemplate.$$Array[/* chop */46](l2.length - l1.length | 0, l2);
  var rest2 = match[1];
  var deb2 = match[0];
  return ise_and(evd, /* :: */[
              (function (i) {
                  return ise_array2(i, (function (i) {
                                return Curry._3(evar_conv_x$3(ts), env, i, /* CONV */0);
                              }), rest2, l1);
                }),
              /* :: */[
                (function (i) {
                    var t2 = EConstr$ReactTemplate.mkApp(/* tuple */[
                          term2,
                          deb2
                        ]);
                    if (Evd$ReactTemplate.is_defined(i, ev1[0])) {
                      return Curry._5(evar_conv_x$3(ts), env, i, /* CONV */0, t2, EConstr$ReactTemplate.mkEvar(ev1));
                    } else {
                      return Evarsolve$ReactTemplate.solve_simple_eqn(evar_conv_x$3(ts), /* Some */[/* true */1], env, i, /* tuple */[
                                  /* None */0,
                                  ev1,
                                  t2
                                ]);
                    }
                  }),
                /* [] */0
              ]
            ]);
}

function choose_less_dependent_instance(evk, evd, term, args) {
  var evi = Evd$ReactTemplate.find_undefined(evd, evk);
  var subst = Evarutil$ReactTemplate.make_pure_subst(evi, args);
  var subst$prime = Curry._2(Util$ReactTemplate.List[/* filter */27], (function (param) {
          return EConstr$ReactTemplate.eq_constr(evd, param[1], term);
        }), subst);
  if (subst$prime) {
    return /* Some */[Evd$ReactTemplate.define(evk, Constr$ReactTemplate.mkVar(subst$prime[0][0]), evd)];
  } else {
    return /* None */0;
  }
}

function apply_on_subterm(env, evdref, f, c, t) {
  var applyrec = function (acc, t) {
    var match = acc[1];
    var env = acc[0];
    var eq_constr = function (c1, c2) {
      var match = EConstr$ReactTemplate.eq_constr_universes(env, evdref[0], c1, c2);
      if (match) {
        try {
          Evd$ReactTemplate.add_universe_constraints(evdref[0], match[0]);
          return /* true */1;
        }
        catch (exn){
          if (exn === Evd$ReactTemplate.UniversesDiffer) {
            return /* false */0;
          } else {
            throw exn;
          }
        }
      } else {
        return /* false */0;
      }
    };
    if (eq_constr(match[1], t)) {
      return Curry._1(f, match[0]);
    } else {
      var match$1 = EConstr$ReactTemplate.kind(evdref[0], t);
      if (match$1.tag === 3) {
        var match$2 = match$1[0];
        var evk = match$2[0];
        var ctx = Evd$ReactTemplate.evar_filtered_context(Evd$ReactTemplate.find_undefined(evdref[0], evk));
        var g = function (decl, a) {
          if (Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* is_local_assum */5], decl)) {
            return applyrec(acc, a);
          } else {
            return a;
          }
        };
        return EConstr$ReactTemplate.mkEvar(/* tuple */[
                    evk,
                    Util$ReactTemplate.$$Array[/* of_list */10](Curry._3(Util$ReactTemplate.List[/* map2 */16], g, ctx, Util$ReactTemplate.$$Array[/* to_list */9](match$2[1])))
                  ]);
      } else {
        return Termops$ReactTemplate.map_constr_with_binders_left_to_right(evdref[0], (function (d, param) {
                      var match = param[1];
                      return /* tuple */[
                              EConstr$ReactTemplate.push_rel(d, param[0]),
                              /* tuple */[
                                match[0] + 1 | 0,
                                EConstr$ReactTemplate.Vars[/* lift */0](1, match[1])
                              ]
                            ];
                    }), applyrec, acc, t);
      }
    }
  };
  return applyrec(/* tuple */[
              env,
              /* tuple */[
                0,
                c
              ]
            ], t);
}

function filter_possible_projections(evd, c, ty, ctxt, args) {
  var fv1 = Termops$ReactTemplate.free_rels(evd, EConstr$ReactTemplate.mkApp(/* tuple */[
            c,
            args
          ]));
  var fv2 = Termops$ReactTemplate.collect_vars(evd, EConstr$ReactTemplate.mkApp(/* tuple */[
            c,
            args
          ]));
  var len = args.length;
  var tyvars = Termops$ReactTemplate.collect_vars(evd, ty);
  return Curry._3(Util$ReactTemplate.List[/* map_i */67], (function (i, decl) {
                if (i >= len) {
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        [
                          "evarconv.ml",
                          1084,
                          13
                        ]
                      ];
                }
                var a = args[i];
                var tmp;
                if (decl.tag) {
                  var c$1 = decl[1];
                  tmp = 1 - (EConstr$ReactTemplate.isRel(evd, EConstr$ReactTemplate.of_constr(c$1)) || EConstr$ReactTemplate.isVar(evd, EConstr$ReactTemplate.of_constr(c$1)));
                } else {
                  tmp = /* false */0;
                }
                if (tmp || a === c || EConstr$ReactTemplate.isRel(evd, a) && Curry._2(Int$ReactTemplate.$$Set[/* mem */2], EConstr$ReactTemplate.destRel(evd, a), fv1) || EConstr$ReactTemplate.isVar(evd, a) && Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], EConstr$ReactTemplate.destVar(evd, a), fv2)) {
                  return /* true */1;
                } else {
                  return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl), tyvars);
                }
              }), 0, ctxt);
}

var solve_evars = [(function () {
      return Pervasives.failwith("solve_evars not installed");
    })];

function set_solve_evars(f) {
  solve_evars[0] = f;
  return /* () */0;
}

var TypingFailed = Caml_exceptions.create("Evarconv-ReactTemplate.TypingFailed");

function second_order_matching(ts, env_rhs, evd, param, argoccs, rhs) {
  var args = param[1];
  var evk = param[0];
  try {
    var evi = Evd$ReactTemplate.find_undefined(evd, evk);
    var env_evar = Evd$ReactTemplate.evar_filtered_env(evi);
    var sign = Environ$ReactTemplate.named_context_val(env_evar);
    var ctxt = Evd$ReactTemplate.evar_filtered_context(evi);
    var instance = Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.mkVar, Curry._2(Util$ReactTemplate.List[/* map */10], Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], ctxt));
    var make_subst = function (_param) {
      while(true) {
        var param = _param;
        var match = param[0];
        var exit = 0;
        if (match) {
          var match$1 = param[1];
          if (match$1) {
            var match$2 = param[2];
            if (match$2) {
              var occsl = match$2[1];
              var occs = match$2[0];
              var l = match$1[1];
              var c = match$1[0];
              var ctxt$prime = match[1];
              var decl$prime = match[0];
              if (EConstr$ReactTemplate.isVarId(evd, Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl$prime), c)) {
                if (occs) {
                  return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Cannot force abstraction on identity instance."));
                } else {
                  _param = /* tuple */[
                    ctxt$prime,
                    l,
                    occsl
                  ];
                  continue ;
                  
                }
              } else {
                var id = Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl$prime);
                var t = EConstr$ReactTemplate.of_constr(Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], decl$prime));
                var evs = [/* [] */0];
                var ty = Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, env_rhs, evd, c);
                var filter$prime = filter_possible_projections(evd, c, ty, ctxt, args);
                return /* :: */[
                        /* tuple */[
                          id,
                          t,
                          c,
                          ty,
                          evs,
                          Evd$ReactTemplate.Filter[/* make */9](filter$prime),
                          occs
                        ],
                        make_subst(/* tuple */[
                              ctxt$prime,
                              l,
                              occsl
                            ])
                      ];
              }
            } else {
              exit = 1;
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
        if (exit === 1) {
          if (param[2]) {
            return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Signature or instance are shorter than the occurrences list."));
          } else {
            return /* [] */0;
          }
        }
        
      };
    };
    var set_holes = function (evdref, _rhs, _param) {
      while(true) {
        var param = _param;
        var rhs = _rhs;
        if (param) {
          var subst = param[1];
          var match = param[0];
          var occs = match[6];
          var filter = match[5];
          var evsref = match[4];
          var cty = match[3];
          var id = match[0];
          var set_var = (function(id,cty,evsref,filter,occs,subst){
          return function set_var() {
            if (occs) {
              var match = occs[0];
              if (typeof match === "number" && match === 0) {
                return EConstr$ReactTemplate.mkVar(id);
              } else {
                return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Selection of specific occurrences not supported"));
              }
            } else {
              var evty = set_holes(evdref, cty, subst);
              var instance$1 = Evd$ReactTemplate.Filter[/* filter_list */2](filter, instance);
              var evd = evdref[0];
              var match$1 = Evarutil$ReactTemplate.new_evar_instance(sign, evd, evty, /* None */0, /* Some */[filter], /* None */0, /* None */0, /* None */0, /* None */0, instance$1);
              var ev = match$1[1];
              evdref[0] = match$1[0];
              evsref[0] = /* :: */[
                /* tuple */[
                  EConstr$ReactTemplate.destEvar(evdref[0], ev)[0],
                  evty
                ],
                evsref[0]
              ];
              return ev;
            }
          }
          }(id,cty,evsref,filter,occs,subst));
          _param = subst;
          _rhs = apply_on_subterm(env_rhs, evdref, set_var, match[2], rhs);
          continue ;
          
        } else {
          return rhs;
        }
      };
    };
    var subst = make_subst(/* tuple */[
          ctxt,
          Util$ReactTemplate.$$Array[/* to_list */9](args),
          argoccs
        ]);
    var evdref = [evd];
    var rhs$1 = set_holes(evdref, rhs, subst);
    var evd$1 = evdref[0];
    var evdref$1 = [evd$1];
    var match;
    try {
      var c = Curry._3(solve_evars[0], env_evar, evdref$1, rhs$1);
      match = /* tuple */[
        evdref$1[0],
        c
      ];
    }
    catch (raw_e){
      var e = Js_exn.internalToOCamlException(raw_e);
      if (Pretype_errors$ReactTemplate.precatchable_exception(e)) {
        throw [
              TypingFailed,
              evdref$1[0]
            ];
      } else {
        throw e;
      }
    }
    var rhs$2 = match[1];
    var abstract_free_holes = function (evd, param) {
      if (param) {
        var l = param[1];
        var match = param[0];
        var idty = match[1];
        var id = match[0];
        var _evd = evd;
        var _param = match[4][0];
        while(true) {
          var param$1 = _param;
          var evd$1 = _evd;
          if (param$1) {
            var match$1 = param$1[0];
            var evk$1 = match$1[0];
            var evd$2;
            if (Evd$ReactTemplate.is_undefined(evd$1, evk$1)) {
              var evd$3 = Evd$ReactTemplate.define(evk$1, Constr$ReactTemplate.mkVar(id), evd$1);
              var match$2 = Curry._5(evar_conv_x$3(ts), env_evar, evd$3, /* CUMUL */1, idty, match$1[1]);
              if (match$2.tag) {
                evd$2 = CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Cannot find an instance"));
              } else {
                var match$3 = Evarsolve$ReactTemplate.reconsider_unif_constraints(evar_conv_x$3(ts), match$2[0]);
                evd$2 = match$3.tag ? CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Cannot find an instance")) : match$3[0];
              }
            } else {
              evd$2 = evd$1;
            }
            _param = param$1[1];
            _evd = evd$2;
            continue ;
            
          } else {
            return abstract_free_holes(evd$1, l);
          }
        };
      } else {
        var evd$4;
        try {
          evd$4 = Evarsolve$ReactTemplate.check_evar_instance(evd, evk, rhs$2, evar_conv_x$3(Names$ReactTemplate.full_transparent_state));
        }
        catch (raw_exn){
          var exn = Js_exn.internalToOCamlException(raw_exn);
          if (exn[0] === Evarsolve$ReactTemplate.IllTypedInstance) {
            throw [
                  TypingFailed,
                  evd
                ];
          } else {
            throw exn;
          }
        }
        return Evd$ReactTemplate.define(evk, EConstr$ReactTemplate.Unsafe[/* to_constr */0](rhs$2), evd$4);
      }
    };
    return /* tuple */[
            abstract_free_holes(match[0], subst),
            /* true */1
          ];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === TypingFailed) {
      return /* tuple */[
              exn[1],
              /* false */0
            ];
    } else {
      throw exn;
    }
  }
}

function to_pb(param) {
  return /* tuple */[
          param[0],
          param[1],
          EConstr$ReactTemplate.Unsafe[/* to_constr */0](param[2]),
          EConstr$ReactTemplate.Unsafe[/* to_constr */0](param[3])
        ];
}

function second_order_matching_with_args(_, env, evd, pbty, ev, l, t) {
  var pb = to_pb(/* tuple */[
        pbty,
        env,
        EConstr$ReactTemplate.mkApp(/* tuple */[
              EConstr$ReactTemplate.mkEvar(ev),
              l
            ]),
        t
      ]);
  return /* UnifFailure */Block.__(1, [
            evd,
            /* CannotSolveConstraint */Block.__(6, [
                pb,
                /* ProblemBeyondCapabilities */3
              ])
          ]);
}

function apply_conversion_problem_heuristic(ts, env, evd, pbty, t1, t2) {
  var t1$1 = apprec_nohdbeta(ts, env, evd, Evarutil$ReactTemplate.whd_head_evar(evd, t1));
  var t2$1 = apprec_nohdbeta(ts, env, evd, Evarutil$ReactTemplate.whd_head_evar(evd, t2));
  var appr1;
  try {
    appr1 = EConstr$ReactTemplate.destApp(evd, t1$1);
  }
  catch (exn){
    if (exn === Constr$ReactTemplate.DestKO) {
      appr1 = /* tuple */[
        t1$1,
        /* array */[]
      ];
    } else {
      throw exn;
    }
  }
  var l1 = appr1[1];
  var term1 = appr1[0];
  var appr2;
  try {
    appr2 = EConstr$ReactTemplate.destApp(evd, t2$1);
  }
  catch (exn$1){
    if (exn$1 === Constr$ReactTemplate.DestKO) {
      appr2 = /* tuple */[
        t2$1,
        /* array */[]
      ];
    } else {
      throw exn$1;
    }
  }
  var l2 = appr2[1];
  var term2 = appr2[0];
  if (debug_unification[0]) {
    Feedback$ReactTemplate.msg_notice(/* None */0, Pp$ReactTemplate.v(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Heuristic:"), Pp$ReactTemplate.spc(/* () */0)), Termops$ReactTemplate.print_constr(t1$1)), Pp$ReactTemplate.cut(/* () */0)), Termops$ReactTemplate.print_constr(t2$1)), Pp$ReactTemplate.cut(/* () */0))));
  }
  var app_empty = Util$ReactTemplate.$$Array[/* is_empty */23](l1) && Util$ReactTemplate.$$Array[/* is_empty */23](l2);
  var match = EConstr$ReactTemplate.kind(evd, term1);
  var match$1 = EConstr$ReactTemplate.kind(evd, term2);
  var exit = 0;
  var exit$1 = 0;
  var exit$2 = 0;
  var exit$3 = 0;
  switch (match.tag | 0) {
    case 0 : 
    case 1 : 
        exit$3 = 4;
        break;
    case 3 : 
        var ev1 = match[0];
        var args1 = ev1[1];
        var evk1 = ev1[0];
        var exit$4 = 0;
        var exit$5 = 0;
        switch (match$1.tag | 0) {
          case 0 : 
          case 1 : 
              exit$5 = 6;
              break;
          case 3 : 
              var ev2 = match$1[0];
              if (Evar$ReactTemplate.equal(evk1, ev2[0])) {
                var f = function (env, evd, pbty, x, y) {
                  return Curry._4(Reductionops$ReactTemplate.is_fconv(/* Some */[ts], pbty), env, evd, x, y);
                };
                return /* Success */Block.__(0, [Evarsolve$ReactTemplate.solve_refl(/* Some */[/* true */1], f, env, evd, position_problem(/* true */1, pbty), evk1, args1, ev2[1])]);
              } else if (app_empty) {
                var partial_arg = /* Some */[/* true */1];
                var partial_arg$1 = evar_conv_x$3(ts);
                return /* Success */Block.__(0, [Evarsolve$ReactTemplate.solve_evar_evar(/* Some */[/* true */1], (function (param, param$1, param$2, param$3, param$4) {
                                  return Evarsolve$ReactTemplate.evar_define(partial_arg$1, partial_arg, param, param$1, param$2, param$3, param$4);
                                }), evar_conv_x$3(ts), env, evd, position_problem(/* true */1, pbty), ev1, ev2)]);
              } else {
                exit$4 = 5;
              }
              break;
          default:
            exit$4 = 5;
        }
        if (exit$5 === 6) {
          if (app_empty && Curry._2(Util$ReactTemplate.List[/* for_all */20], (function (a) {
                    if (EConstr$ReactTemplate.eq_constr(evd, a, term2)) {
                      return /* true */1;
                    } else {
                      return EConstr$ReactTemplate.isEvar(evd, a);
                    }
                  }), Evarsolve$ReactTemplate.remove_instance_local_defs(evd, evk1, args1))) {
            var match$2 = choose_less_dependent_instance(evk1, evd, term2, args1);
            if (match$2) {
              return /* Success */Block.__(0, [match$2[0]]);
            } else {
              return /* UnifFailure */Block.__(1, [
                        evd,
                        /* CannotSolveConstraint */Block.__(6, [
                            to_pb(/* tuple */[
                                  pbty,
                                  env,
                                  t1$1,
                                  t2$1
                                ]),
                            /* ProblemBeyondCapabilities */3
                          ])
                      ]);
            }
          } else {
            exit$4 = 5;
          }
        }
        if (exit$4 === 5) {
          if (l1.length <= l2.length) {
            return ise_try(evd, /* :: */[
                        (function (evd) {
                            return first_order_unification(ts, env, evd, /* tuple */[
                                        ev1,
                                        l1
                                      ], appr2);
                          }),
                        /* :: */[
                          (function (evd) {
                              return second_order_matching_with_args(ts, env, evd, pbty, ev1, l1, t2$1);
                            }),
                          /* [] */0
                        ]
                      ]);
          } else {
            exit$2 = 3;
          }
        }
        break;
    default:
      exit$2 = 3;
  }
  if (exit$3 === 4) {
    if (match$1.tag === 3) {
      var match$3 = match$1[0];
      var args2 = match$3[1];
      var evk2 = match$3[0];
      if (app_empty && Curry._2(Util$ReactTemplate.List[/* for_all */20], (function (a) {
                if (EConstr$ReactTemplate.eq_constr(evd, a, term1)) {
                  return /* true */1;
                } else {
                  return EConstr$ReactTemplate.isEvar(evd, a);
                }
              }), Evarsolve$ReactTemplate.remove_instance_local_defs(evd, evk2, args2))) {
        var match$4 = choose_less_dependent_instance(evk2, evd, term1, args2);
        if (match$4) {
          return /* Success */Block.__(0, [match$4[0]]);
        } else {
          return /* UnifFailure */Block.__(1, [
                    evd,
                    /* CannotSolveConstraint */Block.__(6, [
                        to_pb(/* tuple */[
                              pbty,
                              env,
                              t1$1,
                              t2$1
                            ]),
                        /* ProblemBeyondCapabilities */3
                      ])
                  ]);
        }
      } else {
        exit$2 = 3;
      }
    } else {
      exit = 1;
    }
  }
  if (exit$2 === 3) {
    if (match$1.tag === 3) {
      if (l2.length <= l1.length) {
        var ev2$1 = match$1[0];
        return ise_try(evd, /* :: */[
                    (function (evd) {
                        return first_order_unification(ts, env, evd, /* tuple */[
                                    ev2$1,
                                    l2
                                  ], appr1);
                      }),
                    /* :: */[
                      (function (evd) {
                          return second_order_matching_with_args(ts, env, evd, pbty, ev2$1, l2, t1$1);
                        }),
                      /* [] */0
                    ]
                  ]);
      } else {
        exit$1 = 2;
      }
    } else {
      exit$1 = 2;
    }
  }
  if (exit$1 === 2) {
    if (match.tag === 3) {
      return second_order_matching_with_args(ts, env, evd, pbty, match[0], l1, t2$1);
    } else if (match$1.tag === 3) {
      return second_order_matching_with_args(ts, env, evd, pbty, match$1[0], l2, t1$1);
    } else {
      exit = 1;
    }
  }
  if (exit === 1) {
    return Curry._5(evar_conv_x$3(ts), env, evd, pbty, t1$1, t2$1);
  }
  
}

function error_cannot_unify(env, evd, pb, reason, t1, t2) {
  return Pretype_errors$ReactTemplate.error_cannot_unify(Evd$ReactTemplate.loc_of_conv_pb(evd, pb), env, evd, reason, /* tuple */[
              t1,
              t2
            ]);
}

function check_problems_are_solved(_, evd) {
  var match = Evd$ReactTemplate.extract_all_conv_pbs(evd)[1];
  if (match) {
    var pb = match[0];
    return error_cannot_unify(pb[1], evd, pb, /* None */0, EConstr$ReactTemplate.of_constr(pb[2]), EConstr$ReactTemplate.of_constr(pb[3]));
  } else {
    return /* () */0;
  }
}

var MaxUndefined = Caml_exceptions.create("Evarconv-ReactTemplate.MaxUndefined");

function max_undefined_with_candidates(evd) {
  var fold = function (evk, evi, _) {
    var match = evi[/* evar_candidates */5];
    if (match) {
      throw [
            MaxUndefined,
            /* tuple */[
              evk,
              evi,
              match[0]
            ]
          ];
    } else {
      return /* () */0;
    }
  };
  try {
    Curry._3(Evar$ReactTemplate.$$Map[/* fold_right */30], fold, Evd$ReactTemplate.undefined_map(evd), /* () */0);
    return /* None */0;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === MaxUndefined) {
      return /* Some */[exn[1]];
    } else {
      throw exn;
    }
  }
}

function solve_unconstrained_evars_with_candidates(ts, _evd) {
  while(true) {
    var evd = _evd;
    var match = max_undefined_with_candidates(evd);
    if (match) {
      var match$1 = match[0];
      var evk = match$1[0];
      var aux = (function(evd,evk){
      return function aux(_param) {
        while(true) {
          var param = _param;
          if (param) {
            var l = param[1];
            var a = param[0];
            try {
              var conv_algo = evar_conv_x$3(ts);
              var evd$1 = Evarsolve$ReactTemplate.check_evar_instance(evd, evk, EConstr$ReactTemplate.of_constr(a), conv_algo);
              var evd$2 = Evd$ReactTemplate.define(evk, a, evd$1);
              var match = Evarsolve$ReactTemplate.reconsider_unif_constraints(conv_algo, evd$2);
              if (match.tag) {
                return aux(l);
              } else {
                return solve_unconstrained_evars_with_candidates(ts, match[0]);
              }
            }
            catch (raw_e){
              var e = Js_exn.internalToOCamlException(raw_e);
              if (e[0] === Evarsolve$ReactTemplate.IllTypedInstance) {
                _param = l;
                continue ;
                
              } else if (Pretype_errors$ReactTemplate.precatchable_exception(e)) {
                _param = l;
                continue ;
                
              } else {
                throw e;
              }
            }
          } else {
            return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Unsolvable existential variables."));
          }
        };
      }
      }(evd,evk));
      var evd$1 = aux(Curry._1(Util$ReactTemplate.List[/* rev */4], match$1[2]));
      _evd = evd$1;
      continue ;
      
    } else {
      return evd;
    }
  };
}

function solve_unif_constraints_with_heuristics(env, $staropt$star, evd) {
  var ts = $staropt$star ? $staropt$star[0] : Conv_oracle$ReactTemplate.get_transp_state(Environ$ReactTemplate.oracle(env));
  var evd$1 = solve_unconstrained_evars_with_candidates(ts, evd);
  var aux = function (_evd, _pbs, _progress, _stuck) {
    while(true) {
      var stuck = _stuck;
      var progress = _progress;
      var pbs = _pbs;
      var evd = _evd;
      if (pbs) {
        var pbs$1 = pbs[1];
        var pb = pbs[0];
        var env = pb[1];
        var t1 = EConstr$ReactTemplate.of_constr(pb[2]);
        var t2 = EConstr$ReactTemplate.of_constr(pb[3]);
        var match = apply_conversion_problem_heuristic(ts, env, evd, pb[0], t1, t2);
        if (match.tag) {
          return error_cannot_unify(env, match[0], pb, /* Some */[match[1]], t1, t2);
        } else {
          var match$1 = Evd$ReactTemplate.extract_all_conv_pbs(match[0]);
          if (match$1[1]) {
            _stuck = /* :: */[
              pb,
              stuck
            ];
            _pbs = pbs$1;
            continue ;
            
          } else {
            _progress = /* true */1;
            _pbs = pbs$1;
            _evd = match$1[0];
            continue ;
            
          }
        }
      } else if (progress) {
        _stuck = /* [] */0;
        _progress = /* false */0;
        _pbs = stuck;
        continue ;
        
      } else if (stuck) {
        var pb$1 = stuck[0];
        var t1$1 = EConstr$ReactTemplate.of_constr(pb$1[2]);
        var t2$1 = EConstr$ReactTemplate.of_constr(pb$1[3]);
        return error_cannot_unify(pb$1[1], evd, pb$1, /* None */0, t1$1, t2$1);
      } else {
        return evd;
      }
    };
  };
  var match = Evd$ReactTemplate.extract_all_conv_pbs(evd$1);
  var heuristic_solved_evd = aux(match[0], match[1], /* false */0, /* [] */0);
  check_problems_are_solved(env, heuristic_solved_evd);
  var evd$2 = heuristic_solved_evd;
  return Evd$ReactTemplate.fold_undefined((function (evk, ev_info, evd$prime) {
                var match = ev_info[/* evar_source */4];
                var match$1 = match[1];
                if (typeof match$1 === "number") {
                  if (match$1 >= 2) {
                    var match$2 = coq_unit_judge(/* () */0);
                    var evd$prime$1 = Evd$ReactTemplate.merge_context_set(match[0], /* None */0, Evd$ReactTemplate.univ_flexible_alg, evd$prime, match$2[1]);
                    var ty = Environ$ReactTemplate.j_type(match$2[0]);
                    var conv_algo = evar_conv_x$3(Names$ReactTemplate.full_transparent_state);
                    var evd$prime$2 = Evarsolve$ReactTemplate.check_evar_instance(evd$prime$1, evk, ty, conv_algo);
                    return Evd$ReactTemplate.define(evk, EConstr$ReactTemplate.Unsafe[/* to_constr */0](ty), evd$prime$2);
                  } else {
                    return evd$prime;
                  }
                } else {
                  return evd$prime;
                }
              }), evd$2, evd$2);
}

var UnableToUnify = Caml_exceptions.create("Evarconv-ReactTemplate.UnableToUnify");

function the_conv_x(env, $staropt$star, t1, t2, evd) {
  var ts = $staropt$star ? $staropt$star[0] : Names$ReactTemplate.full_transparent_state;
  var match = Curry._5(evar_conv_x$3(ts), env, evd, /* CONV */0, t1, t2);
  if (match.tag) {
    throw [
          UnableToUnify,
          match[0],
          match[1]
        ];
  } else {
    return match[0];
  }
}

function the_conv_x_leq(env, $staropt$star, t1, t2, evd) {
  var ts = $staropt$star ? $staropt$star[0] : Names$ReactTemplate.full_transparent_state;
  var match = Curry._5(evar_conv_x$3(ts), env, evd, /* CUMUL */1, t1, t2);
  if (match.tag) {
    throw [
          UnableToUnify,
          match[0],
          match[1]
        ];
  } else {
    return match[0];
  }
}

function e_conv(env, $staropt$star, evdref, t1, t2) {
  var ts = $staropt$star ? $staropt$star[0] : Names$ReactTemplate.full_transparent_state;
  var match = Curry._5(evar_conv_x$3(ts), env, evdref[0], /* CONV */0, t1, t2);
  if (match.tag) {
    return /* false */0;
  } else {
    evdref[0] = match[0];
    return /* true */1;
  }
}

function e_cumul(env, $staropt$star, evdref, t1, t2) {
  var ts = $staropt$star ? $staropt$star[0] : Names$ReactTemplate.full_transparent_state;
  var match = Curry._5(evar_conv_x$3(ts), env, evdref[0], /* CUMUL */1, t1, t2);
  if (match.tag) {
    return /* false */0;
  } else {
    evdref[0] = match[0];
    return /* true */1;
  }
}

var consider_remaining_unif_problems = solve_unif_constraints_with_heuristics;

exports.UnableToUnify = UnableToUnify;
exports.the_conv_x = the_conv_x;
exports.the_conv_x_leq = the_conv_x_leq;
exports.e_conv = e_conv;
exports.e_cumul = e_cumul;
exports.solve_unif_constraints_with_heuristics = solve_unif_constraints_with_heuristics;
exports.consider_remaining_unif_problems = consider_remaining_unif_problems;
exports.check_problems_are_solved = check_problems_are_solved;
exports.check_conv_record = check_conv_record;
exports.second_order_matching = second_order_matching;
exports.set_solve_evars = set_solve_evars;
exports.set_evar_conv = set_evar_conv;
exports.evar_conv_x = evar_conv_x$3;
exports.evar_eqappr_x = evar_eqappr_x;
exports.coq_unit_judge = coq_unit_judge;
/*  Not a pure module */
