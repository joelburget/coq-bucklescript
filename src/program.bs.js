// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Util$ReactTemplate = require("./util.bs.js");
var Coqlib$ReactTemplate = require("../library/coqlib.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var EConstr$ReactTemplate = require("./eConstr.bs.js");
var Evarutil$ReactTemplate = require("./evarutil.bs.js");
var Goptions$ReactTemplate = require("./goptions.bs.js");

function papp(evdref, r, args) {
  var gr = Util$ReactTemplate.delayed_force(r);
  return EConstr$ReactTemplate.mkApp(/* tuple */[
              Evarutil$ReactTemplate.e_new_global(evdref, gr),
              args
            ]);
}

var partial_arg = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sig_typ() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg, "sig");
}

var partial_arg$1 = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sig_intro() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$1, "exist");
}

var partial_arg$2 = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sig_proj1() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$2, "proj1_sig");
}

var partial_arg$3 = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sigT_typ() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$3, "sigT");
}

var partial_arg$4 = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sigT_intro() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$4, "existT");
}

var partial_arg$5 = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sigT_proj1() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$5, "projT1");
}

var partial_arg$6 = /* :: */[
  "Init",
  /* :: */[
    "Specif",
    /* [] */0
  ]
];

function sigT_proj2() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$6, "projT2");
}

var partial_arg$7 = /* :: */[
  "Init",
  /* :: */[
    "Datatypes",
    /* [] */0
  ]
];

function prod_typ() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$7, "prod");
}

var partial_arg$8 = /* :: */[
  "Init",
  /* :: */[
    "Datatypes",
    /* [] */0
  ]
];

function prod_intro() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$8, "pair");
}

var partial_arg$9 = /* :: */[
  "Init",
  /* :: */[
    "Datatypes",
    /* [] */0
  ]
];

function prod_proj1() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$9, "fst");
}

var partial_arg$10 = /* :: */[
  "Init",
  /* :: */[
    "Datatypes",
    /* [] */0
  ]
];

function prod_proj2() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$10, "snd");
}

var partial_arg$11 = /* :: */[
  "Init",
  /* :: */[
    "Logic",
    /* [] */0
  ]
];

function coq_eq_ind() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$11, "eq");
}

var partial_arg$12 = /* :: */[
  "Init",
  /* :: */[
    "Logic",
    /* [] */0
  ]
];

function coq_eq_refl() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$12, "eq_refl");
}

var partial_arg$13 = /* :: */[
  "Init",
  /* :: */[
    "Logic",
    /* [] */0
  ]
];

function coq_eq_refl_ref() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$13, "eq_refl");
}

var partial_arg$14 = /* :: */[
  "Init",
  /* :: */[
    "Logic",
    /* [] */0
  ]
];

function coq_eq_rect() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$14, "eq_rect");
}

var partial_arg$15 = /* :: */[
  "Logic",
  /* :: */[
    "JMeq",
    /* [] */0
  ]
];

function coq_JMeq_ind() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$15, "JMeq");
}

var partial_arg$16 = /* :: */[
  "Logic",
  /* :: */[
    "JMeq",
    /* [] */0
  ]
];

function coq_JMeq_refl() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$16, "JMeq_refl");
}

var partial_arg$17 = /* :: */[
  "Init",
  /* :: */[
    "Logic",
    /* [] */0
  ]
];

function coq_not() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$17, "not");
}

var partial_arg$18 = /* :: */[
  "Init",
  /* :: */[
    "Logic",
    /* [] */0
  ]
];

function coq_and() {
  return Coqlib$ReactTemplate.coq_reference("Program", partial_arg$18, "and");
}

function mk_coq_not(sigma, x) {
  var match = Evarutil$ReactTemplate.new_global(sigma, Curry._1(coq_not, /* () */0));
  return /* tuple */[
          match[0],
          EConstr$ReactTemplate.mkApp(/* tuple */[
                match[1],
                /* array */[x]
              ])
        ];
}

function unsafe_fold_right(f, param) {
  if (param) {
    return Curry._3(Util$ReactTemplate.List[/* fold_right */14], f, param[1], param[0]);
  } else {
    return CErrors$ReactTemplate.invalid_arg(/* None */0, "unsafe_fold_right");
  }
}

function mk_coq_and(sigma, l) {
  var match = Evarutil$ReactTemplate.new_global(sigma, Curry._1(coq_and, /* () */0));
  var and_typ = match[1];
  return /* tuple */[
          match[0],
          unsafe_fold_right((function (c, conj) {
                  return EConstr$ReactTemplate.mkApp(/* tuple */[
                              and_typ,
                              /* array */[
                                c,
                                conj
                              ]
                            ]);
                }), l)
        ];
}

var proofs_transparency = [/* true */1];

var program_cases = [/* true */1];

var program_generalized_coercion = [/* true */1];

function set_proofs_transparency(param) {
  proofs_transparency[0] = param;
  return /* () */0;
}

function get_proofs_transparency() {
  return proofs_transparency[0];
}

function is_program_generalized_coercion() {
  return program_generalized_coercion[0];
}

function is_program_cases() {
  return program_cases[0];
}

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"preferred transparency of Program obligations",
      /* optkey : :: */[
        "Transparent",
        /* :: */[
          "Obligations",
          /* [] */0
        ]
      ],
      /* optread */get_proofs_transparency,
      /* optwrite */set_proofs_transparency
    ]);

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"program cases",
      /* optkey : :: */[
        "Program",
        /* :: */[
          "Cases",
          /* [] */0
        ]
      ],
      /* optread */(function () {
          return program_cases[0];
        }),
      /* optwrite */(function (param) {
          program_cases[0] = param;
          return /* () */0;
        })
    ]);

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"program generalized coercion",
      /* optkey : :: */[
        "Program",
        /* :: */[
          "Generalized",
          /* :: */[
            "Coercion",
            /* [] */0
          ]
        ]
      ],
      /* optread */(function () {
          return program_generalized_coercion[0];
        }),
      /* optwrite */(function (param) {
          program_generalized_coercion[0] = param;
          return /* () */0;
        })
    ]);

exports.sig_typ = sig_typ;
exports.sig_intro = sig_intro;
exports.sig_proj1 = sig_proj1;
exports.sigT_typ = sigT_typ;
exports.sigT_intro = sigT_intro;
exports.sigT_proj1 = sigT_proj1;
exports.sigT_proj2 = sigT_proj2;
exports.prod_typ = prod_typ;
exports.prod_intro = prod_intro;
exports.prod_proj1 = prod_proj1;
exports.prod_proj2 = prod_proj2;
exports.coq_eq_ind = coq_eq_ind;
exports.coq_eq_refl = coq_eq_refl;
exports.coq_eq_refl_ref = coq_eq_refl_ref;
exports.coq_eq_rect = coq_eq_rect;
exports.coq_JMeq_ind = coq_JMeq_ind;
exports.coq_JMeq_refl = coq_JMeq_refl;
exports.mk_coq_and = mk_coq_and;
exports.mk_coq_not = mk_coq_not;
exports.papp = papp;
exports.get_proofs_transparency = get_proofs_transparency;
exports.is_program_cases = is_program_cases;
exports.is_program_generalized_coercion = is_program_generalized_coercion;
/*  Not a pure module */
