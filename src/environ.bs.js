// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Hook$ReactTemplate = require("./hook.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Vars$ReactTemplate = require("./vars.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var UGraph$ReactTemplate = require("./uGraph.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Clambda$ReactTemplate = require("./clambda.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var Pre_env$ReactTemplate = require("./pre_env.bs.js");
var Cbytegen$ReactTemplate = require("./cbytegen.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Mod_subst$ReactTemplate = require("./mod_subst.bs.js");
var Declareops$ReactTemplate = require("./declareops.bs.js");
var Retroknowledge$ReactTemplate = require("./retroknowledge.bs.js");

function pre_env(env) {
  return env;
}

function env_of_pre_env(env) {
  return env;
}

function oracle(env) {
  return env[/* env_typing_flags */5][/* conv_oracle */2];
}

function set_oracle(env, o) {
  var init = env[/* env_typing_flags */5];
  var env_typing_flags_000 = /* check_guarded */init[/* check_guarded */0];
  var env_typing_flags_001 = /* check_universes */init[/* check_universes */1];
  var env_typing_flags = /* record */[
    env_typing_flags_000,
    env_typing_flags_001,
    /* conv_oracle */o
  ];
  var newrecord = env.slice();
  newrecord[/* env_typing_flags */5] = env_typing_flags;
  return newrecord;
}

function engagement(env) {
  return env[/* env_stratification */4][/* env_engagement */1];
}

function typing_flags(env) {
  return env[/* env_typing_flags */5];
}

function is_impredicative_set(env) {
  var match = env[/* env_stratification */4][/* env_engagement */1];
  if (match !== 0) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function type_in_type(env) {
  return 1 - env[/* env_typing_flags */5][/* check_universes */1];
}

function deactivated_guard(env) {
  return 1 - env[/* env_typing_flags */5][/* check_guarded */0];
}

function universes(env) {
  return env[/* env_stratification */4][/* env_universes */0];
}

function named_context(env) {
  return env[/* env_named_context */1][/* env_named_ctx */0];
}

function named_context_val(env) {
  return env[/* env_named_context */1];
}

function rel_context(env) {
  return env[/* env_rel_context */2][/* env_rel_ctx */0];
}

function opaque_tables(env) {
  return env[/* indirect_pterms */7];
}

function set_opaque_tables(env, indirect_pterms) {
  var newrecord = env.slice();
  newrecord[/* indirect_pterms */7] = indirect_pterms;
  return newrecord;
}

function empty_context(env) {
  var match = env[/* env_rel_context */2][/* env_rel_ctx */0];
  var match$1 = env[/* env_named_context */1][/* env_named_ctx */0];
  if (match || match$1) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function evaluable_rel(n, env) {
  return Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* is_local_def */6], Pre_env$ReactTemplate.lookup_rel(n, env));
}

function nb_rel(env) {
  return env[/* env_nb_rel */3];
}

function push_rel_context(ctxt, x) {
  return Context$ReactTemplate.Rel[/* fold_outside */10](Pre_env$ReactTemplate.push_rel, ctxt, x);
}

function push_rec_types(param, env) {
  var ctxt = Util$ReactTemplate.$$Array[/* map2_i */50]((function (i, na, t) {
          return /* LocalAssum */Block.__(0, [
                    na,
                    Vars$ReactTemplate.lift(i)(t)
                  ]);
        }), param[0], param[1]);
  return Util$ReactTemplate.$$Array[/* fold_left */15]((function (e, assum) {
                return Pre_env$ReactTemplate.push_rel(assum, e);
              }), env, ctxt);
}

function fold_rel_context(f, env, init) {
  var fold_right = function (env) {
    var match = Pre_env$ReactTemplate.match_rel_context_val(env[/* env_rel_context */2]);
    if (match) {
      var match$1 = match[0];
      var newrecord = env.slice();
      newrecord[/* env_rel_context */2] = match$1[2];
      newrecord[/* env_nb_rel */3] = env[/* env_nb_rel */3] - 1 | 0;
      return Curry._3(f, newrecord, match$1[0], fold_right(newrecord));
    } else {
      return init;
    }
  };
  return fold_right(env);
}

function named_context_of_val(c) {
  return c[/* env_named_ctx */0];
}

function ids_of_named_context_val(c) {
  return Curry._1(Names$ReactTemplate.Id[/* Map */10][/* domain */27], c[/* env_named_map */1]);
}

var empty_named_context = Context$ReactTemplate.Named[/* empty */1];

var push_named_context = Curry._1(Util$ReactTemplate.List[/* fold_right */14], Pre_env$ReactTemplate.push_named);

function val_of_named_context(ctxt) {
  return Curry._3(Util$ReactTemplate.List[/* fold_right */14], Pre_env$ReactTemplate.push_named_context_val, ctxt, Pre_env$ReactTemplate.empty_named_context_val);
}

function lookup_named_val(id, ctxt) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, ctxt[/* env_named_map */1])[0];
}

function eq_named_context_val(c1, c2) {
  if (c1 === c2) {
    return /* true */1;
  } else {
    return Curry._1(Context$ReactTemplate.Named[/* equal */5](Constr$ReactTemplate.equal, c1[/* env_named_ctx */0]), c2[/* env_named_ctx */0]);
  }
}

function named_type(id, env) {
  return Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], Pre_env$ReactTemplate.lookup_named(id, env));
}

function named_body(id, env) {
  return Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_value */1], Pre_env$ReactTemplate.lookup_named(id, env));
}

function evaluable_named(id, env) {
  var match = named_body(id, env);
  if (match) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function reset_with_named_context(ctxt, env) {
  return /* record */[
          /* env_globals */env[/* env_globals */0],
          /* env_named_context */ctxt,
          /* env_rel_context */Pre_env$ReactTemplate.empty_rel_context_val,
          /* env_nb_rel */0,
          /* env_stratification */env[/* env_stratification */4],
          /* env_typing_flags */env[/* env_typing_flags */5],
          /* retroknowledge */env[/* retroknowledge */6],
          /* indirect_pterms */env[/* indirect_pterms */7]
        ];
}

function reset_context(param) {
  return reset_with_named_context(Pre_env$ReactTemplate.empty_named_context_val, param);
}

function pop_rel_context(n, env) {
  var skip = function (_n, _ctx) {
    while(true) {
      var ctx = _ctx;
      var n = _n;
      if (n) {
        var match = Pre_env$ReactTemplate.match_rel_context_val(ctx);
        if (match) {
          _ctx = match[0][2];
          _n = n - 1 | 0;
          continue ;
          
        } else {
          return CErrors$ReactTemplate.invalid_arg(/* None */0, "List.skipn");
        }
      } else {
        return ctx;
      }
    };
  };
  var ctxt = env[/* env_rel_context */2];
  var newrecord = env.slice();
  newrecord[/* env_rel_context */2] = skip(n, ctxt);
  newrecord[/* env_nb_rel */3] = env[/* env_nb_rel */3] - n | 0;
  return newrecord;
}

function fold_named_context(f, env, init) {
  var fold_right = function (env) {
    var match = Pre_env$ReactTemplate.match_named_context_val(env[/* env_named_context */1]);
    if (match) {
      var match$1 = match[0];
      var env$1 = reset_with_named_context(match$1[2], env);
      return Curry._3(f, env$1, match$1[0], fold_right(env$1));
    } else {
      return init;
    }
  };
  return fold_right(env);
}

function fold_named_context_reverse(f, init, env) {
  return Curry._1(Context$ReactTemplate.Named[/* fold_inside */8](f, init), env[/* env_named_context */1][/* env_named_ctx */0]);
}

function map_universes(f, env) {
  var s = env[/* env_stratification */4];
  var newrecord = env.slice();
  newrecord[/* env_stratification */4] = /* record */[
    /* env_universes */Curry._1(f, s[/* env_universes */0]),
    /* env_engagement */s[/* env_engagement */1]
  ];
  return newrecord;
}

function add_constraints(c, env) {
  if (Curry._1(Univ$ReactTemplate.Constraint[/* is_empty */1], c)) {
    return env;
  } else {
    return map_universes((function (param) {
                  return UGraph$ReactTemplate.merge_constraints(c, param);
                }), env);
  }
}

function check_constraints(c, env) {
  return UGraph$ReactTemplate.check_constraints(c, env[/* env_stratification */4][/* env_universes */0]);
}

function push_constraints_to_env(param, env) {
  return add_constraints(param[1], env);
}

function push_context($staropt$star, ctx, env) {
  var strict = $staropt$star ? $staropt$star[0] : /* false */0;
  return map_universes((function (param) {
                var strict$1 = strict;
                var ctx$1 = ctx;
                var g = param;
                var g$1 = Util$ReactTemplate.$$Array[/* fold_left */15]((function (g, v) {
                        try {
                          return UGraph$ReactTemplate.add_universe(v, strict$1, g);
                        }
                        catch (exn){
                          if (exn === UGraph$ReactTemplate.AlreadyDeclared) {
                            return g;
                          } else {
                            throw exn;
                          }
                        }
                      }), g, Univ$ReactTemplate.Instance[/* to_array */3](Univ$ReactTemplate.UContext[/* instance */3](ctx$1)));
                return UGraph$ReactTemplate.merge_constraints(Univ$ReactTemplate.UContext[/* constraints */4](ctx$1), g$1);
              }), env);
}

function push_context_set($staropt$star, ctx, env) {
  var strict = $staropt$star ? $staropt$star[0] : /* false */0;
  return map_universes((function (param) {
                var strict$1 = strict;
                var ctx$1 = ctx;
                var g = param;
                var g$1 = Curry._3(Univ$ReactTemplate.LSet[/* fold */13], (function (v, g) {
                        try {
                          return UGraph$ReactTemplate.add_universe(v, strict$1, g);
                        }
                        catch (exn){
                          if (exn === UGraph$ReactTemplate.AlreadyDeclared) {
                            return g;
                          } else {
                            throw exn;
                          }
                        }
                      }), Univ$ReactTemplate.ContextSet[/* levels */16](ctx$1), g);
                return UGraph$ReactTemplate.merge_constraints(Univ$ReactTemplate.ContextSet[/* constraints */15](ctx$1), g$1);
              }), env);
}

function set_engagement(c, env) {
  var newrecord = env.slice();
  var init = env[/* env_stratification */4];
  newrecord[/* env_stratification */4] = /* record */[
    /* env_universes */init[/* env_universes */0],
    /* env_engagement */c
  ];
  return newrecord;
}

function set_typing_flags(c, env) {
  var newrecord = env.slice();
  newrecord[/* env_typing_flags */5] = c;
  return newrecord;
}

function add_constant_key(kn, cb, linkinfo, env) {
  var new_constants = Curry._3(Names$ReactTemplate.Cmap_env[/* add */3], kn, /* tuple */[
        cb,
        /* tuple */[
          [linkinfo],
          [/* None */0]
        ]
      ], env[/* env_globals */0][/* env_constants */0]);
  var init = env[/* env_globals */0];
  var new_globals_001 = /* env_inductives */init[/* env_inductives */1];
  var new_globals_002 = /* env_modules */init[/* env_modules */2];
  var new_globals_003 = /* env_modtypes */init[/* env_modtypes */3];
  var new_globals = /* record */[
    /* env_constants */new_constants,
    new_globals_001,
    new_globals_002,
    new_globals_003
  ];
  var newrecord = env.slice();
  newrecord[/* env_globals */0] = new_globals;
  return newrecord;
}

function add_constant(kn, cb, env) {
  return add_constant_key(kn, cb, /* NotLinked */0, env);
}

function constraints_of(cb, u) {
  var match = cb[/* const_universes */4];
  if (match.tag) {
    return Univ$ReactTemplate.AUContext[/* instantiate */6](u, match[0]);
  } else {
    return Univ$ReactTemplate.Constraint[/* empty */0];
  }
}

function constant_type(env, param) {
  var u = param[1];
  var cb = Pre_env$ReactTemplate.lookup_constant(param[0], env);
  var match = cb[/* const_universes */4];
  if (match.tag) {
    var csts = constraints_of(cb, u);
    return /* tuple */[
            Vars$ReactTemplate.subst_instance_constr(u, cb[/* const_type */2]),
            csts
          ];
  } else {
    return /* tuple */[
            cb[/* const_type */2],
            Univ$ReactTemplate.Constraint[/* empty */0]
          ];
  }
}

function constant_context(env, kn) {
  var cb = Pre_env$ReactTemplate.lookup_constant(kn, env);
  var match = cb[/* const_universes */4];
  if (match.tag) {
    return match[0];
  } else {
    return Univ$ReactTemplate.AUContext[/* empty */1];
  }
}

var NotEvaluableConst = Caml_exceptions.create("Environ-ReactTemplate.NotEvaluableConst");

function constant_value_and_type(env, param) {
  var u = param[1];
  var cb = Pre_env$ReactTemplate.lookup_constant(param[0], env);
  if (Declareops$ReactTemplate.constant_is_polymorphic(cb)) {
    var cst = constraints_of(cb, u);
    var match = cb[/* const_body */1];
    var b$prime;
    switch (match.tag | 0) {
      case 1 : 
          b$prime = /* Some */[Vars$ReactTemplate.subst_instance_constr(u, Mod_subst$ReactTemplate.force_constr(match[0]))];
          break;
      case 0 : 
      case 2 : 
          b$prime = /* None */0;
          break;
      
    }
    return /* tuple */[
            b$prime,
            Vars$ReactTemplate.subst_instance_constr(u, cb[/* const_type */2]),
            cst
          ];
  } else {
    var match$1 = cb[/* const_body */1];
    var b$prime$1;
    switch (match$1.tag | 0) {
      case 1 : 
          b$prime$1 = /* Some */[Mod_subst$ReactTemplate.force_constr(match$1[0])];
          break;
      case 0 : 
      case 2 : 
          b$prime$1 = /* None */0;
          break;
      
    }
    return /* tuple */[
            b$prime$1,
            cb[/* const_type */2],
            Univ$ReactTemplate.Constraint[/* empty */0]
          ];
  }
}

function constant_type_in(env, param) {
  var cb = Pre_env$ReactTemplate.lookup_constant(param[0], env);
  if (Declareops$ReactTemplate.constant_is_polymorphic(cb)) {
    return Vars$ReactTemplate.subst_instance_constr(param[1], cb[/* const_type */2]);
  } else {
    return cb[/* const_type */2];
  }
}

function constant_value_in(env, param) {
  var cb = Pre_env$ReactTemplate.lookup_constant(param[0], env);
  var match = cb[/* const_body */1];
  switch (match.tag | 0) {
    case 0 : 
        throw [
              NotEvaluableConst,
              /* NoBody */0
            ];
    case 1 : 
        var b = Mod_subst$ReactTemplate.force_constr(match[0]);
        return Vars$ReactTemplate.subst_instance_constr(param[1], b);
    case 2 : 
        throw [
              NotEvaluableConst,
              /* Opaque */1
            ];
    
  }
}

function constant_opt_value_in(env, cst) {
  try {
    return /* Some */[constant_value_in(env, cst)];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === NotEvaluableConst) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function evaluable_constant(kn, env) {
  var cb = Pre_env$ReactTemplate.lookup_constant(kn, env);
  var match = cb[/* const_body */1];
  switch (match.tag | 0) {
    case 1 : 
        return /* true */1;
    case 0 : 
    case 2 : 
        return /* false */0;
    
  }
}

function polymorphic_constant(cst, env) {
  return Declareops$ReactTemplate.constant_is_polymorphic(Pre_env$ReactTemplate.lookup_constant(cst, env));
}

function polymorphic_pconstant(param, env) {
  if (Univ$ReactTemplate.Instance[/* is_empty */1](param[1])) {
    return /* false */0;
  } else {
    return Declareops$ReactTemplate.constant_is_polymorphic(Pre_env$ReactTemplate.lookup_constant(param[0], env));
  }
}

function type_in_type_constant(cst, env) {
  return 1 - Pre_env$ReactTemplate.lookup_constant(cst, env)[/* const_typing_flags */7][/* check_universes */1];
}

function lookup_projection(cst, env) {
  var match = Pre_env$ReactTemplate.lookup_constant(Names$ReactTemplate.Projection[/* constant */2](cst), env)[/* const_proj */5];
  if (match) {
    return match[0];
  } else {
    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("lookup_projection: constant is not a projection."));
  }
}

function is_projection(cst, env) {
  var match = Pre_env$ReactTemplate.lookup_constant(cst, env)[/* const_proj */5];
  if (match) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function polymorphic_ind(param, env) {
  return Declareops$ReactTemplate.inductive_is_polymorphic(Pre_env$ReactTemplate.lookup_mind(param[0], env));
}

function polymorphic_pind(param, env) {
  if (Univ$ReactTemplate.Instance[/* is_empty */1](param[1])) {
    return /* false */0;
  } else {
    return polymorphic_ind(param[0], env);
  }
}

function type_in_type_ind(param, env) {
  return 1 - Pre_env$ReactTemplate.lookup_mind(param[0], env)[/* mind_typing_flags */10][/* check_universes */1];
}

function template_polymorphic_ind(param, env) {
  var match = Caml_array.caml_array_get(Pre_env$ReactTemplate.lookup_mind(param[0], env)[/* mind_packets */0], param[1])[/* mind_arity */2];
  if (match.tag) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function template_polymorphic_pind(param, env) {
  if (Univ$ReactTemplate.Instance[/* is_empty */1](param[1])) {
    return template_polymorphic_ind(param[0], env);
  } else {
    return /* false */0;
  }
}

function add_mind_key(kn, mind_key, env) {
  var new_inds = Curry._3(Names$ReactTemplate.Mindmap_env[/* add */3], kn, mind_key, env[/* env_globals */0][/* env_inductives */1]);
  var init = env[/* env_globals */0];
  var new_globals_000 = /* env_constants */init[/* env_constants */0];
  var new_globals_002 = /* env_modules */init[/* env_modules */2];
  var new_globals_003 = /* env_modtypes */init[/* env_modtypes */3];
  var new_globals = /* record */[
    new_globals_000,
    /* env_inductives */new_inds,
    new_globals_002,
    new_globals_003
  ];
  var newrecord = env.slice();
  newrecord[/* env_globals */0] = new_globals;
  return newrecord;
}

function add_mind(kn, mib, env) {
  var li = [/* NotLinked */0];
  return add_mind_key(kn, /* tuple */[
              mib,
              li
            ], env);
}

function lookup_inductive_variables(param, env) {
  var mis = Pre_env$ReactTemplate.lookup_mind(param[0], env);
  return Context$ReactTemplate.Named[/* to_vars */10](mis[/* mind_hyps */4]);
}

function vars_of_global(env, constr) {
  var match = Constr$ReactTemplate.kind(constr);
  switch (match.tag | 0) {
    case 1 : 
        return Curry._1(Names$ReactTemplate.Id[/* Set */9][/* singleton */4], match[0]);
    case 10 : 
        var c = match[0][0];
        var env$1 = env;
        var cmap = Pre_env$ReactTemplate.lookup_constant(c, env$1);
        return Context$ReactTemplate.Named[/* to_vars */10](cmap[/* const_hyps */0]);
    case 11 : 
        return lookup_inductive_variables(match[0][0], env);
    case 12 : 
        var param = match[0][0];
        var env$2 = env;
        return lookup_inductive_variables(param[0], env$2);
    default:
      throw Caml_builtin_exceptions.not_found;
  }
}

function global_vars_set(env, constr) {
  var filtrec = function (acc, c) {
    var match = Constr$ReactTemplate.kind(c);
    var acc$1;
    var exit = 0;
    switch (match.tag | 0) {
      case 1 : 
      case 10 : 
      case 11 : 
      case 12 : 
          exit = 1;
          break;
      default:
        acc$1 = acc;
    }
    if (exit === 1) {
      acc$1 = Curry._2(Names$ReactTemplate.Id[/* Set */9][/* union */6], vars_of_global(env, c), acc);
    }
    return Constr$ReactTemplate.fold(filtrec, acc$1, c);
  };
  return filtrec(Names$ReactTemplate.Id[/* Set */9][/* empty */0], constr);
}

function really_needed(env, needed) {
  return Curry._1(Context$ReactTemplate.Named[/* fold_inside */8]((function (need, decl) {
                    if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl), need)) {
                      var globc;
                      globc = decl.tag ? global_vars_set(env, decl[1]) : Names$ReactTemplate.Id[/* Set */9][/* empty */0];
                      return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* union */6], global_vars_set(env, Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], decl)), Curry._2(Names$ReactTemplate.Id[/* Set */9][/* union */6], globc, need));
                    } else {
                      return need;
                    }
                  }), needed), env[/* env_named_context */1][/* env_named_ctx */0]);
}

function keep_hyps(env, needed) {
  var really_needed$1 = really_needed(env, needed);
  return Context$ReactTemplate.Named[/* fold_outside */9]((function (d, nsign) {
                if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d), really_needed$1)) {
                  return Context$ReactTemplate.Named[/* add */2](d, nsign);
                } else {
                  return nsign;
                }
              }), env[/* env_named_context */1][/* env_named_ctx */0], empty_named_context);
}

function add_modtype(mtb, env) {
  var mp = mtb[/* mod_mp */0];
  var new_modtypes = Curry._3(Names$ReactTemplate.MPmap[/* add */3], mp, mtb, env[/* env_globals */0][/* env_modtypes */3]);
  var init = env[/* env_globals */0];
  var new_globals_000 = /* env_constants */init[/* env_constants */0];
  var new_globals_001 = /* env_inductives */init[/* env_inductives */1];
  var new_globals_002 = /* env_modules */init[/* env_modules */2];
  var new_globals = /* record */[
    new_globals_000,
    new_globals_001,
    new_globals_002,
    /* env_modtypes */new_modtypes
  ];
  var newrecord = env.slice();
  newrecord[/* env_globals */0] = new_globals;
  return newrecord;
}

function shallow_add_module(mb, env) {
  var mp = mb[/* mod_mp */0];
  var new_mods = Curry._3(Names$ReactTemplate.MPmap[/* add */3], mp, mb, env[/* env_globals */0][/* env_modules */2]);
  var init = env[/* env_globals */0];
  var new_globals_000 = /* env_constants */init[/* env_constants */0];
  var new_globals_001 = /* env_inductives */init[/* env_inductives */1];
  var new_globals_003 = /* env_modtypes */init[/* env_modtypes */3];
  var new_globals = /* record */[
    new_globals_000,
    new_globals_001,
    /* env_modules */new_mods,
    new_globals_003
  ];
  var newrecord = env.slice();
  newrecord[/* env_globals */0] = new_globals;
  return newrecord;
}

function lookup_module(mp, env) {
  return Curry._2(Names$ReactTemplate.MPmap[/* find */21], mp, env[/* env_globals */0][/* env_modules */2]);
}

function lookup_modtype(mp, env) {
  return Curry._2(Names$ReactTemplate.MPmap[/* find */21], mp, env[/* env_globals */0][/* env_modtypes */3]);
}

function make_judge(v, tj) {
  return /* record */[
          /* uj_val */v,
          /* uj_type */tj
        ];
}

function j_val(j) {
  return j[/* uj_val */0];
}

function j_type(j) {
  return j[/* uj_type */1];
}

function compile_constant_body(param, param$1, param$2) {
  return Cbytegen$ReactTemplate.compile_constant_body(/* false */0, param, param$1, param$2);
}

var Hyp_not_found = Caml_exceptions.create("Environ-ReactTemplate.Hyp_not_found");

function apply_to_hyp(ctxt, id, f) {
  var aux = function (rtail, ctxt) {
    var match = Pre_env$ReactTemplate.match_named_context_val(ctxt);
    if (match) {
      var match$1 = match[0];
      var ctxt$1 = match$1[2];
      var v = match$1[1];
      var d = match$1[0];
      if (Names$ReactTemplate.Id[/* equal */0](Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d), id)) {
        return Pre_env$ReactTemplate.push_named_context_val_val(Curry._3(f, ctxt$1[/* env_named_ctx */0], d, rtail), v, ctxt$1);
      } else {
        var ctxt$prime = aux(/* :: */[
              d,
              rtail
            ], ctxt$1);
        return Pre_env$ReactTemplate.push_named_context_val_val(d, v, ctxt$prime);
      }
    } else {
      throw Hyp_not_found;
    }
  };
  return aux(/* [] */0, ctxt);
}

function remove_hyps(ids, check_context, check_value, ctxt) {
  var remove_hyps$1 = function (ctxt) {
    var match = Pre_env$ReactTemplate.match_named_context_val(ctxt);
    if (match) {
      var match$1 = match[0];
      var rctxt = match$1[2];
      var v = match$1[1];
      var d = match$1[0];
      var match$2 = remove_hyps$1(rctxt);
      var ans = match$2[0];
      if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d), ids)) {
        return /* tuple */[
                ans,
                /* true */1
              ];
      } else if (match$2[1]) {
        var d$prime = Curry._1(check_context, d);
        var v$prime = Curry._1(check_value, v);
        if (d === d$prime && v === v$prime && rctxt === ans) {
          return /* tuple */[
                  ctxt,
                  /* true */1
                ];
        } else {
          return /* tuple */[
                  Pre_env$ReactTemplate.push_named_context_val_val(d$prime, v$prime, ans),
                  /* true */1
                ];
        }
      } else {
        return /* tuple */[
                ctxt,
                /* false */0
              ];
      }
    } else {
      return /* tuple */[
              Pre_env$ReactTemplate.empty_named_context_val,
              /* false */0
            ];
    }
  };
  return remove_hyps$1(ctxt)[0];
}

function retroknowledge(f, env) {
  return Curry._1(f, env[/* retroknowledge */6]);
}

function registered(env, field) {
  var partial_arg = env[/* retroknowledge */6];
  return (function (param) {
              return Retroknowledge$ReactTemplate.mem(partial_arg, param);
            })(field);
}

function register_one(env, field, entry) {
  var newrecord = env.slice();
  newrecord[/* retroknowledge */6] = Retroknowledge$ReactTemplate.add_field(env[/* retroknowledge */6], field, entry);
  return newrecord;
}

function register(env, field, entry) {
  if (field[1] !== 1) {
    return register_one(env, field, entry);
  } else {
    var match = Constr$ReactTemplate.kind(entry);
    var i31c;
    i31c = match.tag === 11 ? Constr$ReactTemplate.mkConstructUi(/* tuple */[
            match[0],
            1
          ]) : CErrors$ReactTemplate.anomaly(/* None */0, /* Some */["Environ.register"], Pp$ReactTemplate.str("should be an inductive type."));
    return register_one(register_one(env, /* KInt31 */[
                    field[0],
                    /* Int31Constructor */2
                  ], i31c), field, entry);
  }
}

function nth_digit_plus_one(i, n) {
  if (i & (1 << n)) {
    return 2;
  } else {
    return 1;
  }
}

function dispatch(rk, value, field) {
  var int31_op_from_const = function (n, op, prim) {
    var match = Constr$ReactTemplate.kind(value);
    if (match.tag === 10) {
      var n$1 = n;
      var op$1 = op;
      var kn = match[0];
      return /* record */[
              /* vm_compiling : Some */[(function (param, param$1) {
                    return Clambda$ReactTemplate.compile_prim(n$1, op$1, kn, param, param$1);
                  })],
              /* vm_constant_static */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_constant_static */1],
              /* vm_constant_dynamic */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_constant_dynamic */2],
              /* vm_before_match */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_before_match */3],
              /* vm_decompile_const */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_decompile_const */4]
            ];
    } else {
      return CErrors$ReactTemplate.anomaly(/* None */0, /* Some */["Environ.register"], Pp$ReactTemplate.str("should be a constant."));
    }
  };
  switch (field[1]) {
    case 1 : 
        var int31bit = field[1] !== 1 ? CErrors$ReactTemplate.anomaly(/* None */0, /* Some */["Environ.register"], Pp$ReactTemplate.str("add_int31_decompilation_from_type called with an abnormal field.")) : Retroknowledge$ReactTemplate.find(rk, /* KInt31 */[
                field[0],
                /* Int31Bits */0
              ]);
        var match = Constr$ReactTemplate.kind(int31bit);
        var i31bit_type;
        i31bit_type = match.tag === 11 ? match[0][0] : CErrors$ReactTemplate.anomaly(/* None */0, /* Some */["Environ.register"], Pp$ReactTemplate.str("Int31Bits should be an inductive type."));
        var match$1 = Constr$ReactTemplate.kind(value);
        var int31_decompilation;
        if (match$1.tag === 11) {
          var i31t = match$1[0][0];
          int31_decompilation = (function (param) {
              var ind = i31t;
              var digit_ind = i31bit_type;
              var tag = param;
              var array_of_int = function (i) {
                return Util$ReactTemplate.$$Array[/* init */0](31, (function (n) {
                              return Constr$ReactTemplate.mkConstruct(/* tuple */[
                                          digit_ind,
                                          nth_digit_plus_one(i, 30 - n | 0)
                                        ]);
                            }));
              };
              if ((tag >>> 31) !== 0) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "environ.ml",
                        556,
                        8
                      ]
                    ];
              }
              return Constr$ReactTemplate.mkApp(/* tuple */[
                          Constr$ReactTemplate.mkConstruct(/* tuple */[
                                ind,
                                1
                              ]),
                          array_of_int(tag)
                        ]);
            });
        } else {
          int31_decompilation = CErrors$ReactTemplate.anomaly(/* None */0, /* Some */["Environ.register"], Pp$ReactTemplate.str("should be an inductive type."));
        }
        return /* record */[
                /* vm_compiling */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_compiling */0],
                /* vm_constant_static */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_constant_static */1],
                /* vm_constant_dynamic */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_constant_dynamic */2],
                /* vm_before_match : Some */[Clambda$ReactTemplate.int31_escape_before_match],
                /* vm_decompile_const : Some */[int31_decompilation]
              ];
    case 2 : 
        return /* record */[
                /* vm_compiling */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_compiling */0],
                /* vm_constant_static : Some */[Clambda$ReactTemplate.compile_structured_int31],
                /* vm_constant_dynamic : Some */[Clambda$ReactTemplate.dynamic_int31_compilation],
                /* vm_before_match */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_before_match */3],
                /* vm_decompile_const */Retroknowledge$ReactTemplate.empty_reactive_info[/* vm_decompile_const */4]
              ];
    case 7 : 
        return int31_op_from_const(2, /* Kaddint31 */5, /* Int31add */2);
    case 8 : 
        return int31_op_from_const(2, /* Kaddcint31 */6, /* Int31addc */10);
    case 9 : 
        return int31_op_from_const(2, /* Kaddcarrycint31 */7, /* Int31addcarryc */12);
    case 10 : 
        return int31_op_from_const(2, /* Ksubint31 */8, /* Int31sub */3);
    case 11 : 
        return int31_op_from_const(2, /* Ksubcint31 */9, /* Int31subc */11);
    case 12 : 
        return int31_op_from_const(2, /* Ksubcarrycint31 */10, /* Int31subcarryc */13);
    case 13 : 
        return int31_op_from_const(2, /* Kmulint31 */11, /* Int31mul */4);
    case 14 : 
        return int31_op_from_const(2, /* Kmulcint31 */12, /* Int31mulc */14);
    case 15 : 
        return int31_op_from_const(3, /* Kdiv21int31 */13, /* Int31div21 */16);
    case 0 : 
    case 3 : 
    case 4 : 
    case 5 : 
    case 6 : 
    case 16 : 
        return Retroknowledge$ReactTemplate.empty_reactive_info;
    case 17 : 
        return int31_op_from_const(2, /* Kdivint31 */14, /* Int31diveucl */15);
    case 18 : 
        return int31_op_from_const(3, /* Kaddmuldivint31 */15, /* Int31addmuldiv */17);
    case 19 : 
        return int31_op_from_const(2, /* Kcompareint31 */16, /* Int31compare */21);
    case 20 : 
        return int31_op_from_const(1, /* Khead0int31 */17, /* Int31head0 */0);
    case 21 : 
        return int31_op_from_const(1, /* Ktail0int31 */18, /* Int31tail0 */1);
    case 22 : 
        return int31_op_from_const(2, /* Klorint31 */21, /* Int31lor */8);
    case 23 : 
        return int31_op_from_const(2, /* Klandint31 */22, /* Int31land */7);
    case 24 : 
        return int31_op_from_const(2, /* Klxorint31 */23, /* Int31lxor */9);
    
  }
}

Hook$ReactTemplate.set(Retroknowledge$ReactTemplate.dispatch_hook, dispatch);

var empty_env = Pre_env$ReactTemplate.empty_env;

var push_rel = Pre_env$ReactTemplate.push_rel;

var lookup_rel = Pre_env$ReactTemplate.lookup_rel;

var empty_named_context_val = Pre_env$ReactTemplate.empty_named_context_val;

var map_named_val = Pre_env$ReactTemplate.map_named_val;

var push_named = Pre_env$ReactTemplate.push_named;

var push_named_context_val = Pre_env$ReactTemplate.push_named_context_val;

var lookup_named = Pre_env$ReactTemplate.lookup_named;

var lookup_constant = Pre_env$ReactTemplate.lookup_constant;

var lookup_mind = Pre_env$ReactTemplate.lookup_mind;

var no_link_info = /* NotLinked */0;

exports.pre_env = pre_env;
exports.env_of_pre_env = env_of_pre_env;
exports.oracle = oracle;
exports.set_oracle = set_oracle;
exports.eq_named_context_val = eq_named_context_val;
exports.empty_env = empty_env;
exports.universes = universes;
exports.rel_context = rel_context;
exports.named_context = named_context;
exports.named_context_val = named_context_val;
exports.opaque_tables = opaque_tables;
exports.set_opaque_tables = set_opaque_tables;
exports.engagement = engagement;
exports.typing_flags = typing_flags;
exports.is_impredicative_set = is_impredicative_set;
exports.type_in_type = type_in_type;
exports.deactivated_guard = deactivated_guard;
exports.empty_context = empty_context;
exports.nb_rel = nb_rel;
exports.push_rel = push_rel;
exports.push_rel_context = push_rel_context;
exports.push_rec_types = push_rec_types;
exports.lookup_rel = lookup_rel;
exports.evaluable_rel = evaluable_rel;
exports.fold_rel_context = fold_rel_context;
exports.named_context_of_val = named_context_of_val;
exports.val_of_named_context = val_of_named_context;
exports.empty_named_context_val = empty_named_context_val;
exports.ids_of_named_context_val = ids_of_named_context_val;
exports.map_named_val = map_named_val;
exports.push_named = push_named;
exports.push_named_context = push_named_context;
exports.push_named_context_val = push_named_context_val;
exports.lookup_named = lookup_named;
exports.lookup_named_val = lookup_named_val;
exports.evaluable_named = evaluable_named;
exports.named_type = named_type;
exports.named_body = named_body;
exports.fold_named_context = fold_named_context;
exports.fold_named_context_reverse = fold_named_context_reverse;
exports.reset_context = reset_context;
exports.reset_with_named_context = reset_with_named_context;
exports.pop_rel_context = pop_rel_context;
exports.add_constant = add_constant;
exports.add_constant_key = add_constant_key;
exports.lookup_constant = lookup_constant;
exports.evaluable_constant = evaluable_constant;
exports.polymorphic_constant = polymorphic_constant;
exports.polymorphic_pconstant = polymorphic_pconstant;
exports.type_in_type_constant = type_in_type_constant;
exports.NotEvaluableConst = NotEvaluableConst;
exports.constant_type = constant_type;
exports.constant_value_and_type = constant_value_and_type;
exports.constant_context = constant_context;
exports.constant_value_in = constant_value_in;
exports.constant_type_in = constant_type_in;
exports.constant_opt_value_in = constant_opt_value_in;
exports.lookup_projection = lookup_projection;
exports.is_projection = is_projection;
exports.add_mind_key = add_mind_key;
exports.add_mind = add_mind;
exports.lookup_mind = lookup_mind;
exports.polymorphic_ind = polymorphic_ind;
exports.polymorphic_pind = polymorphic_pind;
exports.type_in_type_ind = type_in_type_ind;
exports.template_polymorphic_ind = template_polymorphic_ind;
exports.template_polymorphic_pind = template_polymorphic_pind;
exports.add_modtype = add_modtype;
exports.shallow_add_module = shallow_add_module;
exports.lookup_module = lookup_module;
exports.lookup_modtype = lookup_modtype;
exports.add_constraints = add_constraints;
exports.check_constraints = check_constraints;
exports.push_context = push_context;
exports.push_context_set = push_context_set;
exports.push_constraints_to_env = push_constraints_to_env;
exports.set_engagement = set_engagement;
exports.set_typing_flags = set_typing_flags;
exports.global_vars_set = global_vars_set;
exports.vars_of_global = vars_of_global;
exports.really_needed = really_needed;
exports.keep_hyps = keep_hyps;
exports.make_judge = make_judge;
exports.j_val = j_val;
exports.j_type = j_type;
exports.compile_constant_body = compile_constant_body;
exports.Hyp_not_found = Hyp_not_found;
exports.apply_to_hyp = apply_to_hyp;
exports.remove_hyps = remove_hyps;
exports.retroknowledge = retroknowledge;
exports.registered = registered;
exports.register = register;
exports.no_link_info = no_link_info;
/* push_named_context Not a pure module */
