// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Int$ReactTemplate = require("./int.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Make() {
  var dyntab = [Int$ReactTemplate.$$Map[/* empty */0]];
  var create = function (s) {
    var hash = Hashtbl.hash(s);
    if (Curry._2(Int$ReactTemplate.$$Map[/* mem */2], hash, dyntab[0])) {
      var old = Int$ReactTemplate.$$Map[/* find */21](hash, dyntab[0]);
      Curry._2(Printf.eprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "Dynamic tag collision: ",
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            " vs. ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "\n" */10,
                                    /* Flush */Block.__(10, [/* End_of_format */0])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "Dynamic tag collision: %s vs. %s\n%!"
              ]), s, old);
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "dyn.ml",
              91,
              6
            ]
          ];
    }
    dyntab[0] = Curry._3(Int$ReactTemplate.$$Map[/* add */3], hash, s, dyntab[0]);
    return hash;
  };
  var eq = function (h1, h2) {
    if (h1 === h2) {
      return /* Some */[/* Refl */0];
    } else {
      return /* None */0;
    }
  };
  var repr = function (s) {
    try {
      return Int$ReactTemplate.$$Map[/* find */21](s, dyntab[0]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        Curry._1(Printf.eprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "Unknown dynamic tag ",
                      /* Int */Block.__(4, [
                          /* Int_i */3,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* Flush */Block.__(10, [/* End_of_format */0])
                            ])
                        ])
                    ]),
                  "Unknown dynamic tag %i\n%!"
                ]), s);
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "dyn.ml",
                103,
                4
              ]
            ];
      } else {
        throw exn;
      }
    }
  };
  var name = function (s) {
    var hash = Hashtbl.hash(s);
    if (Curry._2(Int$ReactTemplate.$$Map[/* mem */2], hash, dyntab[0])) {
      return /* Some */[/* Any */[hash]];
    } else {
      return /* None */0;
    }
  };
  var dump = function () {
    return Curry._1(Int$ReactTemplate.$$Map[/* bindings */16], dyntab[0]);
  };
  var Self_004 = function () {
    var empty = Int$ReactTemplate.$$Map[/* empty */0];
    var add = function (tag, v, m) {
      return Curry._3(Int$ReactTemplate.$$Map[/* add */3], tag, v, m);
    };
    var remove = function (tag, m) {
      return Curry._2(Int$ReactTemplate.$$Map[/* remove */5], tag, m);
    };
    var find = function (tag, m) {
      return Int$ReactTemplate.$$Map[/* find */21](tag, m);
    };
    var mem = Int$ReactTemplate.$$Map[/* mem */2];
    var map = function (f, m) {
      return Curry._2(Int$ReactTemplate.$$Map[/* mapi */23], f[/* map */0], m);
    };
    var iter = function (f, m) {
      return Curry._2(Int$ReactTemplate.$$Map[/* iter */9], (function (k, v) {
                    return Curry._1(f, /* Any */[
                                k,
                                v
                              ]);
                  }), m);
    };
    var fold = function (f, m, accu) {
      return Curry._3(Int$ReactTemplate.$$Map[/* fold */10], (function (k, v, accu) {
                    return Curry._2(f, /* Any */[
                                k,
                                v
                              ], accu);
                  }), m, accu);
    };
    return [
            empty,
            add,
            remove,
            find,
            mem,
            map,
            iter,
            fold
          ];
  };
  var make_dyn_tag = function (s) {
    var tag = create(s);
    var infun = function (x) {
      return /* Dyn */[
              tag,
              x
            ];
    };
    var outfun = function (param) {
      var match = eq(tag, param[0]);
      if (match) {
        return param[1];
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "dyn.ml",
                143,
                14
              ]
            ];
      }
    };
    return /* tuple */[
            infun,
            outfun,
            tag
          ];
  };
  var make_dyn = function (s) {
    var match = make_dyn_tag(s);
    return /* tuple */[
            match[0],
            match[1]
          ];
  };
  var inj = function (x, tag) {
    return /* Dyn */[
            tag,
            x
          ];
  };
  var prj = function (param, tag) {
    var match = eq(tag, param[0]);
    if (match) {
      return /* Some */[param[1]];
    } else {
      return /* None */0;
    }
  };
  var Easy = /* module */[
    /* make_dyn_tag */make_dyn_tag,
    /* make_dyn */make_dyn,
    /* inj */inj,
    /* prj */prj
  ];
  return [
          create,
          eq,
          repr,
          name,
          Self_004,
          dump,
          Easy
        ];
}

exports.Make = Make;
/* Int-ReactTemplate Not a pure module */
