// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Unix = require("bs-platform/lib/js/unix.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Marshal = require("bs-platform/lib/js/marshal.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var CList$ReactTemplate = require("./cList.bs.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var TQueue$ReactTemplate = require("./tQueue.bs.js");
var Thread$ReactTemplate = require("../shims/thread.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var CThread$ReactTemplate = require("../shims/cThread.bs.js");
var Spawned$ReactTemplate = require("../shims/spawned.bs.js");
var Stateid$ReactTemplate = require("./stateid.bs.js");
var Feedback$ReactTemplate = require("./feedback.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Universes$ReactTemplate = require("./universes.bs.js");
var CEphemeron$ReactTemplate = require("./cEphemeron.bs.js");
var WorkerLoop$ReactTemplate = require("./workerLoop.bs.js");
var WorkerPool$ReactTemplate = require("./workerPool.bs.js");
var CoqworkmgrApi$ReactTemplate = require("./coqworkmgrApi.bs.js");

function stm_pr_err(pp) {
  return Curry._3(Format.eprintf(/* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* String_literal */Block.__(11, [
                          "] ",
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* End_of_format */0,
                                    ""
                                  ]]),
                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                      /* Close_box */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "\n" */10,
                                          /* Flush */Block.__(10, [/* End_of_format */0])
                                        ])
                                    ])])
                            ])
                        ])
                    ]),
                  "%s] @[%a@]\n%!"
                ]), Spawned$ReactTemplate.process_id(/* () */0), Pp$ReactTemplate.pp_with, pp);
}

function stm_prerr_endline(s) {
  if (Flags$ReactTemplate.debug[0]) {
    return stm_pr_err(Pp$ReactTemplate.str(s));
  } else {
    return /* () */0;
  }
}

var async_proofs_flags_for_workers = [/* [] */0];

function MakeQueue(funarg) {
  var $$let = function () {
    var Die = Caml_exceptions.create("AsyncTaskQueue-ReactTemplate.Make(T)(*).Die");
    var slave_respond = function (param) {
      var res = Curry._1(funarg[/* perform */8], param[0]);
      return /* Response */Block.__(0, [res]);
    };
    var MarshalError = Caml_exceptions.create("AsyncTaskQueue-ReactTemplate.Make(T)(*).MarshalError");
    var marshal_to_channel = function (oc, data) {
      Marshal.to_channel(oc, data, /* [] */0);
      return Pervasives.flush(oc);
    };
    var marshal_err = function (s) {
      throw [
            MarshalError,
            s
          ];
    };
    var marshal_request = function (oc, req) {
      try {
        return marshal_to_channel(oc, req);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "marshal_request: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "marshal_request: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "marshal_request: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var unmarshal_request = function (ic) {
      try {
        return Curry._1(CThread$ReactTemplate.thread_friendly_input_value, ic);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "unmarshal_request: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "unmarshal_request: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "unmarshal_request: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var marshal_response = function (oc, res) {
      try {
        return marshal_to_channel(oc, res);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "marshal_response: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "marshal_response: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "marshal_response: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var unmarshal_response = function (ic) {
      try {
        return Curry._1(CThread$ReactTemplate.thread_friendly_input_value, ic);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "unmarshal_response: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "unmarshal_response: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "unmarshal_response: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var marshal_more_data = function (oc, res) {
      try {
        return marshal_to_channel(oc, res);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "marshal_more_data: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "marshal_more_data: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "marshal_more_data: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var unmarshal_more_data = function (ic) {
      try {
        return Curry._1(CThread$ReactTemplate.thread_friendly_input_value, ic);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "unmarshal_more_data: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "unmarshal_more_data: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "unmarshal_more_data: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var report_status = function ($staropt$star, s) {
      var id = $staropt$star ? $staropt$star[0] : Flags$ReactTemplate.async_proofs_worker_id[0];
      return Feedback$ReactTemplate.feedback(/* None */0, /* Some */[Stateid$ReactTemplate.initial], /* None */0, /* WorkerStatus */Block.__(2, [
                    id,
                    s
                  ]));
    };
    var spawn = Pervasives.failwith("unimplemented: Worker.spawn");
    var kill = Pervasives.failwith("unimplemented: Worker.kill");
    var is_alive = Pervasives.failwith("unimplemented: Worker.is_alive");
    var Worker = /* module */[
      /* spawn */spawn,
      /* kill */kill,
      /* is_alive */is_alive
    ];
    var spawn$1 = function (id) {
      var name = Curry._2(Printf.sprintf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Char_literal */Block.__(12, [
                        /* ":" */58,
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "%s:%d"
              ]), funarg[/* name */0][0], id);
      var set_slave_opt = function (_param) {
        while(true) {
          var param = _param;
          if (param) {
            var x = param[0];
            var exit = 0;
            var exit$1 = 0;
            switch (x) {
              case "-batch" : 
              case "-emacs" : 
              case "-emacs-U" : 
              case "-ideslave" : 
                  _param = param[1];
                  continue ;
                  case "-async-proofs" : 
              case "-async-proofs-worker-priority" : 
              case "-compile" : 
              case "-compile-verbose" : 
              case "-l" : 
              case "-load-vernac-source" : 
              case "-load-vernac-source-verbose" : 
              case "-lv" : 
              case "-toploop" : 
              case "-vio2vo" : 
              case "-worker-id" : 
                  exit$1 = 2;
                  break;
              default:
                exit = 1;
            }
            if (exit$1 === 2) {
              var match = param[1];
              if (match) {
                _param = match[1];
                continue ;
                
              } else {
                exit = 1;
              }
            }
            if (exit === 1) {
              return /* :: */[
                      x,
                      set_slave_opt(param[1])
                    ];
            }
            
          } else {
            return Util$ReactTemplate.$at(async_proofs_flags_for_workers[0], /* :: */[
                        "-toploop",
                        /* :: */[
                          funarg[/* name */0][0] + "top",
                          /* :: */[
                            "-worker-id",
                            /* :: */[
                              name,
                              /* :: */[
                                "-async-proofs-worker-priority",
                                /* :: */[
                                  CoqworkmgrApi$ReactTemplate.string_of_priority(WorkerLoop$ReactTemplate.async_proofs_worker_priority[0]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]);
          }
        };
      };
      var args = Util$ReactTemplate.$$Array[/* of_list */10](set_slave_opt(Curry._1(Util$ReactTemplate.List[/* tl */2], Util$ReactTemplate.$$Array[/* to_list */9](Sys.argv))));
      var env = Util$ReactTemplate.$$Array[/* append */3](Curry._1(funarg[/* extra_env */1], /* () */0), Unix.environment(/* () */0));
      var match = Curry._3(spawn, env, Caml_array.caml_array_get(Sys.argv, 0), args);
      return /* tuple */[
              name,
              match[0],
              Curry._1(CThread$ReactTemplate.prepare_in_channel_for_thread_friendly_io, match[1]),
              match[2]
            ];
    };
    var manager = function (cpanel, param) {
      var queue = cpanel[/* extra */2];
      var cancelled = cpanel[/* cancelled */1];
      var exit = cpanel[/* exit */0];
      var oc = param[3];
      var ic = param[2];
      var proc = param[1];
      var id = param[0];
      var exit$1 = function () {
        report_status(/* Some */[id], "Dead");
        return Curry._1(exit, /* () */0);
      };
      var last_task = [/* None */0];
      var worker_age = [/* Fresh */0];
      var got_token = [/* false */0];
      var giveback_exec_token = function () {
        if (got_token[0]) {
          CoqworkmgrApi$ReactTemplate.giveback(1);
          got_token[0] = /* false */0;
          return /* () */0;
        } else {
          return 0;
        }
      };
      var stop_waiting = [/* false */0];
      var expiration_date = [[/* false */0]];
      var pick_task = function () {
        stm_prerr_endline("waiting for a task");
        var partial_arg = worker_age[0];
        var match = TQueue$ReactTemplate.pop(/* Some */[(function (param) {
                  var age = partial_arg;
                  var param$1 = param;
                  if (param$1[1][0]) {
                    return /* false */0;
                  } else {
                    return Curry._2(funarg[/* task_match */3], age, param$1[0]);
                  }
                })], /* Some */[stop_waiting], queue);
        var task = match[0];
        expiration_date[0] = match[1];
        last_task[0] = /* Some */[task];
        stm_prerr_endline("got task: " + Curry._1(funarg[/* name_of_task */9], task));
        return task;
      };
      var get_exec_token = function () {
        CoqworkmgrApi$ReactTemplate.get(1);
        got_token[0] = /* true */1;
        return stm_prerr_endline("got execution token");
      };
      var kill_if = function () {
        try {
          var _param = /* () */0;
          while(true) {
            if (Curry._1(is_alive, proc)) {
              if (Curry._1(cancelled, /* () */0) || expiration_date[0][0]) {
                stop_waiting[0] = /* true */1;
                TQueue$ReactTemplate.broadcast(queue);
                return Curry._1(kill, proc);
              } else {
                Unix.sleep(1);
                _param = /* () */0;
                continue ;
                
              }
            } else {
              return /* () */0;
            }
          };
        }
        catch (exn){
          if (exn === Sys.Break) {
            stop_waiting[0] = /* true */1;
            TQueue$ReactTemplate.broadcast(queue);
            return Curry._1(kill, proc);
          } else {
            throw exn;
          }
        }
      };
      Thread$ReactTemplate.create(kill_if, /* () */0);
      try {
        while(true) {
          report_status(/* Some */[id], "Idle");
          var task = pick_task(/* () */0);
          var match = Curry._2(funarg[/* request_of_task */2], worker_age[0], task);
          if (match) {
            try {
              get_exec_token(/* () */0);
              marshal_request(oc, /* Request */[match[0]]);
              var $$continue = (function(task){
              return function $$continue(_param) {
                while(true) {
                  var match = unmarshal_response(ic);
                  if (typeof match === "number") {
                    marshal_more_data(oc, /* MoreDataUnivLevel */[CList$ReactTemplate.init(10, (function () {
                                  return Curry._1(Universes$ReactTemplate.new_univ_id, /* () */0);
                                }))]);
                    _param = /* () */0;
                    continue ;
                    
                  } else if (match.tag) {
                    Curry._1(funarg[/* forward_feedback */7], match[0]);
                    _param = /* () */0;
                    continue ;
                    
                  } else {
                    var match$1 = Curry._3(funarg[/* use_response */4], worker_age[0], task, match[0]);
                    if (typeof match$1 === "number") {
                      throw Die;
                    } else {
                      var match$2 = match$1[1];
                      last_task[0] = /* None */0;
                      giveback_exec_token(/* () */0);
                      worker_age[0] = /* Old */[match$2[0]];
                      var l = match$2[1];
                      return Curry._2(Util$ReactTemplate.List[/* iter */9], (function (t) {
                                    return TQueue$ReactTemplate.push(queue, /* tuple */[
                                                t,
                                                expiration_date[0]
                                              ]);
                                  }), l);
                    }
                  }
                };
              }
              }(task));
              $$continue(/* () */0);
            }
            catch (raw_e){
              var e = Js_exn.internalToOCamlException(raw_e);
              var exit$2 = 0;
              var exit$3 = 0;
              var exit$4 = 0;
              var exit$5 = 0;
              if (e[0] === Caml_builtin_exceptions.sys_error) {
                throw e;
              } else {
                exit$5 = 4;
              }
              if (exit$5 === 4) {
                if (e[0] === Caml_builtin_exceptions.invalid_argument) {
                  throw e;
                } else {
                  exit$4 = 3;
                }
              }
              if (exit$4 === 3) {
                if (e === Caml_builtin_exceptions.end_of_file) {
                  throw e;
                } else if (e === Die) {
                  throw e;
                } else {
                  exit$3 = 2;
                }
              }
              if (exit$3 === 2) {
                if (e[0] === MarshalError) {
                  Curry._2(funarg[/* on_marshal_error */5], e[1], task);
                  throw Die;
                } else {
                  exit$2 = 1;
                }
              }
              if (exit$2 === 1) {
                stm_pr_err(Pp$ReactTemplate.seq(/* :: */[
                          Pp$ReactTemplate.str("Uncaught exception in worker manager: "),
                          /* :: */[
                            CErrors$ReactTemplate.print(/* None */0, e),
                            /* [] */0
                          ]
                        ]));
                Pervasives.flush_all(/* () */0);
                throw Die;
              }
              
            }
          } else {
            stm_prerr_endline("Task expired: " + Curry._1(funarg[/* name_of_task */9], task));
          }
        };
        return /* () */0;
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit$6 = 0;
        var exit$7 = 0;
        var exit$8 = 0;
        if (exn === Die || exn === TQueue$ReactTemplate.BeingDestroyed) {
          exit$6 = 1;
        } else {
          exit$8 = 4;
        }
        if (exit$8 === 4) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            exit$6 = 2;
          } else {
            exit$7 = 3;
          }
        }
        if (exit$7 === 3) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            exit$6 = 2;
          } else if (exn === Caml_builtin_exceptions.end_of_file) {
            exit$6 = 2;
          } else {
            throw exn;
          }
        }
        switch (exit$6) {
          case 1 : 
              giveback_exec_token(/* () */0);
              Curry._1(kill, proc);
              return exit$1(/* () */0);
          case 2 : 
              Curry._1(funarg[/* on_task_cancellation_or_expiration_or_slave_death */6], last_task[0]);
              giveback_exec_token(/* () */0);
              Curry._1(kill, proc);
              return exit$1(/* () */0);
          
        }
      }
    };
    var Model = /* module */[
      /* spawn */spawn$1,
      /* manager */manager
    ];
    var Pool = WorkerPool$ReactTemplate.Make(Model);
    var create = function (size) {
      var cleaner = function (queue) {
        while(true) {
          try {
            TQueue$ReactTemplate.pop(/* Some */[(function (param) {
                      return param[1][0];
                    })], /* None */0, queue);
          }
          catch (exn){
            if (exn === TQueue$ReactTemplate.BeingDestroyed) {
              Thread$ReactTemplate.exit(/* () */0);
            } else {
              throw exn;
            }
          }
        };
        return /* () */0;
      };
      var queue = TQueue$ReactTemplate.create(/* () */0);
      return /* record */[
              /* active */Curry._2(Pool[/* create */0], queue, size),
              /* queue */queue,
              /* cleaner */size > 0 ? /* Some */[Thread$ReactTemplate.create(cleaner, queue)] : /* None */0
            ];
    };
    var destroy = function (param) {
      Curry._1(Pool[/* destroy */5], param[/* active */0]);
      return TQueue$ReactTemplate.destroy(param[/* queue */1]);
    };
    var broadcast = function (param) {
      return TQueue$ReactTemplate.broadcast(param[/* queue */1]);
    };
    var enqueue_task = function (param, t, cancel_switch) {
      stm_prerr_endline("Enqueue task " + Curry._1(funarg[/* name_of_task */9], t));
      return TQueue$ReactTemplate.push(param[/* queue */1], /* tuple */[
                  t,
                  cancel_switch
                ]);
    };
    var cancel_worker = function (param, n) {
      return Curry._2(Pool[/* cancel */3], n, param[/* active */0]);
    };
    var name_of_request = function (param) {
      return Curry._1(funarg[/* name_of_request */10], param[0]);
    };
    var set_order = function (param, cmp) {
      return TQueue$ReactTemplate.set_order(param[/* queue */1], (function (param, param$1) {
                    return Curry._2(cmp, param[0], param$1[0]);
                  }));
    };
    var join = function (param) {
      var active = param[/* active */0];
      if (Curry._1(Pool[/* is_empty */1], active)) {
        return 0;
      } else {
        return TQueue$ReactTemplate.wait_until_n_are_waiting_and_queue_empty(Curry._1(Pool[/* n_workers */2], active) + 1 | 0, param[/* queue */1]);
      }
    };
    var cancel_all = function (param) {
      TQueue$ReactTemplate.clear(param[/* queue */1]);
      return Curry._1(Pool[/* cancel_all */4], param[/* active */0]);
    };
    var slave_ic = [/* None */0];
    var slave_oc = [/* None */0];
    var init_stdout = function () {
      var match = Spawned$ReactTemplate.get_channels(/* () */0);
      slave_oc[0] = /* Some */[match[1]];
      slave_ic[0] = /* Some */[match[0]];
      return /* () */0;
    };
    var bufferize = function (f) {
      var l = [/* [] */0];
      return (function () {
          var match = l[0];
          if (match) {
            l[0] = match[1];
            return match[0];
          } else {
            var data = Curry._1(f, /* () */0);
            l[0] = Curry._1(Util$ReactTemplate.List[/* tl */2], data);
            return Curry._1(Util$ReactTemplate.List[/* hd */1], data);
          }
        });
    };
    var slave_handshake = function () {
      return Curry._2(Pool[/* worker_handshake */6], Option$ReactTemplate.get(slave_ic[0]), Option$ReactTemplate.get(slave_oc[0]));
    };
    var pp_pid = function (pp) {
      return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str(Spawned$ReactTemplate.process_id(/* () */0) + " "), pp);
    };
    var debug_with_pid = function (fb) {
      var match = fb[/* contents */3];
      if (typeof match === "number" || !(match.tag === 8 && match[0] === 0)) {
        return fb;
      } else {
        return /* record */[
                /* doc_id */fb[/* doc_id */0],
                /* span_id */fb[/* span_id */1],
                /* route */fb[/* route */2],
                /* contents : Message */Block.__(8, [
                    /* Debug */0,
                    match[1],
                    pp_pid(match[2])
                  ])
              ];
      }
    };
    var main_loop = function () {
      Feedback$ReactTemplate.add_feeder((function (x) {
              var oc = Option$ReactTemplate.get(slave_oc[0]);
              var fb = x;
              Marshal.to_channel(oc, /* RespFeedback */Block.__(1, [debug_with_pid(fb)]), /* [] */0);
              return Pervasives.flush(oc);
            }));
      Curry._1(Universes$ReactTemplate.set_remote_new_univ_id, bufferize((function () {
                  marshal_response(Option$ReactTemplate.get(slave_oc[0]), /* RespGetCounterNewUnivLevel */0);
                  return unmarshal_more_data(Option$ReactTemplate.get(slave_ic[0]))[0];
                })));
      var working = /* false */0;
      slave_handshake(/* () */0);
      while(true) {
        try {
          working = /* false */0;
          var request = unmarshal_request(Option$ReactTemplate.get(slave_ic[0]));
          working = /* true */1;
          report_status(/* None */0, Curry._1(funarg[/* name_of_request */10], request[0]));
          var response = slave_respond(request);
          report_status(/* None */0, "Idle");
          marshal_response(Option$ReactTemplate.get(slave_oc[0]), response);
          CEphemeron$ReactTemplate.clear(/* () */0);
        }
        catch (raw_e){
          var e = Js_exn.internalToOCamlException(raw_e);
          var exit = 0;
          var exit$1 = 0;
          if (e[0] === MarshalError) {
            stm_pr_err(Pp$ReactTemplate.prlist(Pp$ReactTemplate.str, /* :: */[
                      "Fatal marshal error: ",
                      /* :: */[
                        e[1],
                        /* [] */0
                      ]
                    ]));
            Pervasives.flush_all(/* () */0);
            Pervasives.exit(2);
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (e === Caml_builtin_exceptions.end_of_file) {
              stm_prerr_endline("connection lost");
              Pervasives.flush_all(/* () */0);
              Pervasives.exit(2);
            } else {
              exit = 1;
            }
          }
          if (exit === 1) {
            stm_pr_err(Pp$ReactTemplate.seq(/* :: */[
                      Pp$ReactTemplate.str("Slave: critical exception: "),
                      /* :: */[
                        CErrors$ReactTemplate.print(/* None */0, e),
                        /* [] */0
                      ]
                    ]));
            Pervasives.flush_all(/* () */0);
            Pervasives.exit(1);
          }
          
        }
      };
      return /* () */0;
    };
    var clear = function (param) {
      if (!Curry._1(Pool[/* is_empty */1], param[/* active */0])) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "asyncTaskQueue.ml",
                349,
                4
              ]
            ];
      }
      return TQueue$ReactTemplate.clear(param[/* queue */1]);
    };
    var snapshot = function (param) {
      return Curry._2(Util$ReactTemplate.List[/* map */10], (function (prim) {
                    return prim[0];
                  }), TQueue$ReactTemplate.wait_until_n_are_waiting_then_snapshot(Curry._1(Pool[/* n_workers */2], param[/* active */0]), param[/* queue */1]));
    };
    var with_n_workers = function (n, f) {
      var q = create(n);
      try {
        var rc = Curry._1(f, q);
        destroy(q);
        return rc;
      }
      catch (raw_e){
        var e = Js_exn.internalToOCamlException(raw_e);
        var e$1 = CErrors$ReactTemplate.push(e);
        destroy(q);
        return Util$ReactTemplate.iraise(e$1);
      }
    };
    var n_workers = function (param) {
      return Curry._1(Pool[/* n_workers */2], param[/* active */0]);
    };
    return /* module */[
            /* Die */Die,
            /* slave_respond */slave_respond,
            /* MarshalError */MarshalError,
            /* marshal_to_channel */marshal_to_channel,
            /* marshal_err */marshal_err,
            /* marshal_request */marshal_request,
            /* unmarshal_request */unmarshal_request,
            /* marshal_response */marshal_response,
            /* unmarshal_response */unmarshal_response,
            /* marshal_more_data */marshal_more_data,
            /* unmarshal_more_data */unmarshal_more_data,
            /* report_status */report_status,
            /* Worker */Worker,
            /* Model */Model,
            /* Pool */Pool,
            /* create */create,
            /* destroy */destroy,
            /* broadcast */broadcast,
            /* enqueue_task */enqueue_task,
            /* cancel_worker */cancel_worker,
            /* name_of_request */name_of_request,
            /* set_order */set_order,
            /* join */join,
            /* cancel_all */cancel_all,
            /* slave_ic */slave_ic,
            /* slave_oc */slave_oc,
            /* init_stdout */init_stdout,
            /* bufferize */bufferize,
            /* slave_handshake */slave_handshake,
            /* pp_pid */pp_pid,
            /* debug_with_pid */debug_with_pid,
            /* main_loop */main_loop,
            /* clear */clear,
            /* snapshot */snapshot,
            /* with_n_workers */with_n_workers,
            /* n_workers */n_workers
          ];
  };
  return (function (funarg) {
      var $$let$1 = $$let(funarg);
      return [
              $$let$1[15],
              $$let$1[16],
              $$let$1[35],
              $$let$1[18],
              $$let$1[22],
              $$let$1[23],
              $$let$1[19],
              $$let$1[21],
              $$let$1[17],
              $$let$1[33],
              $$let$1[32],
              $$let$1[34]
            ];
    });
}

function MakeWorker(funarg) {
  var $$let = function () {
    var Die = Caml_exceptions.create("AsyncTaskQueue-ReactTemplate.Make(T)(*).Die");
    var slave_respond = function (param) {
      var res = Curry._1(funarg[/* perform */8], param[0]);
      return /* Response */Block.__(0, [res]);
    };
    var MarshalError = Caml_exceptions.create("AsyncTaskQueue-ReactTemplate.Make(T)(*).MarshalError");
    var marshal_to_channel = function (oc, data) {
      Marshal.to_channel(oc, data, /* [] */0);
      return Pervasives.flush(oc);
    };
    var marshal_err = function (s) {
      throw [
            MarshalError,
            s
          ];
    };
    var marshal_request = function (oc, req) {
      try {
        return marshal_to_channel(oc, req);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "marshal_request: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "marshal_request: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "marshal_request: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var unmarshal_request = function (ic) {
      try {
        return Curry._1(CThread$ReactTemplate.thread_friendly_input_value, ic);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "unmarshal_request: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "unmarshal_request: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "unmarshal_request: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var marshal_response = function (oc, res) {
      try {
        return marshal_to_channel(oc, res);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "marshal_response: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "marshal_response: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "marshal_response: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var unmarshal_response = function (ic) {
      try {
        return Curry._1(CThread$ReactTemplate.thread_friendly_input_value, ic);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "unmarshal_response: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "unmarshal_response: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "unmarshal_response: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var marshal_more_data = function (oc, res) {
      try {
        return marshal_to_channel(oc, res);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "marshal_more_data: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "marshal_more_data: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "marshal_more_data: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var unmarshal_more_data = function (ic) {
      try {
        return Curry._1(CThread$ReactTemplate.thread_friendly_input_value, ic);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit = 0;
        var exit$1 = 0;
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                MarshalError,
                "unmarshal_more_data: " + exn[1]
              ];
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            throw [
                  MarshalError,
                  "unmarshal_more_data: " + exn[1]
                ];
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            throw [
                  MarshalError,
                  "unmarshal_more_data: " + exn[1]
                ];
          } else {
            throw exn;
          }
        }
        
      }
    };
    var report_status = function ($staropt$star, s) {
      var id = $staropt$star ? $staropt$star[0] : Flags$ReactTemplate.async_proofs_worker_id[0];
      return Feedback$ReactTemplate.feedback(/* None */0, /* Some */[Stateid$ReactTemplate.initial], /* None */0, /* WorkerStatus */Block.__(2, [
                    id,
                    s
                  ]));
    };
    var spawn = Pervasives.failwith("unimplemented: Worker.spawn");
    var kill = Pervasives.failwith("unimplemented: Worker.kill");
    var is_alive = Pervasives.failwith("unimplemented: Worker.is_alive");
    var Worker = /* module */[
      /* spawn */spawn,
      /* kill */kill,
      /* is_alive */is_alive
    ];
    var spawn$1 = function (id) {
      var name = Curry._2(Printf.sprintf(/* Format */[
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* Char_literal */Block.__(12, [
                        /* ":" */58,
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "%s:%d"
              ]), funarg[/* name */0][0], id);
      var set_slave_opt = function (_param) {
        while(true) {
          var param = _param;
          if (param) {
            var x = param[0];
            var exit = 0;
            var exit$1 = 0;
            switch (x) {
              case "-batch" : 
              case "-emacs" : 
              case "-emacs-U" : 
              case "-ideslave" : 
                  _param = param[1];
                  continue ;
                  case "-async-proofs" : 
              case "-async-proofs-worker-priority" : 
              case "-compile" : 
              case "-compile-verbose" : 
              case "-l" : 
              case "-load-vernac-source" : 
              case "-load-vernac-source-verbose" : 
              case "-lv" : 
              case "-toploop" : 
              case "-vio2vo" : 
              case "-worker-id" : 
                  exit$1 = 2;
                  break;
              default:
                exit = 1;
            }
            if (exit$1 === 2) {
              var match = param[1];
              if (match) {
                _param = match[1];
                continue ;
                
              } else {
                exit = 1;
              }
            }
            if (exit === 1) {
              return /* :: */[
                      x,
                      set_slave_opt(param[1])
                    ];
            }
            
          } else {
            return Util$ReactTemplate.$at(async_proofs_flags_for_workers[0], /* :: */[
                        "-toploop",
                        /* :: */[
                          funarg[/* name */0][0] + "top",
                          /* :: */[
                            "-worker-id",
                            /* :: */[
                              name,
                              /* :: */[
                                "-async-proofs-worker-priority",
                                /* :: */[
                                  CoqworkmgrApi$ReactTemplate.string_of_priority(WorkerLoop$ReactTemplate.async_proofs_worker_priority[0]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]);
          }
        };
      };
      var args = Util$ReactTemplate.$$Array[/* of_list */10](set_slave_opt(Curry._1(Util$ReactTemplate.List[/* tl */2], Util$ReactTemplate.$$Array[/* to_list */9](Sys.argv))));
      var env = Util$ReactTemplate.$$Array[/* append */3](Curry._1(funarg[/* extra_env */1], /* () */0), Unix.environment(/* () */0));
      var match = Curry._3(spawn, env, Caml_array.caml_array_get(Sys.argv, 0), args);
      return /* tuple */[
              name,
              match[0],
              Curry._1(CThread$ReactTemplate.prepare_in_channel_for_thread_friendly_io, match[1]),
              match[2]
            ];
    };
    var manager = function (cpanel, param) {
      var queue = cpanel[/* extra */2];
      var cancelled = cpanel[/* cancelled */1];
      var exit = cpanel[/* exit */0];
      var oc = param[3];
      var ic = param[2];
      var proc = param[1];
      var id = param[0];
      var exit$1 = function () {
        report_status(/* Some */[id], "Dead");
        return Curry._1(exit, /* () */0);
      };
      var last_task = [/* None */0];
      var worker_age = [/* Fresh */0];
      var got_token = [/* false */0];
      var giveback_exec_token = function () {
        if (got_token[0]) {
          CoqworkmgrApi$ReactTemplate.giveback(1);
          got_token[0] = /* false */0;
          return /* () */0;
        } else {
          return 0;
        }
      };
      var stop_waiting = [/* false */0];
      var expiration_date = [[/* false */0]];
      var pick_task = function () {
        stm_prerr_endline("waiting for a task");
        var partial_arg = worker_age[0];
        var match = TQueue$ReactTemplate.pop(/* Some */[(function (param) {
                  var age = partial_arg;
                  var param$1 = param;
                  if (param$1[1][0]) {
                    return /* false */0;
                  } else {
                    return Curry._2(funarg[/* task_match */3], age, param$1[0]);
                  }
                })], /* Some */[stop_waiting], queue);
        var task = match[0];
        expiration_date[0] = match[1];
        last_task[0] = /* Some */[task];
        stm_prerr_endline("got task: " + Curry._1(funarg[/* name_of_task */9], task));
        return task;
      };
      var get_exec_token = function () {
        CoqworkmgrApi$ReactTemplate.get(1);
        got_token[0] = /* true */1;
        return stm_prerr_endline("got execution token");
      };
      var kill_if = function () {
        try {
          var _param = /* () */0;
          while(true) {
            if (Curry._1(is_alive, proc)) {
              if (Curry._1(cancelled, /* () */0) || expiration_date[0][0]) {
                stop_waiting[0] = /* true */1;
                TQueue$ReactTemplate.broadcast(queue);
                return Curry._1(kill, proc);
              } else {
                Unix.sleep(1);
                _param = /* () */0;
                continue ;
                
              }
            } else {
              return /* () */0;
            }
          };
        }
        catch (exn){
          if (exn === Sys.Break) {
            stop_waiting[0] = /* true */1;
            TQueue$ReactTemplate.broadcast(queue);
            return Curry._1(kill, proc);
          } else {
            throw exn;
          }
        }
      };
      Thread$ReactTemplate.create(kill_if, /* () */0);
      try {
        while(true) {
          report_status(/* Some */[id], "Idle");
          var task = pick_task(/* () */0);
          var match = Curry._2(funarg[/* request_of_task */2], worker_age[0], task);
          if (match) {
            try {
              get_exec_token(/* () */0);
              marshal_request(oc, /* Request */[match[0]]);
              var $$continue = (function(task){
              return function $$continue(_param) {
                while(true) {
                  var match = unmarshal_response(ic);
                  if (typeof match === "number") {
                    marshal_more_data(oc, /* MoreDataUnivLevel */[CList$ReactTemplate.init(10, (function () {
                                  return Curry._1(Universes$ReactTemplate.new_univ_id, /* () */0);
                                }))]);
                    _param = /* () */0;
                    continue ;
                    
                  } else if (match.tag) {
                    Curry._1(funarg[/* forward_feedback */7], match[0]);
                    _param = /* () */0;
                    continue ;
                    
                  } else {
                    var match$1 = Curry._3(funarg[/* use_response */4], worker_age[0], task, match[0]);
                    if (typeof match$1 === "number") {
                      throw Die;
                    } else {
                      var match$2 = match$1[1];
                      last_task[0] = /* None */0;
                      giveback_exec_token(/* () */0);
                      worker_age[0] = /* Old */[match$2[0]];
                      var l = match$2[1];
                      return Curry._2(Util$ReactTemplate.List[/* iter */9], (function (t) {
                                    return TQueue$ReactTemplate.push(queue, /* tuple */[
                                                t,
                                                expiration_date[0]
                                              ]);
                                  }), l);
                    }
                  }
                };
              }
              }(task));
              $$continue(/* () */0);
            }
            catch (raw_e){
              var e = Js_exn.internalToOCamlException(raw_e);
              var exit$2 = 0;
              var exit$3 = 0;
              var exit$4 = 0;
              var exit$5 = 0;
              if (e[0] === Caml_builtin_exceptions.sys_error) {
                throw e;
              } else {
                exit$5 = 4;
              }
              if (exit$5 === 4) {
                if (e[0] === Caml_builtin_exceptions.invalid_argument) {
                  throw e;
                } else {
                  exit$4 = 3;
                }
              }
              if (exit$4 === 3) {
                if (e === Caml_builtin_exceptions.end_of_file) {
                  throw e;
                } else if (e === Die) {
                  throw e;
                } else {
                  exit$3 = 2;
                }
              }
              if (exit$3 === 2) {
                if (e[0] === MarshalError) {
                  Curry._2(funarg[/* on_marshal_error */5], e[1], task);
                  throw Die;
                } else {
                  exit$2 = 1;
                }
              }
              if (exit$2 === 1) {
                stm_pr_err(Pp$ReactTemplate.seq(/* :: */[
                          Pp$ReactTemplate.str("Uncaught exception in worker manager: "),
                          /* :: */[
                            CErrors$ReactTemplate.print(/* None */0, e),
                            /* [] */0
                          ]
                        ]));
                Pervasives.flush_all(/* () */0);
                throw Die;
              }
              
            }
          } else {
            stm_prerr_endline("Task expired: " + Curry._1(funarg[/* name_of_task */9], task));
          }
        };
        return /* () */0;
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        var exit$6 = 0;
        var exit$7 = 0;
        var exit$8 = 0;
        if (exn === Die || exn === TQueue$ReactTemplate.BeingDestroyed) {
          exit$6 = 1;
        } else {
          exit$8 = 4;
        }
        if (exit$8 === 4) {
          if (exn[0] === Caml_builtin_exceptions.sys_error) {
            exit$6 = 2;
          } else {
            exit$7 = 3;
          }
        }
        if (exit$7 === 3) {
          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
            exit$6 = 2;
          } else if (exn === Caml_builtin_exceptions.end_of_file) {
            exit$6 = 2;
          } else {
            throw exn;
          }
        }
        switch (exit$6) {
          case 1 : 
              giveback_exec_token(/* () */0);
              Curry._1(kill, proc);
              return exit$1(/* () */0);
          case 2 : 
              Curry._1(funarg[/* on_task_cancellation_or_expiration_or_slave_death */6], last_task[0]);
              giveback_exec_token(/* () */0);
              Curry._1(kill, proc);
              return exit$1(/* () */0);
          
        }
      }
    };
    var Model = /* module */[
      /* spawn */spawn$1,
      /* manager */manager
    ];
    var Pool = WorkerPool$ReactTemplate.Make(Model);
    var create = function (size) {
      var cleaner = function (queue) {
        while(true) {
          try {
            TQueue$ReactTemplate.pop(/* Some */[(function (param) {
                      return param[1][0];
                    })], /* None */0, queue);
          }
          catch (exn){
            if (exn === TQueue$ReactTemplate.BeingDestroyed) {
              Thread$ReactTemplate.exit(/* () */0);
            } else {
              throw exn;
            }
          }
        };
        return /* () */0;
      };
      var queue = TQueue$ReactTemplate.create(/* () */0);
      return /* record */[
              /* active */Curry._2(Pool[/* create */0], queue, size),
              /* queue */queue,
              /* cleaner */size > 0 ? /* Some */[Thread$ReactTemplate.create(cleaner, queue)] : /* None */0
            ];
    };
    var destroy = function (param) {
      Curry._1(Pool[/* destroy */5], param[/* active */0]);
      return TQueue$ReactTemplate.destroy(param[/* queue */1]);
    };
    var broadcast = function (param) {
      return TQueue$ReactTemplate.broadcast(param[/* queue */1]);
    };
    var enqueue_task = function (param, t, cancel_switch) {
      stm_prerr_endline("Enqueue task " + Curry._1(funarg[/* name_of_task */9], t));
      return TQueue$ReactTemplate.push(param[/* queue */1], /* tuple */[
                  t,
                  cancel_switch
                ]);
    };
    var cancel_worker = function (param, n) {
      return Curry._2(Pool[/* cancel */3], n, param[/* active */0]);
    };
    var name_of_request = function (param) {
      return Curry._1(funarg[/* name_of_request */10], param[0]);
    };
    var set_order = function (param, cmp) {
      return TQueue$ReactTemplate.set_order(param[/* queue */1], (function (param, param$1) {
                    return Curry._2(cmp, param[0], param$1[0]);
                  }));
    };
    var join = function (param) {
      var active = param[/* active */0];
      if (Curry._1(Pool[/* is_empty */1], active)) {
        return 0;
      } else {
        return TQueue$ReactTemplate.wait_until_n_are_waiting_and_queue_empty(Curry._1(Pool[/* n_workers */2], active) + 1 | 0, param[/* queue */1]);
      }
    };
    var cancel_all = function (param) {
      TQueue$ReactTemplate.clear(param[/* queue */1]);
      return Curry._1(Pool[/* cancel_all */4], param[/* active */0]);
    };
    var slave_ic = [/* None */0];
    var slave_oc = [/* None */0];
    var init_stdout = function () {
      var match = Spawned$ReactTemplate.get_channels(/* () */0);
      slave_oc[0] = /* Some */[match[1]];
      slave_ic[0] = /* Some */[match[0]];
      return /* () */0;
    };
    var bufferize = function (f) {
      var l = [/* [] */0];
      return (function () {
          var match = l[0];
          if (match) {
            l[0] = match[1];
            return match[0];
          } else {
            var data = Curry._1(f, /* () */0);
            l[0] = Curry._1(Util$ReactTemplate.List[/* tl */2], data);
            return Curry._1(Util$ReactTemplate.List[/* hd */1], data);
          }
        });
    };
    var slave_handshake = function () {
      return Curry._2(Pool[/* worker_handshake */6], Option$ReactTemplate.get(slave_ic[0]), Option$ReactTemplate.get(slave_oc[0]));
    };
    var pp_pid = function (pp) {
      return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str(Spawned$ReactTemplate.process_id(/* () */0) + " "), pp);
    };
    var debug_with_pid = function (fb) {
      var match = fb[/* contents */3];
      if (typeof match === "number" || !(match.tag === 8 && match[0] === 0)) {
        return fb;
      } else {
        return /* record */[
                /* doc_id */fb[/* doc_id */0],
                /* span_id */fb[/* span_id */1],
                /* route */fb[/* route */2],
                /* contents : Message */Block.__(8, [
                    /* Debug */0,
                    match[1],
                    pp_pid(match[2])
                  ])
              ];
      }
    };
    var main_loop = function () {
      Feedback$ReactTemplate.add_feeder((function (x) {
              var oc = Option$ReactTemplate.get(slave_oc[0]);
              var fb = x;
              Marshal.to_channel(oc, /* RespFeedback */Block.__(1, [debug_with_pid(fb)]), /* [] */0);
              return Pervasives.flush(oc);
            }));
      Curry._1(Universes$ReactTemplate.set_remote_new_univ_id, bufferize((function () {
                  marshal_response(Option$ReactTemplate.get(slave_oc[0]), /* RespGetCounterNewUnivLevel */0);
                  return unmarshal_more_data(Option$ReactTemplate.get(slave_ic[0]))[0];
                })));
      var working = /* false */0;
      slave_handshake(/* () */0);
      while(true) {
        try {
          working = /* false */0;
          var request = unmarshal_request(Option$ReactTemplate.get(slave_ic[0]));
          working = /* true */1;
          report_status(/* None */0, Curry._1(funarg[/* name_of_request */10], request[0]));
          var response = slave_respond(request);
          report_status(/* None */0, "Idle");
          marshal_response(Option$ReactTemplate.get(slave_oc[0]), response);
          CEphemeron$ReactTemplate.clear(/* () */0);
        }
        catch (raw_e){
          var e = Js_exn.internalToOCamlException(raw_e);
          var exit = 0;
          var exit$1 = 0;
          if (e[0] === MarshalError) {
            stm_pr_err(Pp$ReactTemplate.prlist(Pp$ReactTemplate.str, /* :: */[
                      "Fatal marshal error: ",
                      /* :: */[
                        e[1],
                        /* [] */0
                      ]
                    ]));
            Pervasives.flush_all(/* () */0);
            Pervasives.exit(2);
          } else {
            exit$1 = 2;
          }
          if (exit$1 === 2) {
            if (e === Caml_builtin_exceptions.end_of_file) {
              stm_prerr_endline("connection lost");
              Pervasives.flush_all(/* () */0);
              Pervasives.exit(2);
            } else {
              exit = 1;
            }
          }
          if (exit === 1) {
            stm_pr_err(Pp$ReactTemplate.seq(/* :: */[
                      Pp$ReactTemplate.str("Slave: critical exception: "),
                      /* :: */[
                        CErrors$ReactTemplate.print(/* None */0, e),
                        /* [] */0
                      ]
                    ]));
            Pervasives.flush_all(/* () */0);
            Pervasives.exit(1);
          }
          
        }
      };
      return /* () */0;
    };
    var clear = function (param) {
      if (!Curry._1(Pool[/* is_empty */1], param[/* active */0])) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "asyncTaskQueue.ml",
                349,
                4
              ]
            ];
      }
      return TQueue$ReactTemplate.clear(param[/* queue */1]);
    };
    var snapshot = function (param) {
      return Curry._2(Util$ReactTemplate.List[/* map */10], (function (prim) {
                    return prim[0];
                  }), TQueue$ReactTemplate.wait_until_n_are_waiting_then_snapshot(Curry._1(Pool[/* n_workers */2], param[/* active */0]), param[/* queue */1]));
    };
    var with_n_workers = function (n, f) {
      var q = create(n);
      try {
        var rc = Curry._1(f, q);
        destroy(q);
        return rc;
      }
      catch (raw_e){
        var e = Js_exn.internalToOCamlException(raw_e);
        var e$1 = CErrors$ReactTemplate.push(e);
        destroy(q);
        return Util$ReactTemplate.iraise(e$1);
      }
    };
    var n_workers = function (param) {
      return Curry._1(Pool[/* n_workers */2], param[/* active */0]);
    };
    return /* module */[
            /* Die */Die,
            /* slave_respond */slave_respond,
            /* MarshalError */MarshalError,
            /* marshal_to_channel */marshal_to_channel,
            /* marshal_err */marshal_err,
            /* marshal_request */marshal_request,
            /* unmarshal_request */unmarshal_request,
            /* marshal_response */marshal_response,
            /* unmarshal_response */unmarshal_response,
            /* marshal_more_data */marshal_more_data,
            /* unmarshal_more_data */unmarshal_more_data,
            /* report_status */report_status,
            /* Worker */Worker,
            /* Model */Model,
            /* Pool */Pool,
            /* create */create,
            /* destroy */destroy,
            /* broadcast */broadcast,
            /* enqueue_task */enqueue_task,
            /* cancel_worker */cancel_worker,
            /* name_of_request */name_of_request,
            /* set_order */set_order,
            /* join */join,
            /* cancel_all */cancel_all,
            /* slave_ic */slave_ic,
            /* slave_oc */slave_oc,
            /* init_stdout */init_stdout,
            /* bufferize */bufferize,
            /* slave_handshake */slave_handshake,
            /* pp_pid */pp_pid,
            /* debug_with_pid */debug_with_pid,
            /* main_loop */main_loop,
            /* clear */clear,
            /* snapshot */snapshot,
            /* with_n_workers */with_n_workers,
            /* n_workers */n_workers
          ];
  };
  return (function (funarg) {
      var $$let$1 = $$let(funarg);
      return [
              $$let$1[26],
              $$let$1[31]
            ];
    });
}

exports.async_proofs_flags_for_workers = async_proofs_flags_for_workers;
exports.MakeQueue = MakeQueue;
exports.MakeWorker = MakeWorker;
/* Unix Not a pure module */
