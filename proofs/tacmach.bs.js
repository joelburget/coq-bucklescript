// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pp$ReactTemplate = require("../src/pp.bs.js");
var Evd$ReactTemplate = require("../src/evd.bs.js");
var Goal$ReactTemplate = require("../src/goal.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Logic$ReactTemplate = require("../src/logic.bs.js");
var Tacred$ReactTemplate = require("../src/tacred.bs.js");
var Typing$ReactTemplate = require("../src/typing.bs.js");
var Context$ReactTemplate = require("../src/context.bs.js");
var EConstr$ReactTemplate = require("../src/eConstr.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Namegen$ReactTemplate = require("../src/namegen.bs.js");
var Redexpr$ReactTemplate = require("./redexpr.bs.js");
var Refiner$ReactTemplate = require("../src/refiner.bs.js");
var Termops$ReactTemplate = require("../src/termops.bs.js");
var Retyping$ReactTemplate = require("../src/retyping.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Proofview$ReactTemplate = require("../src/proofview.bs.js");
var Universes$ReactTemplate = require("../src/universes.bs.js");
var Constrintern$ReactTemplate = require("../src/constrintern.bs.js");
var Reductionops$ReactTemplate = require("../src/reductionops.bs.js");

function re_sig(it, gc) {
  return /* record */[
          /* it */it,
          /* sigma */gc
        ];
}

function test_conversion(env, sigma, pb, c1, c2) {
  return Reductionops$ReactTemplate.check_conv(/* Some */[pb], /* None */0, env, sigma, c1, c2);
}

function pf_concl(gls) {
  return Goal$ReactTemplate.V82[/* concl */3](Refiner$ReactTemplate.project(gls), Refiner$ReactTemplate.sig_it(gls));
}

function pf_hyps_types(gls) {
  var sign = Environ$ReactTemplate.named_context(Refiner$ReactTemplate.pf_env(gls));
  return Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                if (param.tag) {
                  return /* tuple */[
                          param[0],
                          EConstr$ReactTemplate.of_constr(param[2])
                        ];
                } else {
                  return /* tuple */[
                          param[0],
                          EConstr$ReactTemplate.of_constr(param[1])
                        ];
                }
              }), sign);
}

function pf_nth_hyp_id(gls, n) {
  return Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], Curry._2(Util$ReactTemplate.List[/* nth */3], Refiner$ReactTemplate.pf_hyps(gls), n - 1 | 0));
}

function pf_last_hyp(gl) {
  return Curry._1(Util$ReactTemplate.List[/* hd */1], Refiner$ReactTemplate.pf_hyps(gl));
}

function pf_get_hyp(gls, id) {
  var env = Refiner$ReactTemplate.pf_env(gls);
  var sigma = Refiner$ReactTemplate.project(gls);
  try {
    return Context$ReactTemplate.Named[/* lookup */4](id, Refiner$ReactTemplate.pf_hyps(gls));
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      throw [
            Logic$ReactTemplate.RefinerError,
            env,
            sigma,
            /* NoSuchHyp */Block.__(7, [id])
          ];
    } else {
      throw exn;
    }
  }
}

function pf_get_hyp_typ(gls, id) {
  return Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], pf_get_hyp(gls, id));
}

function pf_ids_of_hyps(gls) {
  return Termops$ReactTemplate.ids_of_named_context(Refiner$ReactTemplate.pf_hyps(gls));
}

function pf_get_new_id(id, gls) {
  return Namegen$ReactTemplate.next_ident_away(id, Environ$ReactTemplate.ids_of_named_context_val(Environ$ReactTemplate.named_context_val(Refiner$ReactTemplate.pf_env(gls))));
}

function pf_global(gls, id) {
  return EConstr$ReactTemplate.of_constr(Universes$ReactTemplate.constr_of_global(Constrintern$ReactTemplate.construct_reference(Refiner$ReactTemplate.pf_hyps(gls), id)));
}

function pf_reduction_of_red_expr(gls, re, c) {
  var match = Redexpr$ReactTemplate.reduction_of_red_expr(Refiner$ReactTemplate.pf_env(gls))(re);
  var sigma = Refiner$ReactTemplate.project(gls);
  return Curry._3(match[0], Refiner$ReactTemplate.pf_env(gls), sigma, c);
}

function pf_apply(f, gls) {
  return Curry._2(f, Refiner$ReactTemplate.pf_env(gls), Refiner$ReactTemplate.project(gls));
}

function pf_eapply(f, gls, x) {
  return Evd$ReactTemplate.on_sig(gls, (function (evm) {
                return Curry._3(f, Refiner$ReactTemplate.pf_env(gls), evm, x);
              }));
}

function pf_whd_all(param) {
  return pf_apply(Reductionops$ReactTemplate.whd_all, param);
}

function pf_hnf_constr(param) {
  return pf_apply(Tacred$ReactTemplate.hnf_constr, param);
}

function pf_nf(param) {
  return pf_apply(Tacred$ReactTemplate.simpl, param);
}

function pf_nf_betaiota(param) {
  return pf_apply(Reductionops$ReactTemplate.nf_betaiota, param);
}

function pf_compute(param) {
  return pf_apply(Tacred$ReactTemplate.compute, param);
}

function pf_unfoldn(ubinds) {
  return (function (param) {
      return pf_apply((function (param, param$1, param$2) {
                    return Tacred$ReactTemplate.unfoldn(ubinds, param, param$1, param$2);
                  }), param);
    });
}

function pf_unsafe_type_of(param) {
  return pf_apply(Typing$ReactTemplate.unsafe_type_of, param);
}

function pf_type_of(param) {
  return pf_apply((function (eta) {
                return (function (param, param$1) {
                    return Typing$ReactTemplate.type_of(/* None */0, eta, param, param$1);
                  });
              }), param);
}

function pf_get_type_of(param) {
  return pf_apply((function (eta) {
                return (function (param, param$1) {
                    return Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, eta, param, param$1);
                  });
              }), param);
}

function pf_conv_x(gl) {
  return Curry._1(pf_apply(test_conversion, gl), /* CONV */0);
}

function pf_conv_x_leq(gl) {
  return Curry._1(pf_apply(test_conversion, gl), /* CUMUL */1);
}

function pf_const_value(param) {
  return pf_apply((function (env, _, c) {
                return EConstr$ReactTemplate.of_constr(Environ$ReactTemplate.constant_value_in(env, c));
              }), param);
}

function pf_reduce_to_quantified_ind(param) {
  return pf_apply(Tacred$ReactTemplate.reduce_to_quantified_ind, param);
}

function pf_reduce_to_atomic_ind(param) {
  return pf_apply(Tacred$ReactTemplate.reduce_to_atomic_ind, param);
}

function pf_hnf_type_of(gls) {
  var partial_arg = pf_whd_all(gls);
  var partial_arg$1 = pf_get_type_of(gls);
  return (function (param) {
      return Util$ReactTemplate.$percent$great(partial_arg$1, partial_arg, param);
    });
}

function refine_no_check(c, gl) {
  var c$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](c);
  return Curry._2(Refiner$ReactTemplate.refiner, /* Refine */[c$1], gl);
}

function refine(c) {
  return (function (param) {
      return Logic$ReactTemplate.with_check((function (param) {
                    return refine_no_check(c, param);
                  }), param);
    });
}

function db_pr_goal(sigma, g) {
  var env = Goal$ReactTemplate.V82[/* env */0](sigma, g);
  var penv = Termops$ReactTemplate.print_named_context(env);
  var pc = Termops$ReactTemplate.print_constr_env(env, sigma, Goal$ReactTemplate.V82[/* concl */3](sigma, g));
  return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("  "), Pp$ReactTemplate.hv(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(penv, Pp$ReactTemplate.fnl(/* () */0)), Pp$ReactTemplate.str("============================")), Pp$ReactTemplate.fnl(/* () */0)), Pp$ReactTemplate.str(" ")), pc))), Pp$ReactTemplate.fnl(/* () */0));
}

function pr_gls(gls) {
  return Pp$ReactTemplate.hov(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Termops$ReactTemplate.pr_evar_map(/* None */0, /* Some */[2], Evd$ReactTemplate.sig_sig(gls)), Pp$ReactTemplate.fnl(/* () */0)), db_pr_goal(Refiner$ReactTemplate.project(gls), Refiner$ReactTemplate.sig_it(gls))));
}

function pr_glls(glls) {
  var partial_arg = Refiner$ReactTemplate.project(glls);
  return Pp$ReactTemplate.hov(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Termops$ReactTemplate.pr_evar_map(/* None */0, /* Some */[2], Evd$ReactTemplate.sig_sig(glls)), Pp$ReactTemplate.fnl(/* () */0)), Pp$ReactTemplate.prlist_with_sep(Pp$ReactTemplate.fnl, (function (param) {
                        return db_pr_goal(partial_arg, param);
                      }), Refiner$ReactTemplate.sig_it(glls))));
}

function project(gl) {
  return Proofview$ReactTemplate.Goal[/* sigma */5](gl);
}

function pf_apply$1(f, gl) {
  return Curry._2(f, Proofview$ReactTemplate.Goal[/* env */4](gl), Proofview$ReactTemplate.Goal[/* sigma */5](gl));
}

function of_old(f, gl) {
  return Curry._1(f, /* record */[
              /* it */Proofview$ReactTemplate.Goal[/* goal */13](gl),
              /* sigma */Proofview$ReactTemplate.Goal[/* sigma */5](gl)
            ]);
}

function pf_global$1(id, gl) {
  var hyps = Proofview$ReactTemplate.Goal[/* hyps */3](gl);
  return Constrintern$ReactTemplate.construct_reference(hyps, id);
}

var pf_env = Proofview$ReactTemplate.Goal[/* env */4];

var pf_concl$1 = Proofview$ReactTemplate.Goal[/* concl */2];

function pf_unsafe_type_of$1(gl, t) {
  return Curry._1(pf_apply$1(Typing$ReactTemplate.unsafe_type_of, gl), t);
}

function pf_type_of$1(gl, t) {
  return Curry._1(pf_apply$1((function (eta) {
                    return (function (param, param$1) {
                        return Typing$ReactTemplate.type_of(/* None */0, eta, param, param$1);
                      });
                  }), gl), t);
}

function pf_conv_x$1(gl, t1, t2) {
  return Curry._2(pf_apply$1((function (eta) {
                    return (function (param) {
                        return Reductionops$ReactTemplate.is_conv(/* None */0, eta, param);
                      });
                  }), gl), t1, t2);
}

function pf_ids_of_hyps$1(gl) {
  return Termops$ReactTemplate.ids_of_named_context(Proofview$ReactTemplate.Goal[/* hyps */3](gl));
}

function pf_ids_set_of_hyps(gl) {
  var env = Proofview$ReactTemplate.Goal[/* env */4](gl);
  return Environ$ReactTemplate.ids_of_named_context_val(Environ$ReactTemplate.named_context_val(env));
}

function pf_get_new_id$1(id, gl) {
  var ids = pf_ids_set_of_hyps(gl);
  return Namegen$ReactTemplate.next_ident_away(id, ids);
}

function pf_get_hyp$1(id, gl) {
  var hyps = Proofview$ReactTemplate.Goal[/* env */4](gl);
  var sigma = Proofview$ReactTemplate.Goal[/* sigma */5](gl);
  try {
    return EConstr$ReactTemplate.lookup_named(id, hyps);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      throw [
            Logic$ReactTemplate.RefinerError,
            hyps,
            sigma,
            /* NoSuchHyp */Block.__(7, [id])
          ];
    } else {
      throw exn;
    }
  }
}

function pf_get_hyp_typ$1(id, gl) {
  return Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], pf_get_hyp$1(id, gl));
}

function pf_hyps_types$1(gl) {
  var env = Proofview$ReactTemplate.Goal[/* env */4](gl);
  var sign = Environ$ReactTemplate.named_context(env);
  return Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                if (param.tag) {
                  return /* tuple */[
                          param[0],
                          EConstr$ReactTemplate.of_constr(param[2])
                        ];
                } else {
                  return /* tuple */[
                          param[0],
                          EConstr$ReactTemplate.of_constr(param[1])
                        ];
                }
              }), sign);
}

function pf_last_hyp$1(gl) {
  return Curry._1(Util$ReactTemplate.List[/* hd */1], Proofview$ReactTemplate.Goal[/* hyps */3](gl));
}

function pf_nf_concl(gl) {
  var concl = Proofview$ReactTemplate.Goal[/* concl */2](gl);
  var sigma = Proofview$ReactTemplate.Goal[/* sigma */5](gl);
  return Reductionops$ReactTemplate.nf_evar(sigma, concl);
}

function pf_get_type_of$1(gl, t) {
  return Curry._1(pf_apply$1((function (eta) {
                    return (function (param, param$1) {
                        return Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, eta, param, param$1);
                      });
                  }), gl), t);
}

function pf_reduce_to_quantified_ind$1(gl, t) {
  return Curry._1(pf_apply$1(Tacred$ReactTemplate.reduce_to_quantified_ind, gl), t);
}

function pf_hnf_constr$1(gl, t) {
  return Curry._1(pf_apply$1(Tacred$ReactTemplate.hnf_constr, gl), t);
}

function pf_hnf_type_of$1(gl, t) {
  return Curry._1(pf_apply$1(Reductionops$ReactTemplate.whd_all, gl), pf_get_type_of$1(gl, t));
}

function pf_whd_all$1(gl, t) {
  return Curry._1(pf_apply$1(Reductionops$ReactTemplate.whd_all, gl), t);
}

function pf_compute$1(gl, t) {
  return Curry._1(pf_apply$1(Tacred$ReactTemplate.compute, gl), t);
}

function pf_nf_evar(gl, t) {
  return Reductionops$ReactTemplate.nf_evar(Proofview$ReactTemplate.Goal[/* sigma */5](gl), t);
}

var sig_it = Refiner$ReactTemplate.sig_it;

var project$1 = Refiner$ReactTemplate.project;

var unpackage = Refiner$ReactTemplate.unpackage;

var repackage = Refiner$ReactTemplate.repackage;

var apply_sig_tac = Refiner$ReactTemplate.apply_sig_tac;

var pf_env$1 = Refiner$ReactTemplate.pf_env;

var pf_hyps = Refiner$ReactTemplate.pf_hyps;

var pf_reduce = pf_apply;

var pf_e_reduce = pf_apply;

var refiner = Refiner$ReactTemplate.refiner;

var New = [
  pf_apply$1,
  pf_global$1,
  of_old,
  project,
  pf_env,
  pf_concl$1,
  pf_unsafe_type_of$1,
  pf_get_type_of$1,
  pf_type_of$1,
  pf_conv_x$1,
  pf_get_new_id$1,
  pf_ids_of_hyps$1,
  pf_ids_set_of_hyps,
  pf_hyps_types$1,
  pf_get_hyp$1,
  pf_get_hyp_typ$1,
  pf_last_hyp$1,
  pf_nf_concl,
  pf_reduce_to_quantified_ind$1,
  pf_hnf_constr$1,
  pf_hnf_type_of$1,
  pf_whd_all$1,
  pf_compute$1,
  pf_nf_evar
];

exports.sig_it = sig_it;
exports.project = project$1;
exports.re_sig = re_sig;
exports.unpackage = unpackage;
exports.repackage = repackage;
exports.apply_sig_tac = apply_sig_tac;
exports.pf_concl = pf_concl;
exports.pf_env = pf_env$1;
exports.pf_hyps = pf_hyps;
exports.pf_hyps_types = pf_hyps_types;
exports.pf_nth_hyp_id = pf_nth_hyp_id;
exports.pf_last_hyp = pf_last_hyp;
exports.pf_ids_of_hyps = pf_ids_of_hyps;
exports.pf_global = pf_global;
exports.pf_unsafe_type_of = pf_unsafe_type_of;
exports.pf_type_of = pf_type_of;
exports.pf_hnf_type_of = pf_hnf_type_of;
exports.pf_get_hyp = pf_get_hyp;
exports.pf_get_hyp_typ = pf_get_hyp_typ;
exports.pf_get_new_id = pf_get_new_id;
exports.pf_reduction_of_red_expr = pf_reduction_of_red_expr;
exports.pf_apply = pf_apply;
exports.pf_eapply = pf_eapply;
exports.pf_reduce = pf_reduce;
exports.pf_e_reduce = pf_e_reduce;
exports.pf_whd_all = pf_whd_all;
exports.pf_hnf_constr = pf_hnf_constr;
exports.pf_nf = pf_nf;
exports.pf_nf_betaiota = pf_nf_betaiota;
exports.pf_reduce_to_quantified_ind = pf_reduce_to_quantified_ind;
exports.pf_reduce_to_atomic_ind = pf_reduce_to_atomic_ind;
exports.pf_compute = pf_compute;
exports.pf_unfoldn = pf_unfoldn;
exports.pf_const_value = pf_const_value;
exports.pf_conv_x = pf_conv_x;
exports.pf_conv_x_leq = pf_conv_x_leq;
exports.refiner = refiner;
exports.refine_no_check = refine_no_check;
exports.refine = refine;
exports.pr_gls = pr_gls;
exports.pr_glls = pr_glls;
exports.New = New;
/* Pp-ReactTemplate Not a pure module */
