// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Lib$ReactTemplate = require("./lib.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Global$ReactTemplate = require("./global.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Summary$ReactTemplate = require("./summary.bs.js");
var Libnames$ReactTemplate = require("./libnames.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var vartab = Summary$ReactTemplate.ref(/* None */0, "VARIABLE", Names$ReactTemplate.Id[/* Map */10][/* empty */0]);

function add_variable_data(id, o) {
  vartab[0] = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], id, o, vartab[0]);
  return /* () */0;
}

function variable_path(id) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, vartab[0])[0];
}

function variable_opacity(id) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, vartab[0])[1];
}

function variable_kind(id) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, vartab[0])[4];
}

function variable_context(id) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, vartab[0])[2];
}

function variable_polymorphic(id) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, vartab[0])[3];
}

function variable_secpath(id) {
  var dir = Libnames$ReactTemplate.drop_dirpath_prefix(Lib$ReactTemplate.library_dp(/* () */0), variable_path(id));
  return Libnames$ReactTemplate.make_qualid(dir, id);
}

function variable_exists(id) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* mem */2], id, vartab[0]);
}

var csttab = Summary$ReactTemplate.ref(/* None */0, "CONSTANT", Names$ReactTemplate.Cmap[/* empty */0]);

function add_constant_kind(kn, k) {
  csttab[0] = Curry._3(Names$ReactTemplate.Cmap[/* add */3], kn, k, csttab[0]);
  return /* () */0;
}

function constant_kind(kn) {
  return Curry._2(Names$ReactTemplate.Cmap[/* find */21], kn, csttab[0]);
}

function initialize_named_context_for_proof() {
  var sign = Global$ReactTemplate.named_context(/* () */0);
  return Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (d, signv) {
                var id = Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d);
                var d$1 = variable_opacity(id) ? /* LocalAssum */Block.__(0, [
                      id,
                      Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], d)
                    ]) : d;
                return Environ$ReactTemplate.push_named_context_val(d$1, signv);
              }), sign, Environ$ReactTemplate.empty_named_context_val);
}

function last_section_hyps(dir) {
  return Context$ReactTemplate.Named[/* fold_outside */9]((function (d, sec_ids) {
                var id = Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d);
                try {
                  if (Curry._2(Names$ReactTemplate.DirPath[/* equal */0], dir, variable_path(id))) {
                    return /* :: */[
                            id,
                            sec_ids
                          ];
                  } else {
                    return sec_ids;
                  }
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    return sec_ids;
                  } else {
                    throw exn;
                  }
                }
              }), Environ$ReactTemplate.named_context(Global$ReactTemplate.env(/* () */0)), /* [] */0);
}

exports.add_variable_data = add_variable_data;
exports.variable_path = variable_path;
exports.variable_secpath = variable_secpath;
exports.variable_kind = variable_kind;
exports.variable_opacity = variable_opacity;
exports.variable_context = variable_context;
exports.variable_polymorphic = variable_polymorphic;
exports.variable_exists = variable_exists;
exports.add_constant_kind = add_constant_kind;
exports.constant_kind = constant_kind;
exports.initialize_named_context_for_proof = initialize_named_context_for_proof;
exports.last_section_hyps = last_section_hyps;
/* vartab Not a pure module */
