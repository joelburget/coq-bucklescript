// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Unix = require("bs-platform/lib/js/unix.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Str$ReactTemplate = require("../shims/str.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function string_of_priority(param) {
  if (param !== 0) {
    return "high";
  } else {
    return "low";
  }
}

function priority_of_string(param) {
  switch (param) {
    case "high" : 
        return /* High */1;
    case "low" : 
        return /* Low */0;
    default:
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "priority_of_string"
          ];
  }
}

var ParseError = Caml_exceptions.create("CoqworkmgrApi-ReactTemplate.ParseError");

function strip_r(s) {
  var len = s.length;
  if (Caml_string.get(s, len - 1 | 0) !== /* "\r" */13) {
    return s;
  } else {
    return $$String.sub(s, 0, len - 1 | 0);
  }
}

function positive_int_of_string(n) {
  try {
    var n$1 = Caml_format.caml_int_of_string(n);
    if (n$1 <= 0) {
      throw ParseError;
    } else {
      return n$1;
    }
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      throw ParseError;
    } else if (exn[0] === Caml_builtin_exceptions.failure) {
      throw ParseError;
    } else {
      throw exn;
    }
  }
}

function parse_request(s) {
  var match = Str$ReactTemplate.split(Str$ReactTemplate.regexp(" "), strip_r(s));
  if (match) {
    switch (match[0]) {
      case "GET" : 
          var match$1 = match[1];
          if (match$1) {
            if (match$1[1]) {
              throw ParseError;
            } else {
              return /* Get */Block.__(1, [positive_int_of_string(match$1[0])]);
            }
          } else {
            throw ParseError;
          }
          break;
      case "GIVEBACK" : 
          var match$2 = match[1];
          if (match$2) {
            if (match$2[1]) {
              throw ParseError;
            } else {
              return /* GiveBack */Block.__(3, [positive_int_of_string(match$2[0])]);
            }
          } else {
            throw ParseError;
          }
          break;
      case "HELLO" : 
          var match$3 = match[1];
          if (match$3) {
            switch (match$3[0]) {
              case "HIGH" : 
                  if (match$3[1]) {
                    throw ParseError;
                  } else {
                    return /* Hello */Block.__(0, [/* High */1]);
                  }
                  break;
              case "LOW" : 
                  if (match$3[1]) {
                    throw ParseError;
                  } else {
                    return /* Hello */Block.__(0, [/* Low */0]);
                  }
                  break;
              default:
                throw ParseError;
            }
          } else {
            throw ParseError;
          }
          break;
      case "PING" : 
          if (match[1]) {
            throw ParseError;
          } else {
            return /* Ping */0;
          }
          break;
      case "TRYGET" : 
          var match$4 = match[1];
          if (match$4) {
            if (match$4[1]) {
              throw ParseError;
            } else {
              return /* TryGet */Block.__(2, [positive_int_of_string(match$4[0])]);
            }
          } else {
            throw ParseError;
          }
          break;
      default:
        throw ParseError;
    }
  } else {
    throw ParseError;
  }
}

function parse_response(s) {
  var match = Str$ReactTemplate.split(Str$ReactTemplate.regexp(" "), strip_r(s));
  if (match) {
    switch (match[0]) {
      case "NOLUCK" : 
          if (match[1]) {
            throw ParseError;
          } else {
            return /* Noluck */0;
          }
          break;
      case "PONG" : 
          var match$1 = match[1];
          if (match$1) {
            var match$2 = match$1[1];
            if (match$2) {
              var match$3 = match$2[1];
              if (match$3) {
                if (match$3[1]) {
                  throw ParseError;
                } else {
                  var n;
                  try {
                    n = Caml_format.caml_int_of_string(match$1[0]);
                  }
                  catch (exn){
                    throw ParseError;
                  }
                  var m;
                  try {
                    m = Caml_format.caml_int_of_string(match$2[0]);
                  }
                  catch (exn$1){
                    throw ParseError;
                  }
                  var p;
                  try {
                    p = Caml_format.caml_int_of_string(match$3[0]);
                  }
                  catch (exn$2){
                    throw ParseError;
                  }
                  return /* Pong */Block.__(1, [
                            n,
                            m,
                            p
                          ]);
                }
              } else {
                throw ParseError;
              }
            } else {
              throw ParseError;
            }
          } else {
            throw ParseError;
          }
          break;
      case "TOKENS" : 
          var match$4 = match[1];
          if (match$4) {
            if (match$4[1]) {
              throw ParseError;
            } else {
              return /* Tokens */Block.__(0, [positive_int_of_string(match$4[0])]);
            }
          } else {
            throw ParseError;
          }
          break;
      default:
        throw ParseError;
    }
  } else {
    throw ParseError;
  }
}

function print_request(param) {
  if (typeof param === "number") {
    return "PING\n";
  } else {
    switch (param.tag | 0) {
      case 0 : 
          if (param[0] !== 0) {
            return "HELLO HIGH\n";
          } else {
            return "HELLO LOW\n";
          }
      case 1 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "GET ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "GET %d\n"
                        ]), param[0]);
      case 2 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "TRYGET ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "TRYGET %d\n"
                        ]), param[0]);
      case 3 : 
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "GIVEBACK ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "GIVEBACK %d\n"
                        ]), param[0]);
      
    }
  }
}

function print_response(param) {
  if (typeof param === "number") {
    return "NOLUCK\n";
  } else if (param.tag) {
    return Curry._3(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "PONG ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* Char_literal */Block.__(12, [
                                        /* " " */32,
                                        /* Int */Block.__(4, [
                                            /* Int_d */0,
                                            /* No_padding */0,
                                            /* No_precision */0,
                                            /* Char_literal */Block.__(12, [
                                                /* "\n" */10,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "PONG %d %d %d\n"
                  ]), param[0], param[1], param[2]);
  } else {
    return Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "TOKENS ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "TOKENS %d\n"
                  ]), param[0]);
  }
}

function connect(s) {
  try {
    var match = Str$ReactTemplate.split(Str$ReactTemplate.regexp(":"), s);
    if (match) {
      var match$1 = match[1];
      if (match$1) {
        if (match$1[1]) {
          return /* None */0;
        } else {
          var s$1 = Unix.socket(/* PF_INET */1, /* SOCK_STREAM */0, 0);
          Unix.connect(s$1, /* ADDR_INET */Block.__(1, [
                  Unix.inet_addr_of_string(match[0]),
                  Caml_format.caml_int_of_string(match$1[0])
                ]));
          return /* Some */[s$1];
        }
      } else {
        return /* None */0;
      }
    } else {
      return /* None */0;
    }
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Unix.Unix_error) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

var manager = [/* None */0];

function option_map(f, param) {
  if (param) {
    return /* Some */[Curry._1(f, param[0])];
  } else {
    return /* None */0;
  }
}

function init(p) {
  try {
    var sock = Caml_sys.caml_sys_getenv("COQWORKMGR_SOCK");
    manager[0] = option_map((function (s) {
            var cout = Unix.out_channel_of_descr(s);
            Pervasives.set_binary_mode_out(cout, /* true */1);
            var cin = Unix.in_channel_of_descr(s);
            Pervasives.set_binary_mode_in(cin, /* true */1);
            Pervasives.output_string(cout, print_request(/* Hello */Block.__(0, [p])));
            Pervasives.flush(cout);
            return /* tuple */[
                    cin,
                    cout
                  ];
          }), connect(sock));
    return /* () */0;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* () */0;
    } else if (exn === Caml_builtin_exceptions.end_of_file) {
      return /* () */0;
    } else {
      throw exn;
    }
  }
}

function with_manager(f, g) {
  try {
    var match = manager[0];
    if (match) {
      var match$1 = match[0];
      return Curry._2(g, match$1[0], match$1[1]);
    } else {
      return Curry._1(f, /* () */0);
    }
  }
  catch (exn){
    if (exn === ParseError) {
      manager[0] = /* None */0;
      return Curry._1(f, /* () */0);
    } else if (exn === Caml_builtin_exceptions.end_of_file) {
      manager[0] = /* None */0;
      return Curry._1(f, /* () */0);
    } else {
      throw exn;
    }
  }
}

function get(n) {
  return with_manager((function () {
                return n;
              }), (function (cin, cout) {
                Pervasives.output_string(cout, print_request(/* Get */Block.__(1, [n])));
                Pervasives.flush(cout);
                var l = Pervasives.input_line(cin);
                var match = parse_response(l);
                if (typeof match === "number") {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "coqworkmgr protocol error"
                      ];
                } else if (match.tag) {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "coqworkmgr protocol error"
                      ];
                } else {
                  return match[0];
                }
              }));
}

function tryget(n) {
  return with_manager((function () {
                return /* Some */[n];
              }), (function (cin, cout) {
                Pervasives.output_string(cout, print_request(/* TryGet */Block.__(2, [n])));
                Pervasives.flush(cout);
                var l = Pervasives.input_line(cin);
                var match = parse_response(l);
                if (typeof match === "number") {
                  return /* None */0;
                } else if (match.tag) {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "coqworkmgr protocol error"
                      ];
                } else {
                  return /* Some */[match[0]];
                }
              }));
}

function giveback(n) {
  return with_manager((function () {
                return /* () */0;
              }), (function (_, cout) {
                Pervasives.output_string(cout, print_request(/* GiveBack */Block.__(3, [n])));
                return Pervasives.flush(cout);
              }));
}

exports.string_of_priority = string_of_priority;
exports.priority_of_string = priority_of_string;
exports.init = init;
exports.get = get;
exports.tryget = tryget;
exports.giveback = giveback;
exports.connect = connect;
exports.ParseError = ParseError;
exports.parse_request = parse_request;
exports.parse_response = parse_response;
exports.print_request = print_request;
exports.print_response = print_response;
/* Unix Not a pure module */
