// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Stm$ReactTemplate = require("./stm.bs.js");
var Goal$ReactTemplate = require("./goal.bs.js");
var Proof$ReactTemplate = require("./proof.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var EConstr$ReactTemplate = require("./eConstr.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Termops$ReactTemplate = require("./termops.bs.js");
var Constrextern$ReactTemplate = require("./constrextern.bs.js");
var Proof_global$ReactTemplate = require("./proof_global.bs.js");

function get_goal_type(ppx, sigma, g) {
  return Curry._1(ppx, EConstr$ReactTemplate.to_constr(sigma, Goal$ReactTemplate.V82[/* concl */3](sigma, g)));
}

function get_goals_gen(ppx, doc, sid) {
  try {
    var match = Stm$ReactTemplate.state_of_id(doc, sid);
    if (typeof match === "number" || match[0] >= 106380200) {
      return /* None */0;
    } else {
      return Option$ReactTemplate.map((function (stm_st) {
                    return Proof$ReactTemplate.map_structured_proof(Proof_global$ReactTemplate.proof_of_state(stm_st[/* proof */1]), (function (param, param$1) {
                                  var ppx$1 = ppx;
                                  var sigma = param;
                                  var g = param$1;
                                  var env = Goal$ReactTemplate.V82[/* env */0](sigma, g);
                                  var ctx = Termops$ReactTemplate.compact_named_context(Environ$ReactTemplate.named_context(env));
                                  var ppx$2 = Curry._2(ppx$1, env, sigma);
                                  var hyps = List.map((function (param) {
                                          var ppx$3 = ppx$2;
                                          var param$1 = param;
                                          if (param$1.tag) {
                                            return /* tuple */[
                                                    param$1[0],
                                                    /* Some */[Curry._1(ppx$3, param$1[1])],
                                                    Curry._1(ppx$3, param$1[2])
                                                  ];
                                          } else {
                                            return /* tuple */[
                                                    param$1[0],
                                                    /* None */0,
                                                    Curry._1(ppx$3, param$1[1])
                                                  ];
                                          }
                                        }), ctx);
                                  return /* record */[
                                          /* name */Goal$ReactTemplate.uid(g),
                                          /* ty */get_goal_type(ppx$2, sigma, g),
                                          /* hyp */hyps
                                        ];
                                }));
                  }), match[1]);
    }
  }
  catch (exn){
    if (exn === Proof_global$ReactTemplate.NoCurrentProof) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function get_goals(param, param$1) {
  return get_goals_gen((function (_, _$1, x) {
                return x;
              }), param, param$1);
}

function get_egoals(param, param$1) {
  return get_goals_gen((function (env, evd, ec) {
                return Constrextern$ReactTemplate.extern_constr(/* None */0, /* true */1, env, evd, EConstr$ReactTemplate.of_constr(ec));
              }), param, param$1);
}

exports.get_goals = get_goals;
exports.get_egoals = get_egoals;
/* Stm-ReactTemplate Not a pure module */
