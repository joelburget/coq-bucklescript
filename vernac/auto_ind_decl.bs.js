// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Pp$ReactTemplate = require("../src/pp.bs.js");
var Evd$ReactTemplate = require("../src/evd.bs.js");
var Auto$ReactTemplate = require("../tactics/auto.bs.js");
var CAst$ReactTemplate = require("../src/cAst.bs.js");
var Term$ReactTemplate = require("../src/term.bs.js");
var Univ$ReactTemplate = require("../src/univ.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Vars$ReactTemplate = require("../src/vars.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var Sorts$ReactTemplate = require("../src/sorts.bs.js");
var Constr$ReactTemplate = require("../src/constr.bs.js");
var Coqlib$ReactTemplate = require("../library/coqlib.bs.js");
var Global$ReactTemplate = require("../src/global.bs.js");
var Pfedit$ReactTemplate = require("../src/pfedit.bs.js");
var UState$ReactTemplate = require("../src/uState.bs.js");
var CErrors$ReactTemplate = require("../src/cErrors.bs.js");
var Context$ReactTemplate = require("../src/context.bs.js");
var EConstr$ReactTemplate = require("../src/eConstr.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Namegen$ReactTemplate = require("../src/namegen.bs.js");
var Nameops$ReactTemplate = require("../src/nameops.bs.js");
var Printer$ReactTemplate = require("../src/printer.bs.js");
var Tacmach$ReactTemplate = require("../proofs/tacmach.bs.js");
var Tactics$ReactTemplate = require("../src/tactics.bs.js");
var Termops$ReactTemplate = require("../src/termops.bs.js");
var Equality$ReactTemplate = require("../tactics/equality.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Globnames$ReactTemplate = require("../src/globnames.bs.js");
var Inductive$ReactTemplate = require("../src/inductive.bs.js");
var Proofview$ReactTemplate = require("../src/proofview.bs.js");
var Tacticals$ReactTemplate = require("../tactics/tacticals.bs.js");
var Universes$ReactTemplate = require("../src/universes.bs.js");
var Ind_tables$ReactTemplate = require("../tactics/ind_tables.bs.js");
var Safe_typing$ReactTemplate = require("../src/safe_typing.bs.js");
var Inductiveops$ReactTemplate = require("../src/inductiveops.bs.js");
var Reductionops$ReactTemplate = require("../src/reductionops.bs.js");

function quick_chop(n, l) {
  var kick_last = function (param) {
    if (param) {
      var q = param[1];
      if (q) {
        return /* :: */[
                param[0],
                kick_last(q)
              ];
      } else {
        return /* [] */0;
      }
    } else {
      return Pervasives.failwith("kick_last");
    }
  };
  var aux = function (_param) {
    while(true) {
      var param = _param;
      var n = param[0];
      if (n !== 0) {
        var match = param[1];
        if (match) {
          _param = /* tuple */[
            n - 1 | 0,
            match[1]
          ];
          continue ;
          
        } else {
          return Pervasives.failwith("quick_chop");
        }
      } else {
        return param[1];
      }
    };
  };
  if (n > Curry._1(Util$ReactTemplate.List[/* length */0], l)) {
    return Pervasives.failwith("quick_chop args");
  } else {
    return kick_last(aux(/* tuple */[
                    n,
                    l
                  ]));
  }
}

function deconstruct_type(t) {
  var match = Term$ReactTemplate.decompose_prod(t);
  return Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* rev_map */12], (function (prim) {
                    return prim[1];
                  }), match[0]), /* :: */[
              match[1],
              /* [] */0
            ]);
}

var EqNotFound = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.EqNotFound");

var EqUnknown = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.EqUnknown");

var UndefinedCst = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.UndefinedCst");

var InductiveWithProduct = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.InductiveWithProduct");

var InductiveWithSort = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.InductiveWithSort");

var ParameterWithoutEquality = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.ParameterWithoutEquality");

var NonSingletonProp = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.NonSingletonProp");

var DecidabilityMutualNotSupported = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.DecidabilityMutualNotSupported");

var NoDecidabilityCoInductive = Caml_exceptions.create("Auto_ind_decl-ReactTemplate.NoDecidabilityCoInductive");

var bb = Block.__(246, [(function () {
        return Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.glob_bool);
      })]);

var tt = Block.__(246, [(function () {
        return Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.glob_true);
      })]);

var ff = Block.__(246, [(function () {
        return Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.glob_false);
      })]);

var eq = Block.__(246, [(function () {
        return Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.glob_eq);
      })]);

function induct_on(c) {
  return Tactics$ReactTemplate.induction(/* false */0, /* None */0, c, /* None */0, /* None */0);
}

function destruct_on(c) {
  return Tactics$ReactTemplate.destruct(/* false */0, /* None */0, c, /* None */0, /* None */0);
}

function destruct_on_using(c, id) {
  var eta = /* IntroNaming */Block.__(1, [/* IntroIdentifier */Block.__(0, [id])]);
  var eta$1 = /* IntroOrPattern */Block.__(0, [/* :: */[
        /* :: */[
          CAst$ReactTemplate.make(/* None */0, /* IntroNaming */Block.__(1, [/* IntroAnonymous */0])),
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            CAst$ReactTemplate.make(/* None */0, eta),
            /* [] */0
          ],
          /* [] */0
        ]
      ]]);
  return Tactics$ReactTemplate.destruct(/* false */0, /* None */0, c, /* Some */[CAst$ReactTemplate.make(/* None */0, eta$1)], /* None */0);
}

var my_discr_tac = Equality$ReactTemplate.discr_tac(/* false */0, /* None */0);

function my_inj_tac(x) {
  return Equality$ReactTemplate.inj(/* Some */[/* record */[
                  /* keep_proof_equalities : true */1,
                  /* injection_in_context : true */1,
                  /* injection_pattern_l2r_order : true */1
                ]], /* None */0, /* false */0, /* None */0)(/* tuple */[
              EConstr$ReactTemplate.mkVar(x),
              /* NoBindings */0
            ]);
}

function mkFullInd(param, n) {
  var u = param[1];
  var ind = param[0];
  var mib = Global$ReactTemplate.lookup_mind(ind[0]);
  var nparams = mib[/* mind_nparams */5];
  var nparrec = mib[/* mind_nparams_rec */6];
  var match = Termops$ReactTemplate.context_chop(nparams - nparrec | 0, mib[/* mind_params_ctxt */7]);
  if (nparrec > 0) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                Constr$ReactTemplate.mkIndU(/* tuple */[
                      ind,
                      u
                    ]),
                Util$ReactTemplate.$$Array[/* of_list */10](Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, nparrec + n | 0, match[1]))
              ]);
  } else {
    return Constr$ReactTemplate.mkIndU(/* tuple */[
                ind,
                u
              ]);
  }
}

function check_bool_is_defined() {
  try {
    Global$ReactTemplate.type_of_global_in_context(Global$ReactTemplate.env(/* () */0), Coqlib$ReactTemplate.glob_bool);
    return /* () */0;
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    if (CErrors$ReactTemplate.noncritical(e)) {
      throw [
            UndefinedCst,
            "bool"
          ];
    } else {
      throw e;
    }
  }
}

var beq_scheme_kind_aux = [(function () {
      return Pervasives.failwith("Undefined");
    })];

function build_beq_scheme(mode, kn) {
  check_bool_is_defined(/* () */0);
  var env = Global$ReactTemplate.env(/* () */0);
  var mib = Global$ReactTemplate.lookup_mind(kn);
  var nb_ind = mib[/* mind_packets */0].length;
  var nparams = mib[/* mind_nparams */5];
  var nparrec = mib[/* mind_nparams_rec */6];
  var match = Termops$ReactTemplate.context_chop(nparams - nparrec | 0, mib[/* mind_params_ctxt */7]);
  var lnamesparrec = match[1];
  var rec_name = function (i) {
    return Names$ReactTemplate.Id[/* to_string */7](Caml_array.caml_array_get(mib[/* mind_packets */0], i)[/* mind_typename */0]) + "_eqrec";
  };
  var make_one_eq = function (cur) {
    var u = Univ$ReactTemplate.Instance[/* empty */0];
    var ind_000 = /* tuple */[
      kn,
      cur
    ];
    var ind = /* tuple */[
      ind_000,
      u
    ];
    var cur_packet = Caml_array.caml_array_get(mib[/* mind_packets */0], ind_000[1]);
    var rettyp = Inductive$ReactTemplate.type_of_inductive(env, /* tuple */[
          /* tuple */[
            mib,
            cur_packet
          ],
          u
        ]);
    var rettyp_l = quick_chop(nparrec, deconstruct_type(rettyp));
    var compute_A_equality = function (_, nlist, eqA, ndx, t) {
      var aux = function (_c) {
        while(true) {
          var c = _c;
          var match = Reductionops$ReactTemplate.whd_betaiota_stack(Evd$ReactTemplate.empty, c);
          var a = match[1];
          var match$1 = EConstr$ReactTemplate.kind(Evd$ReactTemplate.empty, match[0]);
          switch (match$1.tag | 0) {
            case 0 : 
                return /* tuple */[
                        Constr$ReactTemplate.mkRel((match$1[0] - nlist | 0) + ndx | 0),
                        Safe_typing$ReactTemplate.empty_private_constants
                      ];
            case 1 : 
                var x = match$1[0];
                var eid = Names$ReactTemplate.Id[/* of_string */5]("eq_" + Names$ReactTemplate.Id[/* to_string */7](x));
                try {
                  Environ$ReactTemplate.lookup_named(eid, env);
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    throw [
                          ParameterWithoutEquality,
                          /* VarRef */Block.__(0, [x])
                        ];
                  } else {
                    throw exn;
                  }
                }
                return /* tuple */[
                        Constr$ReactTemplate.mkVar(eid),
                        Safe_typing$ReactTemplate.empty_private_constants
                      ];
            case 2 : 
                throw [
                      EqUnknown,
                      "meta-variable"
                    ];
            case 3 : 
                throw [
                      EqUnknown,
                      "existential variable"
                    ];
            case 4 : 
                throw InductiveWithSort;
            case 5 : 
                _c = EConstr$ReactTemplate.applist(/* tuple */[
                      match$1[0],
                      a
                    ]);
                continue ;
                case 6 : 
                throw InductiveWithProduct;
            case 7 : 
                throw [
                      EqUnknown,
                      "abstraction"
                    ];
            case 8 : 
                throw [
                      EqUnknown,
                      "let-in"
                    ];
            case 9 : 
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "auto_ind_decl.ml",
                        202,
                        19
                      ]
                    ];
            case 10 : 
                var match$2 = match$1[0];
                var kn$1 = match$2[0];
                var u = EConstr$ReactTemplate.EInstance[/* kind */1](Evd$ReactTemplate.empty, match$2[1]);
                var match$3 = Environ$ReactTemplate.constant_opt_value_in(env, /* tuple */[
                      kn$1,
                      u
                    ]);
                if (match$3) {
                  _c = EConstr$ReactTemplate.applist(/* tuple */[
                        EConstr$ReactTemplate.of_constr(match$3[0]),
                        a
                      ]);
                  continue ;
                  
                } else {
                  throw [
                        ParameterWithoutEquality,
                        /* ConstRef */Block.__(1, [kn$1])
                      ];
                }
                break;
            case 11 : 
                var ind$prime = match$1[0][0];
                var i = ind$prime[1];
                var kn$prime = ind$prime[0];
                if (Names$ReactTemplate.MutInd[/* equal */12](kn, kn$prime)) {
                  return /* tuple */[
                          Constr$ReactTemplate.mkRel((((eqA - nlist | 0) - i | 0) + nb_ind | 0) - 1 | 0),
                          Safe_typing$ReactTemplate.empty_private_constants
                        ];
                } else {
                  try {
                    var match$4 = Ind_tables$ReactTemplate.find_scheme(/* Some */[mode], Curry._1(beq_scheme_kind_aux[0], /* () */0), /* tuple */[
                          kn$prime,
                          i
                        ]);
                    var eff = match$4[1];
                    var match_000 = Constr$ReactTemplate.mkConst(match$4[0]);
                    var eq = match_000;
                    var match$5 = Curry._1(Util$ReactTemplate.List[/* split */36], Curry._2(Util$ReactTemplate.List[/* map */10], aux, a));
                    var match_000$1 = Util$ReactTemplate.$$Array[/* of_list */10](match$5[0]);
                    var match_001 = Curry._3(Util$ReactTemplate.List[/* fold_left */13], Safe_typing$ReactTemplate.concat_private, eff, Curry._1(Util$ReactTemplate.List[/* rev */4], match$5[1]));
                    var eff$1 = match_001;
                    var args = Util$ReactTemplate.$$Array[/* append */3](Util$ReactTemplate.$$Array[/* of_list */10](Curry._2(Util$ReactTemplate.List[/* map */10], (function (x) {
                                    return Vars$ReactTemplate.lift(ndx)(EConstr$ReactTemplate.Unsafe[/* to_constr */0](x));
                                  }), a)), match_000$1);
                    if (args.length) {
                      return /* tuple */[
                              Constr$ReactTemplate.mkApp(/* tuple */[
                                    eq,
                                    args
                                  ]),
                              eff$1
                            ];
                    } else {
                      return /* tuple */[
                              eq,
                              eff$1
                            ];
                    }
                  }
                  catch (exn$1){
                    if (exn$1 === Caml_builtin_exceptions.not_found) {
                      throw [
                            EqNotFound,
                            ind$prime,
                            ind_000
                          ];
                    } else {
                      throw exn$1;
                    }
                  }
                }
                break;
            case 12 : 
                throw [
                      EqUnknown,
                      "constructor"
                    ];
            case 13 : 
                throw [
                      EqUnknown,
                      "match"
                    ];
            case 14 : 
                throw [
                      EqUnknown,
                      "fix"
                    ];
            case 15 : 
                throw [
                      EqUnknown,
                      "cofix"
                    ];
            case 16 : 
                throw [
                      EqUnknown,
                      "projection"
                    ];
            
          }
        };
      };
      return aux(t);
    };
    var do_predicate = function (_, n) {
      var tag = bb.tag | 0;
      return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, b) {
                    return Constr$ReactTemplate.mkLambda(/* tuple */[
                                /* Anonymous */0,
                                b,
                                a
                              ]);
                  }), Constr$ReactTemplate.mkLambda(/* tuple */[
                      /* Anonymous */0,
                      mkFullInd(ind, (((n + 3 | 0) + Curry._1(Util$ReactTemplate.List[/* length */0], rettyp_l) | 0) + nb_ind | 0) - 1 | 0),
                      tag === 250 ? bb[0] : (
                          tag === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
                        )
                    ]), Curry._1(Util$ReactTemplate.List[/* rev */4], rettyp_l));
    };
    var ci = Inductiveops$ReactTemplate.make_case_info(env, ind_000, /* MatchStyle */3);
    var constrs = function (n) {
      return Inductiveops$ReactTemplate.get_constructors(env, Inductiveops$ReactTemplate.make_ind_family(/* tuple */[
                      ind,
                      Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, (n + nb_ind | 0) - 1 | 0, mib[/* mind_params_ctxt */7])
                    ]));
    };
    var constrsi = constrs(3 + nparrec | 0);
    var n = constrsi.length;
    var tag = ff.tag | 0;
    var ar = Caml_array.caml_make_vect(n, tag === 250 ? ff[0] : (
            tag === 246 ? CamlinternalLazy.force_lazy_block(ff) : ff
          ));
    var eff = Safe_typing$ReactTemplate.empty_private_constants;
    for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
      var nb_cstr_args = Curry._1(Util$ReactTemplate.List[/* length */0], Caml_array.caml_array_get(constrsi, i)[/* cs_args */3]);
      var tag$1 = ff.tag | 0;
      var ar2 = Caml_array.caml_make_vect(n, tag$1 === 250 ? ff[0] : (
              tag$1 === 246 ? CamlinternalLazy.force_lazy_block(ff) : ff
            ));
      var constrsj = constrs((3 + nparrec | 0) + nb_cstr_args | 0);
      for(var j = 0 ,j_finish = n - 1 | 0; j <= j_finish; ++j){
        if (i === j) {
          var cc;
          if (nb_cstr_args !== 0) {
            var tag$2 = tt.tag | 0;
            var eqs = Caml_array.caml_make_vect(nb_cstr_args, tag$2 === 250 ? tt[0] : (
                    tag$2 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
                  ));
            for(var ndx = 0 ,ndx_finish = nb_cstr_args - 1 | 0; ndx <= ndx_finish; ++ndx){
              var cc$1 = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], Curry._2(Util$ReactTemplate.List[/* nth */3], Caml_array.caml_array_get(constrsi, i)[/* cs_args */3], ndx));
              var match = compute_A_equality(Termops$ReactTemplate.rel_list, nparrec, (nparrec + 3 | 0) + (nb_cstr_args << 1) | 0, (nb_cstr_args + ndx | 0) + 1 | 0, EConstr$ReactTemplate.of_constr(cc$1));
              eff = Safe_typing$ReactTemplate.concat_private(match[1], eff);
              Caml_array.caml_array_set(eqs, ndx, Constr$ReactTemplate.mkApp(/* tuple */[
                        match[0],
                        /* array */[
                          Constr$ReactTemplate.mkRel((ndx + 1 | 0) + nb_cstr_args | 0),
                          Constr$ReactTemplate.mkRel(ndx + 1 | 0)
                        ]
                      ]));
            }
            cc = Util$ReactTemplate.$$Array[/* fold_left */15]((function (a, b) {
                    return Constr$ReactTemplate.mkApp(/* tuple */[
                                Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.build_bool_type(/* () */0)[/* andb */0]),
                                /* array */[
                                  b,
                                  a
                                ]
                              ]);
                  }), Caml_array.caml_array_get(eqs, 0), Util$ReactTemplate.$$Array[/* sub */5](eqs, 1, nb_cstr_args - 1 | 0));
          } else {
            var tag$3 = tt.tag | 0;
            cc = tag$3 === 250 ? tt[0] : (
                tag$3 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
              );
          }
          Caml_array.caml_array_set(ar2, j, Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                      return Constr$ReactTemplate.mkLambda(/* tuple */[
                                  Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl),
                                  Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl),
                                  a
                                ]);
                    }), cc, Caml_array.caml_array_get(constrsj, j)[/* cs_args */3]));
        } else {
          var tag$4 = ff.tag | 0;
          Caml_array.caml_array_set(ar2, j, Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                      return Constr$ReactTemplate.mkLambda(/* tuple */[
                                  Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl),
                                  Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl),
                                  a
                                ]);
                    }), tag$4 === 250 ? ff[0] : (
                      tag$4 === 246 ? CamlinternalLazy.force_lazy_block(ff) : ff
                    ), Caml_array.caml_array_get(constrsj, j)[/* cs_args */3]));
        }
      }
      Caml_array.caml_array_set(ar, i, Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                  return Constr$ReactTemplate.mkLambda(/* tuple */[
                              Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl),
                              Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl),
                              a
                            ]);
                }), Constr$ReactTemplate.mkCase(/* tuple */[
                    ci,
                    do_predicate(Termops$ReactTemplate.rel_list, nb_cstr_args),
                    Constr$ReactTemplate.mkVar(Names$ReactTemplate.Id[/* of_string */5]("Y")),
                    ar2
                  ]), Caml_array.caml_array_get(constrsi, i)[/* cs_args */3]));
    }
    return /* tuple */[
            Term$ReactTemplate.mkNamedLambda(Names$ReactTemplate.Id[/* of_string */5]("X"), mkFullInd(ind, (nb_ind - 1 | 0) + 1 | 0), Term$ReactTemplate.mkNamedLambda(Names$ReactTemplate.Id[/* of_string */5]("Y"), mkFullInd(ind, (nb_ind - 1 | 0) + 2 | 0), Constr$ReactTemplate.mkCase(/* tuple */[
                          ci,
                          do_predicate(Termops$ReactTemplate.rel_list, 0),
                          Constr$ReactTemplate.mkVar(Names$ReactTemplate.Id[/* of_string */5]("X")),
                          ar
                        ]))),
            eff
          ];
  };
  var names = Caml_array.caml_make_vect(nb_ind, /* Anonymous */0);
  var types = Caml_array.caml_make_vect(nb_ind, Constr$ReactTemplate.mkSet);
  var cores = Caml_array.caml_make_vect(nb_ind, Constr$ReactTemplate.mkSet);
  var eff = Safe_typing$ReactTemplate.empty_private_constants;
  var u = Univ$ReactTemplate.Instance[/* empty */0];
  for(var i = 0 ,i_finish = nb_ind - 1 | 0; i <= i_finish; ++i){
    Caml_array.caml_array_set(names, i, /* Name */[Names$ReactTemplate.Id[/* of_string */5](rec_name(i))]);
    var tag = bb.tag | 0;
    Caml_array.caml_array_set(types, i, Term$ReactTemplate.mkArrow(mkFullInd(/* tuple */[
                  /* tuple */[
                    kn,
                    i
                  ],
                  u
                ], 0), Term$ReactTemplate.mkArrow(mkFullInd(/* tuple */[
                      /* tuple */[
                        kn,
                        i
                      ],
                      u
                    ], 1), tag === 250 ? bb[0] : (
                    tag === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
                  ))));
    var match$1 = make_one_eq(i);
    Caml_array.caml_array_set(cores, i, match$1[0]);
    eff = Safe_typing$ReactTemplate.concat_private(match$1[1], eff);
  }
  return /* tuple */[
          /* tuple */[
            Util$ReactTemplate.$$Array[/* init */0](nb_ind, (function (i) {
                    var kelim = Inductive$ReactTemplate.elim_sorts(/* tuple */[
                          mib,
                          Caml_array.caml_array_get(mib[/* mind_packets */0], i)
                        ]);
                    if (!Curry._2(Sorts$ReactTemplate.List[/* mem */0], /* InSet */1, kelim)) {
                      throw [
                            NonSingletonProp,
                            /* tuple */[
                              kn,
                              i
                            ]
                          ];
                    }
                    if (mib[/* mind_finite */2] === /* CoFinite */1) {
                      throw NoDecidabilityCoInductive;
                    }
                    var c = Constr$ReactTemplate.mkFix(/* tuple */[
                          /* tuple */[
                            Caml_array.caml_make_vect(nb_ind, 0),
                            i
                          ],
                          /* tuple */[
                            names,
                            types,
                            cores
                          ]
                        ]);
                    var myArrow = function (u, v) {
                      return Term$ReactTemplate.mkArrow(u, Vars$ReactTemplate.lift(1)(v));
                    };
                    var eqName = function (param) {
                      if (param) {
                        return Names$ReactTemplate.Id[/* of_string */5]("eq_" + Names$ReactTemplate.Id[/* to_string */7](param[0]));
                      } else {
                        return Names$ReactTemplate.Id[/* of_string */5]("eq_A");
                      }
                    };
                    var ext_rel_list = Context$ReactTemplate.Rel[/* to_extended_list */12](Constr$ReactTemplate.mkRel, 0, lnamesparrec);
                    var lift_cnt = [0];
                    var eqs_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (aa) {
                            var a = Vars$ReactTemplate.lift(lift_cnt[0])(aa);
                            lift_cnt[0] = lift_cnt[0] + 1 | 0;
                            var tag = bb.tag | 0;
                            return myArrow(a, myArrow(a, tag === 250 ? bb[0] : (
                                              tag === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
                                            )));
                          }), ext_rel_list);
                    var eq_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, b, decl) {
                            return Term$ReactTemplate.mkNamedLambda(eqName(Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl)), b, a);
                          }), c, Curry._1(Util$ReactTemplate.List[/* rev */4], eqs_typ), lnamesparrec);
                    return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                                  var match = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl);
                                  return Term$ReactTemplate.mkNamedLambda(match ? match[0] : Names$ReactTemplate.Id[/* of_string */5]("A"), Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl), a);
                                }), eq_input, lnamesparrec);
                  })),
            UState$ReactTemplate.make(Global$ReactTemplate.universes(/* () */0))
          ],
          eff
        ];
}

var beq_scheme_kind = Ind_tables$ReactTemplate.declare_mutual_scheme_object("_beq", /* None */0, build_beq_scheme);

beq_scheme_kind_aux[0] = (function () {
    return beq_scheme_kind;
  });

function destruct_ind(sigma, c) {
  try {
    var match = EConstr$ReactTemplate.destApp(sigma, c);
    var indc = EConstr$ReactTemplate.destInd(sigma, match[0]);
    return /* tuple */[
            indc,
            match[1]
          ];
  }
  catch (exn){
    if (exn === Constr$ReactTemplate.DestKO) {
      var indc$1 = EConstr$ReactTemplate.destInd(sigma, c);
      return /* tuple */[
              indc$1,
              /* array */[]
            ];
    } else {
      throw exn;
    }
  }
}

function do_replace_bl(_, bl_scheme_key, indu, aavoid, narg, lft, rgt) {
  var ind = indu[0];
  var avoid = Util$ReactTemplate.$$Array[/* of_list */10](aavoid);
  var do_arg = function (sigma, v, offset) {
    try {
      var x = Caml_int32.imul(narg, offset);
      var s = EConstr$ReactTemplate.destVar(sigma, v);
      var n = avoid.length;
      var find = function (_i) {
        while(true) {
          var i = _i;
          if (Names$ReactTemplate.Id[/* equal */0](Caml_array.caml_array_get(avoid, n - i | 0), s)) {
            return Caml_array.caml_array_get(avoid, (n - i | 0) - x | 0);
          } else if (i < n) {
            _i = i + 1 | 0;
            continue ;
            
          } else {
            return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["AutoIndDecl.do_replace_bl"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Var "), Names$ReactTemplate.Id[/* print */8](s)), Pp$ReactTemplate.str(" seems unknown.")));
          }
        };
      };
      return EConstr$ReactTemplate.mkVar(find(1));
    }
    catch (raw_e){
      var e = Js_exn.internalToOCamlException(raw_e);
      if (CErrors$ReactTemplate.noncritical(e)) {
        var match = Names$ReactTemplate.Constant[/* repr3 */6](EConstr$ReactTemplate.destConst(sigma, v)[0]);
        var lbl = match[2];
        return EConstr$ReactTemplate.mkConst(Names$ReactTemplate.Constant[/* make3 */3](match[0], match[1], Names$ReactTemplate.Label[/* make */3](offset === 1 ? "eq_" + Names$ReactTemplate.Label[/* to_string */4](lbl) : Names$ReactTemplate.Label[/* to_string */4](lbl) + "_bl")));
      } else {
        throw e;
      }
    }
  };
  var aux = function (l1, l2) {
    if (l1) {
      if (l2) {
        var q2 = l2[1];
        var t2 = l2[0];
        var q1 = l1[1];
        var t1 = l1[0];
        return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                      var tt1 = Tacmach$ReactTemplate.New[/* pf_unsafe_type_of */6](gl, t1);
                      var sigma = Tacmach$ReactTemplate.New[/* project */3](gl);
                      var env = Curry._1(Tacmach$ReactTemplate.New[/* pf_env */4], gl);
                      if (EConstr$ReactTemplate.eq_constr(sigma, t1, t2)) {
                        return aux(q1, q2);
                      } else {
                        var match;
                        try {
                          match = destruct_ind(sigma, tt1);
                        }
                        catch (raw_e){
                          var e = Js_exn.internalToOCamlException(raw_e);
                          if (CErrors$ReactTemplate.noncritical(e)) {
                            match = /* tuple */[
                              indu,
                              /* array */[]
                            ];
                          } else {
                            throw e;
                          }
                        }
                        var v = match[1];
                        var u = match[0];
                        if (Names$ReactTemplate.eq_ind(u[0], ind)) {
                          return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                      Equality$ReactTemplate.replace(t1, t2),
                                      /* :: */[
                                        Auto$ReactTemplate.default_auto,
                                        /* :: */[
                                          aux(q1, q2),
                                          /* [] */0
                                        ]
                                      ]
                                    ]);
                        } else {
                          var match$1;
                          try {
                            var match$2 = Ind_tables$ReactTemplate.find_scheme(/* None */0, bl_scheme_key, u[0]);
                            match$1 = /* tuple */[
                              EConstr$ReactTemplate.mkConst(match$2[0]),
                              match$2[1]
                            ];
                          }
                          catch (exn){
                            if (exn === Caml_builtin_exceptions.not_found) {
                              var err_msg = Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("boolean->Leibniz:"), Pp$ReactTemplate.str("You have to declare the")), Pp$ReactTemplate.str("decidability over ")), Printer$ReactTemplate.pr_econstr_env(env, sigma, tt1)), Pp$ReactTemplate.str(" first."));
                              match$1 = CErrors$ReactTemplate.user_err(/* None */0, /* None */0, err_msg);
                            } else {
                              throw exn;
                            }
                          }
                          var bl_t1 = match$1[0];
                          var bl_args = Util$ReactTemplate.$$Array[/* append */3](Util$ReactTemplate.$$Array[/* append */3](Util$ReactTemplate.$$Array[/* map */12]((function (x) {
                                          return x;
                                        }), v), Util$ReactTemplate.$$Array[/* map */12]((function (x) {
                                          return do_arg(sigma, x, 1);
                                        }), v)), Util$ReactTemplate.$$Array[/* map */12]((function (x) {
                                      return do_arg(sigma, x, 2);
                                    }), v));
                          var app = Util$ReactTemplate.$$Array[/* is_empty */23](bl_args) ? bl_t1 : EConstr$ReactTemplate.mkApp(/* tuple */[
                                  bl_t1,
                                  bl_args
                                ]);
                          return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                      Proofview$ReactTemplate.tclEFFECTS(match$1[1]),
                                      /* :: */[
                                        Equality$ReactTemplate.replace_by(t1, t2, Tacticals$ReactTemplate.New[/* tclTHEN */2](Tactics$ReactTemplate.apply(app), Auto$ReactTemplate.default_auto)),
                                        /* :: */[
                                          aux(q1, q2),
                                          /* [] */0
                                        ]
                                      ]
                                    ]);
                        }
                      }
                    }));
      } else {
        return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Both side of the equality must have the same arity."));
      }
    } else if (l2) {
      return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Both side of the equality must have the same arity."));
    } else {
      return Curry._1(Proofview$ReactTemplate.tclUNIT, /* () */0);
    }
  };
  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.tclEVARMAP, (function (sigma) {
                var tmp;
                try {
                  tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, EConstr$ReactTemplate.destApp(sigma, lft));
                }
                catch (exn){
                  if (exn === Constr$ReactTemplate.DestKO) {
                    tmp = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("replace failed."));
                  } else {
                    throw exn;
                  }
                }
                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], tmp, (function (param) {
                              var ca1 = param[1];
                              var ind1 = param[0];
                              var tmp;
                              try {
                                tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, EConstr$ReactTemplate.destApp(sigma, rgt));
                              }
                              catch (exn){
                                if (exn === Constr$ReactTemplate.DestKO) {
                                  tmp = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("replace failed."));
                                } else {
                                  throw exn;
                                }
                              }
                              return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], tmp, (function (param) {
                                            var ca2 = param[1];
                                            var ind2 = param[0];
                                            var tmp;
                                            try {
                                              tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, EConstr$ReactTemplate.destInd(sigma, ind1)[0]);
                                            }
                                            catch (exn){
                                              if (exn === Constr$ReactTemplate.DestKO) {
                                                try {
                                                  tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, EConstr$ReactTemplate.destConstruct(sigma, ind1)[0][0]);
                                                }
                                                catch (exn$1){
                                                  if (exn$1 === Constr$ReactTemplate.DestKO) {
                                                    tmp = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("The expected type is an inductive one."));
                                                  } else {
                                                    throw exn$1;
                                                  }
                                                }
                                              } else {
                                                throw exn;
                                              }
                                            }
                                            return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], tmp, (function (param) {
                                                          var i1 = param[1];
                                                          var sp1 = param[0];
                                                          var tmp;
                                                          try {
                                                            tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, EConstr$ReactTemplate.destInd(sigma, ind2)[0]);
                                                          }
                                                          catch (exn){
                                                            if (exn === Constr$ReactTemplate.DestKO) {
                                                              try {
                                                                tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, EConstr$ReactTemplate.destConstruct(sigma, ind2)[0][0]);
                                                              }
                                                              catch (exn$1){
                                                                if (exn$1 === Constr$ReactTemplate.DestKO) {
                                                                  tmp = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("The expected type is an inductive one."));
                                                                } else {
                                                                  throw exn$1;
                                                                }
                                                              }
                                                            } else {
                                                              throw exn;
                                                            }
                                                          }
                                                          return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], tmp, (function (param) {
                                                                        if (!Names$ReactTemplate.MutInd[/* equal */12](sp1, param[0]) || i1 !== param[1]) {
                                                                          return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Eq should be on the same type"));
                                                                        } else {
                                                                          return aux(Util$ReactTemplate.$$Array[/* to_list */9](ca1), Util$ReactTemplate.$$Array[/* to_list */9](ca2));
                                                                        }
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function list_id(l) {
  return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                var match = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl);
                var s$prime = match ? Names$ReactTemplate.Id[/* to_string */7](match[0]) : "A";
                return /* :: */[
                        /* tuple */[
                          Names$ReactTemplate.Id[/* of_string */5](s$prime),
                          Names$ReactTemplate.Id[/* of_string */5]("eq_" + s$prime),
                          Names$ReactTemplate.Id[/* of_string */5](s$prime + "_bl"),
                          Names$ReactTemplate.Id[/* of_string */5](s$prime + "_lb")
                        ],
                        a
                      ];
              }), /* [] */0, l);
}

function eqI(ind, l) {
  var list_id$1 = list_id(l);
  var eA = Util$ReactTemplate.$$Array[/* of_list */10](Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return Constr$ReactTemplate.mkVar(param[0]);
                }), list_id$1), Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return Constr$ReactTemplate.mkVar(param[1]);
                }), list_id$1)));
  var match;
  try {
    var match$1 = Ind_tables$ReactTemplate.find_scheme(/* None */0, beq_scheme_kind, ind);
    match = /* tuple */[
      Constr$ReactTemplate.mkConst(match$1[0]),
      match$1[1]
    ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      match = CErrors$ReactTemplate.user_err(/* None */0, /* Some */["AutoIndDecl.eqI"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("The boolean equality on "), Names$ReactTemplate.MutInd[/* print */15](ind[0])), Pp$ReactTemplate.str(" is needed.")));
    } else {
      throw exn;
    }
  }
  var e = match[0];
  return /* tuple */[
          Util$ReactTemplate.$$Array[/* equal */21](Constr$ReactTemplate.equal, eA, /* array */[]) ? e : Constr$ReactTemplate.mkApp(/* tuple */[
                  e,
                  eA
                ]),
          match[1]
        ];
}

function compute_bl_goal(ind, lnamesparrec, nparrec) {
  var match = eqI(ind, lnamesparrec);
  var list_id$1 = list_id(lnamesparrec);
  var partial_arg = Nameops$ReactTemplate.Name[/* fold_right */10];
  var avoid = Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (param, param$1) {
          return partial_arg((function (id, l) {
                        return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* add */3], id, l);
                      }), param, param$1);
        }), Curry._2(Util$ReactTemplate.List[/* map */10], Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], lnamesparrec), Names$ReactTemplate.Id[/* Set */9][/* empty */0]);
  var create_input = function (c) {
    var x = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("x"), avoid);
    var y = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("y"), avoid);
    var bl_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            var s = param[0];
            var tag = eq.tag | 0;
            var tag$1 = bb.tag | 0;
            var tag$2 = tt.tag | 0;
            var tag$3 = eq.tag | 0;
            return Term$ReactTemplate.mkNamedProd(x, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkNamedProd(y, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkArrow(Constr$ReactTemplate.mkApp(/* tuple */[
                                    tag === 250 ? eq[0] : (
                                        tag === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
                                      ),
                                    /* array */[
                                      tag$1 === 250 ? bb[0] : (
                                          tag$1 === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
                                        ),
                                      Constr$ReactTemplate.mkApp(/* tuple */[
                                            Constr$ReactTemplate.mkVar(param[1]),
                                            /* array */[
                                              Constr$ReactTemplate.mkVar(x),
                                              Constr$ReactTemplate.mkVar(y)
                                            ]
                                          ]),
                                      tag$2 === 250 ? tt[0] : (
                                          tag$2 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
                                        )
                                    ]
                                  ]), Constr$ReactTemplate.mkApp(/* tuple */[
                                    tag$3 === 250 ? eq[0] : (
                                        tag$3 === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
                                      ),
                                    /* array */[
                                      Constr$ReactTemplate.mkVar(s),
                                      Constr$ReactTemplate.mkVar(x),
                                      Constr$ReactTemplate.mkVar(y)
                                    ]
                                  ]))));
          }), list_id$1);
    var bl_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
            return Term$ReactTemplate.mkNamedProd(param[2], b, a);
          }), c, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], bl_typ));
    var eqs_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            var s = param[0];
            var tag = bb.tag | 0;
            return Constr$ReactTemplate.mkProd(/* tuple */[
                        /* Anonymous */0,
                        Constr$ReactTemplate.mkVar(s),
                        Constr$ReactTemplate.mkProd(/* tuple */[
                              /* Anonymous */0,
                              Constr$ReactTemplate.mkVar(s),
                              tag === 250 ? bb[0] : (
                                  tag === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
                                )
                            ])
                      ]);
          }), list_id$1);
    var eq_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
            return Term$ReactTemplate.mkNamedProd(param[1], b, a);
          }), bl_input, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], eqs_typ));
    return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                  var match = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl);
                  return Term$ReactTemplate.mkNamedProd(match ? match[0] : Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("A"), avoid), Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl), a);
                }), eq_input, lnamesparrec);
  };
  var n = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("x"), avoid);
  var m = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("y"), avoid);
  var u = Univ$ReactTemplate.Instance[/* empty */0];
  var tag = eq.tag | 0;
  var tag$1 = bb.tag | 0;
  var tag$2 = tt.tag | 0;
  var tag$3 = eq.tag | 0;
  return /* tuple */[
          create_input(Term$ReactTemplate.mkNamedProd(n, mkFullInd(/* tuple */[
                        ind,
                        u
                      ], nparrec), Term$ReactTemplate.mkNamedProd(m, mkFullInd(/* tuple */[
                            ind,
                            u
                          ], nparrec + 1 | 0), Term$ReactTemplate.mkArrow(Constr$ReactTemplate.mkApp(/* tuple */[
                                tag === 250 ? eq[0] : (
                                    tag === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
                                  ),
                                /* array */[
                                  tag$1 === 250 ? bb[0] : (
                                      tag$1 === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
                                    ),
                                  Constr$ReactTemplate.mkApp(/* tuple */[
                                        match[0],
                                        /* array */[
                                          Constr$ReactTemplate.mkVar(n),
                                          Constr$ReactTemplate.mkVar(m)
                                        ]
                                      ]),
                                  tag$2 === 250 ? tt[0] : (
                                      tag$2 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
                                    )
                                ]
                              ]), Constr$ReactTemplate.mkApp(/* tuple */[
                                tag$3 === 250 ? eq[0] : (
                                    tag$3 === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
                                  ),
                                /* array */[
                                  mkFullInd(/* tuple */[
                                        ind,
                                        u
                                      ], nparrec + 3 | 0),
                                  Constr$ReactTemplate.mkVar(n),
                                  Constr$ReactTemplate.mkVar(m)
                                ]
                              ]))))),
          match[1]
        ];
}

function compute_bl_tact(mode, bl_scheme_key, ind, lnamesparrec, nparrec) {
  var list_id$1 = list_id(lnamesparrec);
  var avoid = [/* [] */0];
  var first_intros = Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
              return param[0];
            }), list_id$1), Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return param[1];
                }), list_id$1), Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return param[2];
                }), list_id$1)));
  var fresh_id = function (s, gl) {
    var fresh = Tactics$ReactTemplate.fresh_id_in_env(Curry._1(Names$ReactTemplate.Id[/* Set */9][/* of_list */25], avoid[0]), s, Proofview$ReactTemplate.Goal[/* env */4](gl));
    avoid[0] = /* :: */[
      fresh,
      avoid[0]
    ];
    return fresh;
  };
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var fresh_first_intros = Curry._2(Util$ReactTemplate.List[/* map */10], (function (id) {
                        return fresh_id(id, gl);
                      }), first_intros);
                var freshn = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("x"), gl);
                var freshm = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("y"), gl);
                var freshz = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("Z"), gl);
                return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                            Tactics$ReactTemplate.intros_using(fresh_first_intros),
                            /* :: */[
                              Tactics$ReactTemplate.intro_using(freshn),
                              /* :: */[
                                induct_on(EConstr$ReactTemplate.mkVar(freshn)),
                                /* :: */[
                                  Tactics$ReactTemplate.intro_using(freshm),
                                  /* :: */[
                                    destruct_on(EConstr$ReactTemplate.mkVar(freshm)),
                                    /* :: */[
                                      Tactics$ReactTemplate.intro_using(freshz),
                                      /* :: */[
                                        Tactics$ReactTemplate.intros,
                                        /* :: */[
                                          Tacticals$ReactTemplate.New[/* tclTRY */21](Tacticals$ReactTemplate.New[/* tclORELSE */11](Tactics$ReactTemplate.reflexivity, my_discr_tac)),
                                          /* :: */[
                                            Tactics$ReactTemplate.simpl_in_hyp(/* tuple */[
                                                  freshz,
                                                  /* InHyp */0
                                                ]),
                                            /* :: */[
                                              Tacticals$ReactTemplate.New[/* tclREPEAT */29](Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                        Tactics$ReactTemplate.Simple[/* apply_in */5](freshz, EConstr$ReactTemplate.of_constr(Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.build_bool_type(/* () */0)[/* andb_prop */1]))),
                                                        /* :: */[
                                                          Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                                                                  var fresht = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("Z"), gl);
                                                                  var eta = /* IntroNaming */Block.__(1, [/* IntroIdentifier */Block.__(0, [fresht])]);
                                                                  var eta$1 = /* IntroNaming */Block.__(1, [/* IntroIdentifier */Block.__(0, [freshz])]);
                                                                  var c = EConstr$ReactTemplate.mkVar(freshz);
                                                                  var l = /* IntroOrPattern */Block.__(0, [/* :: */[
                                                                        /* :: */[
                                                                          CAst$ReactTemplate.make(/* None */0, eta),
                                                                          /* :: */[
                                                                            CAst$ReactTemplate.make(/* None */0, eta$1),
                                                                            /* [] */0
                                                                          ]
                                                                        ],
                                                                        /* [] */0
                                                                      ]]);
                                                                  return Tactics$ReactTemplate.destruct(/* false */0, /* None */0, c, /* Some */[CAst$ReactTemplate.make(/* None */0, l)], /* None */0);
                                                                })),
                                                          /* [] */0
                                                        ]
                                                      ])),
                                              /* :: */[
                                                Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                                                        var concl = Proofview$ReactTemplate.Goal[/* concl */2](gl);
                                                        var sigma = Tacmach$ReactTemplate.New[/* project */3](gl);
                                                        var match = EConstr$ReactTemplate.kind(sigma, concl);
                                                        if (match.tag === 9) {
                                                          var ca = match[1];
                                                          var match$1 = EConstr$ReactTemplate.kind(sigma, match[0]);
                                                          if (match$1.tag === 11) {
                                                            if (Globnames$ReactTemplate.eq_gr(/* IndRef */Block.__(2, [match$1[0][0]]), Coqlib$ReactTemplate.glob_eq)) {
                                                              return Tacticals$ReactTemplate.New[/* tclTHEN */2](do_replace_bl(mode, bl_scheme_key, ind, avoid[0], nparrec, Caml_array.caml_array_get(ca, 2), Caml_array.caml_array_get(ca, 1)), Auto$ReactTemplate.default_auto);
                                                            } else {
                                                              return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Failure while solving Boolean->Leibniz."));
                                                            }
                                                          } else {
                                                            return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str(" Failure while solving Boolean->Leibniz."));
                                                          }
                                                        } else {
                                                          return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Failure while solving Boolean->Leibniz."));
                                                        }
                                                      })),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]);
              }));
}

var bl_scheme_kind_aux = [(function () {
      return Pervasives.failwith("Undefined");
    })];

function side_effect_of_mode(param) {
  if (param !== 1) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function make_bl_scheme(mode, mind) {
  var mib = Global$ReactTemplate.lookup_mind(mind);
  if (mib[/* mind_packets */0].length !== 1) {
    CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Automatic building of boolean->Leibniz lemmas not supported"));
  }
  var ind = /* tuple */[
    mind,
    0
  ];
  var nparams = mib[/* mind_nparams */5];
  var nparrec = mib[/* mind_nparams_rec */6];
  var match = Termops$ReactTemplate.context_chop(nparams - nparrec | 0, mib[/* mind_params_ctxt */7]);
  var lnamesparrec = match[1];
  var match$1 = compute_bl_goal(ind, lnamesparrec, nparrec);
  var ctx = UState$ReactTemplate.make(Global$ReactTemplate.universes(/* () */0));
  var side_eff = side_effect_of_mode(mode);
  var bl_goal = EConstr$ReactTemplate.of_constr(match$1[0]);
  var match$2 = Pfedit$ReactTemplate.build_by_tactic(/* Some */[side_eff], Global$ReactTemplate.env(/* () */0), ctx, /* None */0, bl_goal, compute_bl_tact(mode, Curry._1(bl_scheme_kind_aux[0], /* () */0), /* tuple */[
            ind,
            EConstr$ReactTemplate.EInstance[/* empty */2]
          ], lnamesparrec, nparrec));
  return /* tuple */[
          /* tuple */[
            /* array */[match$2[0]],
            match$2[2]
          ],
          match$1[1]
        ];
}

var bl_scheme_kind = Ind_tables$ReactTemplate.declare_mutual_scheme_object("_dec_bl", /* None */0, make_bl_scheme);

bl_scheme_kind_aux[0] = (function () {
    return bl_scheme_kind;
  });

function compute_lb_goal(ind, lnamesparrec, nparrec) {
  var list_id$1 = list_id(lnamesparrec);
  var tag = eq.tag | 0;
  var eq$1 = tag === 250 ? eq[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
    );
  var tag$1 = tt.tag | 0;
  var tt$1 = tag$1 === 250 ? tt[0] : (
      tag$1 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
    );
  var tag$2 = bb.tag | 0;
  var bb$1 = tag$2 === 250 ? bb[0] : (
      tag$2 === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
    );
  var partial_arg = Nameops$ReactTemplate.Name[/* fold_right */10];
  var avoid = Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (param, param$1) {
          return partial_arg((function (id, l) {
                        return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* add */3], id, l);
                      }), param, param$1);
        }), Curry._2(Util$ReactTemplate.List[/* map */10], Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], lnamesparrec), Names$ReactTemplate.Id[/* Set */9][/* empty */0]);
  var match = eqI(ind, lnamesparrec);
  var create_input = function (c) {
    var x = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("x"), avoid);
    var y = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("y"), avoid);
    var lb_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            var s = param[0];
            return Term$ReactTemplate.mkNamedProd(x, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkNamedProd(y, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkArrow(Constr$ReactTemplate.mkApp(/* tuple */[
                                    eq$1,
                                    /* array */[
                                      Constr$ReactTemplate.mkVar(s),
                                      Constr$ReactTemplate.mkVar(x),
                                      Constr$ReactTemplate.mkVar(y)
                                    ]
                                  ]), Constr$ReactTemplate.mkApp(/* tuple */[
                                    eq$1,
                                    /* array */[
                                      bb$1,
                                      Constr$ReactTemplate.mkApp(/* tuple */[
                                            Constr$ReactTemplate.mkVar(param[1]),
                                            /* array */[
                                              Constr$ReactTemplate.mkVar(x),
                                              Constr$ReactTemplate.mkVar(y)
                                            ]
                                          ]),
                                      tt$1
                                    ]
                                  ]))));
          }), list_id$1);
    var lb_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
            return Term$ReactTemplate.mkNamedProd(param[3], b, a);
          }), c, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], lb_typ));
    var eqs_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            var s = param[0];
            return Constr$ReactTemplate.mkProd(/* tuple */[
                        /* Anonymous */0,
                        Constr$ReactTemplate.mkVar(s),
                        Constr$ReactTemplate.mkProd(/* tuple */[
                              /* Anonymous */0,
                              Constr$ReactTemplate.mkVar(s),
                              bb$1
                            ])
                      ]);
          }), list_id$1);
    var eq_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
            return Term$ReactTemplate.mkNamedProd(param[1], b, a);
          }), lb_input, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], eqs_typ));
    return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                  var match = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl);
                  return Term$ReactTemplate.mkNamedProd(match ? match[0] : Names$ReactTemplate.Id[/* of_string */5]("A"), Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl), a);
                }), eq_input, lnamesparrec);
  };
  var n = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("x"), avoid);
  var m = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("y"), avoid);
  var u = Univ$ReactTemplate.Instance[/* empty */0];
  return /* tuple */[
          create_input(Term$ReactTemplate.mkNamedProd(n, mkFullInd(/* tuple */[
                        ind,
                        u
                      ], nparrec), Term$ReactTemplate.mkNamedProd(m, mkFullInd(/* tuple */[
                            ind,
                            u
                          ], nparrec + 1 | 0), Term$ReactTemplate.mkArrow(Constr$ReactTemplate.mkApp(/* tuple */[
                                eq$1,
                                /* array */[
                                  mkFullInd(/* tuple */[
                                        ind,
                                        u
                                      ], nparrec + 2 | 0),
                                  Constr$ReactTemplate.mkVar(n),
                                  Constr$ReactTemplate.mkVar(m)
                                ]
                              ]), Constr$ReactTemplate.mkApp(/* tuple */[
                                eq$1,
                                /* array */[
                                  bb$1,
                                  Constr$ReactTemplate.mkApp(/* tuple */[
                                        match[0],
                                        /* array */[
                                          Constr$ReactTemplate.mkVar(n),
                                          Constr$ReactTemplate.mkVar(m)
                                        ]
                                      ]),
                                  tt$1
                                ]
                              ]))))),
          match[1]
        ];
}

function compute_lb_tact(mode, lb_scheme_key, _, lnamesparrec, nparrec) {
  var list_id$1 = list_id(lnamesparrec);
  var avoid = [/* [] */0];
  var first_intros = Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
              return param[0];
            }), list_id$1), Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return param[1];
                }), list_id$1), Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return param[3];
                }), list_id$1)));
  var fresh_id = function (s, gl) {
    var fresh = Tactics$ReactTemplate.fresh_id_in_env(Curry._1(Names$ReactTemplate.Id[/* Set */9][/* of_list */25], avoid[0]), s, Proofview$ReactTemplate.Goal[/* env */4](gl));
    avoid[0] = /* :: */[
      fresh,
      avoid[0]
    ];
    return fresh;
  };
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var fresh_first_intros = Curry._2(Util$ReactTemplate.List[/* map */10], (function (id) {
                        return fresh_id(id, gl);
                      }), first_intros);
                var freshn = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("x"), gl);
                var freshm = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("y"), gl);
                var freshz = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("Z"), gl);
                return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                            Tactics$ReactTemplate.intros_using(fresh_first_intros),
                            /* :: */[
                              Tactics$ReactTemplate.intro_using(freshn),
                              /* :: */[
                                induct_on(EConstr$ReactTemplate.mkVar(freshn)),
                                /* :: */[
                                  Tactics$ReactTemplate.intro_using(freshm),
                                  /* :: */[
                                    destruct_on(EConstr$ReactTemplate.mkVar(freshm)),
                                    /* :: */[
                                      Tactics$ReactTemplate.intro_using(freshz),
                                      /* :: */[
                                        Tactics$ReactTemplate.intros,
                                        /* :: */[
                                          Tacticals$ReactTemplate.New[/* tclTRY */21](Tacticals$ReactTemplate.New[/* tclORELSE */11](Tactics$ReactTemplate.reflexivity, my_discr_tac)),
                                          /* :: */[
                                            my_inj_tac(freshz),
                                            /* :: */[
                                              Tactics$ReactTemplate.intros,
                                              /* :: */[
                                                Tactics$ReactTemplate.simpl_in_concl,
                                                /* :: */[
                                                  Auto$ReactTemplate.default_auto,
                                                  /* :: */[
                                                    Tacticals$ReactTemplate.New[/* tclREPEAT */29](Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                              Tactics$ReactTemplate.apply(EConstr$ReactTemplate.of_constr(Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.build_bool_type(/* () */0)[/* andb_true_intro */2]))),
                                                              /* :: */[
                                                                Tactics$ReactTemplate.simplest_split,
                                                                /* :: */[
                                                                  Auto$ReactTemplate.default_auto,
                                                                  /* [] */0
                                                                ]
                                                              ]
                                                            ])),
                                                    /* :: */[
                                                      Proofview$ReactTemplate.Goal[/* enter */9]((function (gls) {
                                                              var concl = Proofview$ReactTemplate.Goal[/* concl */2](gls);
                                                              var sigma = Tacmach$ReactTemplate.New[/* project */3](gl);
                                                              var match = EConstr$ReactTemplate.kind(sigma, concl);
                                                              if (match.tag === 9) {
                                                                var match$1 = EConstr$ReactTemplate.kind(sigma, Caml_array.caml_array_get(match[1], 1));
                                                                if (match$1.tag === 9) {
                                                                  var ca$prime = match$1[1];
                                                                  var n = ca$prime.length;
                                                                  var mode$1 = mode;
                                                                  var lb_scheme_key$1 = lb_scheme_key;
                                                                  var aavoid = avoid[0];
                                                                  var narg = nparrec;
                                                                  var p = Caml_array.caml_array_get(ca$prime, n - 2 | 0);
                                                                  var q = Caml_array.caml_array_get(ca$prime, n - 1 | 0);
                                                                  var avoid$1 = Util$ReactTemplate.$$Array[/* of_list */10](aavoid);
                                                                  var do_arg = function (sigma, v, offset) {
                                                                    try {
                                                                      var x = Caml_int32.imul(narg, offset);
                                                                      var s = EConstr$ReactTemplate.destVar(sigma, v);
                                                                      var n = avoid$1.length;
                                                                      var find = function (_i) {
                                                                        while(true) {
                                                                          var i = _i;
                                                                          if (Names$ReactTemplate.Id[/* equal */0](Caml_array.caml_array_get(avoid$1, n - i | 0), s)) {
                                                                            return Caml_array.caml_array_get(avoid$1, (n - i | 0) - x | 0);
                                                                          } else if (i < n) {
                                                                            _i = i + 1 | 0;
                                                                            continue ;
                                                                            
                                                                          } else {
                                                                            return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["AutoIndDecl.do_replace_lb"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Var "), Names$ReactTemplate.Id[/* print */8](s)), Pp$ReactTemplate.str(" seems unknown.")));
                                                                          }
                                                                        };
                                                                      };
                                                                      return EConstr$ReactTemplate.mkVar(find(1));
                                                                    }
                                                                    catch (raw_e){
                                                                      var e = Js_exn.internalToOCamlException(raw_e);
                                                                      if (CErrors$ReactTemplate.noncritical(e)) {
                                                                        var match = Names$ReactTemplate.Constant[/* repr3 */6](EConstr$ReactTemplate.destConst(sigma, v)[0]);
                                                                        var lbl = match[2];
                                                                        return EConstr$ReactTemplate.mkConst(Names$ReactTemplate.Constant[/* make3 */3](match[0], match[1], Names$ReactTemplate.Label[/* make */3](offset === 1 ? "eq_" + Names$ReactTemplate.Label[/* to_string */4](lbl) : Names$ReactTemplate.Label[/* to_string */4](lbl) + "_lb")));
                                                                      } else {
                                                                        throw e;
                                                                      }
                                                                    }
                                                                  };
                                                                  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                                                                                var type_of_pq = Tacmach$ReactTemplate.New[/* pf_unsafe_type_of */6](gl, p);
                                                                                var sigma = Tacmach$ReactTemplate.New[/* project */3](gl);
                                                                                var env = Curry._1(Tacmach$ReactTemplate.New[/* pf_env */4], gl);
                                                                                var match = destruct_ind(sigma, type_of_pq);
                                                                                var v = match[1];
                                                                                var lb_type_of_p;
                                                                                try {
                                                                                  var match$1 = Ind_tables$ReactTemplate.find_scheme(/* Some */[mode$1], lb_scheme_key$1, match[0][0]);
                                                                                  lb_type_of_p = Curry._1(Proofview$ReactTemplate.tclUNIT, /* tuple */[
                                                                                        EConstr$ReactTemplate.mkConst(match$1[0]),
                                                                                        match$1[1]
                                                                                      ]);
                                                                                }
                                                                                catch (exn){
                                                                                  if (exn === Caml_builtin_exceptions.not_found) {
                                                                                    var err_msg = Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Leibniz->boolean:"), Pp$ReactTemplate.str("You have to declare the")), Pp$ReactTemplate.str("decidability over ")), Printer$ReactTemplate.pr_econstr_env(env, sigma, type_of_pq)), Pp$ReactTemplate.str(" first."));
                                                                                    lb_type_of_p = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, err_msg);
                                                                                  } else {
                                                                                    throw exn;
                                                                                  }
                                                                                }
                                                                                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], lb_type_of_p, (function (param) {
                                                                                              var eff = param[1];
                                                                                              var lb_type_of_p = param[0];
                                                                                              return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.tclEVARMAP, (function (sigma) {
                                                                                                            var lb_args = Util$ReactTemplate.$$Array[/* append */3](Util$ReactTemplate.$$Array[/* append */3](Util$ReactTemplate.$$Array[/* map */12]((function (x) {
                                                                                                                            return x;
                                                                                                                          }), v), Util$ReactTemplate.$$Array[/* map */12]((function (x) {
                                                                                                                            return do_arg(sigma, x, 1);
                                                                                                                          }), v)), Util$ReactTemplate.$$Array[/* map */12]((function (x) {
                                                                                                                        return do_arg(sigma, x, 2);
                                                                                                                      }), v));
                                                                                                            var app = Util$ReactTemplate.$$Array[/* is_empty */23](lb_args) ? lb_type_of_p : EConstr$ReactTemplate.mkApp(/* tuple */[
                                                                                                                    lb_type_of_p,
                                                                                                                    lb_args
                                                                                                                  ]);
                                                                                                            return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                                                                                        Proofview$ReactTemplate.tclEFFECTS(eff),
                                                                                                                        /* :: */[
                                                                                                                          Equality$ReactTemplate.replace(p, q),
                                                                                                                          /* :: */[
                                                                                                                            Tactics$ReactTemplate.apply(app),
                                                                                                                            /* :: */[
                                                                                                                              Auto$ReactTemplate.default_auto,
                                                                                                                              /* [] */0
                                                                                                                            ]
                                                                                                                          ]
                                                                                                                        ]
                                                                                                                      ]);
                                                                                                          }));
                                                                                            }));
                                                                              }));
                                                                } else {
                                                                  return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Failure while solving Leibniz->Boolean."));
                                                                }
                                                              } else {
                                                                return Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Failure while solving Leibniz->Boolean."));
                                                              }
                                                            })),
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]);
              }));
}

var lb_scheme_kind_aux = [(function () {
      return Pervasives.failwith("Undefined");
    })];

function make_lb_scheme(mode, mind) {
  var mib = Global$ReactTemplate.lookup_mind(mind);
  if (mib[/* mind_packets */0].length !== 1) {
    CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Automatic building of Leibniz->boolean lemmas not supported"));
  }
  var ind = /* tuple */[
    mind,
    0
  ];
  var nparams = mib[/* mind_nparams */5];
  var nparrec = mib[/* mind_nparams_rec */6];
  var match = Termops$ReactTemplate.context_chop(nparams - nparrec | 0, mib[/* mind_params_ctxt */7]);
  var lnamesparrec = match[1];
  var match$1 = compute_lb_goal(ind, lnamesparrec, nparrec);
  var ctx = UState$ReactTemplate.make(Global$ReactTemplate.universes(/* () */0));
  var side_eff = side_effect_of_mode(mode);
  var lb_goal = EConstr$ReactTemplate.of_constr(match$1[0]);
  var match$2 = Pfedit$ReactTemplate.build_by_tactic(/* Some */[side_eff], Global$ReactTemplate.env(/* () */0), ctx, /* None */0, lb_goal, compute_lb_tact(mode, Curry._1(lb_scheme_kind_aux[0], /* () */0), ind, lnamesparrec, nparrec));
  return /* tuple */[
          /* tuple */[
            /* array */[match$2[0]],
            match$2[2]
          ],
          match$1[1]
        ];
}

var lb_scheme_kind = Ind_tables$ReactTemplate.declare_mutual_scheme_object("_dec_lb", /* None */0, make_lb_scheme);

lb_scheme_kind_aux[0] = (function () {
    return lb_scheme_kind;
  });

function check_not_is_defined() {
  try {
    Coqlib$ReactTemplate.build_coq_not(/* () */0);
    return /* () */0;
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    if (CErrors$ReactTemplate.noncritical(e)) {
      throw [
            UndefinedCst,
            "not"
          ];
    } else {
      throw e;
    }
  }
}

function compute_dec_goal(ind, lnamesparrec, nparrec) {
  check_not_is_defined(/* () */0);
  var tag = eq.tag | 0;
  var eq$1 = tag === 250 ? eq[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
    );
  var tag$1 = tt.tag | 0;
  var tt$1 = tag$1 === 250 ? tt[0] : (
      tag$1 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
    );
  var tag$2 = bb.tag | 0;
  var bb$1 = tag$2 === 250 ? bb[0] : (
      tag$2 === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
    );
  var list_id$1 = list_id(lnamesparrec);
  var partial_arg = Nameops$ReactTemplate.Name[/* fold_right */10];
  var avoid = Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (param, param$1) {
          return partial_arg((function (id, l) {
                        return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* add */3], id, l);
                      }), param, param$1);
        }), Curry._2(Util$ReactTemplate.List[/* map */10], Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], lnamesparrec), Names$ReactTemplate.Id[/* Set */9][/* empty */0]);
  var n = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("x"), avoid);
  var m = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("y"), avoid);
  var eqnm = Constr$ReactTemplate.mkApp(/* tuple */[
        eq$1,
        /* array */[
          mkFullInd(ind, (nparrec << 1) + 2 | 0),
          Constr$ReactTemplate.mkVar(n),
          Constr$ReactTemplate.mkVar(m)
        ]
      ]);
  var c = Term$ReactTemplate.mkNamedProd(n, mkFullInd(ind, (nparrec << 1)), Term$ReactTemplate.mkNamedProd(m, mkFullInd(ind, (nparrec << 1) + 1 | 0), Constr$ReactTemplate.mkApp(/* tuple */[
                Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.build_coq_sumbool(/* () */0)),
                /* array */[
                  eqnm,
                  Constr$ReactTemplate.mkApp(/* tuple */[
                        Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.build_coq_not(/* () */0)),
                        /* array */[eqnm]
                      ])
                ]
              ])));
  var x = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("x"), avoid);
  var y = Namegen$ReactTemplate.next_ident_away(Names$ReactTemplate.Id[/* of_string */5]("y"), avoid);
  var lb_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          var s = param[0];
          return Term$ReactTemplate.mkNamedProd(x, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkNamedProd(y, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkArrow(Constr$ReactTemplate.mkApp(/* tuple */[
                                  eq$1,
                                  /* array */[
                                    Constr$ReactTemplate.mkVar(s),
                                    Constr$ReactTemplate.mkVar(x),
                                    Constr$ReactTemplate.mkVar(y)
                                  ]
                                ]), Constr$ReactTemplate.mkApp(/* tuple */[
                                  eq$1,
                                  /* array */[
                                    bb$1,
                                    Constr$ReactTemplate.mkApp(/* tuple */[
                                          Constr$ReactTemplate.mkVar(param[1]),
                                          /* array */[
                                            Constr$ReactTemplate.mkVar(x),
                                            Constr$ReactTemplate.mkVar(y)
                                          ]
                                        ]),
                                    tt$1
                                  ]
                                ]))));
        }), list_id$1);
  var bl_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          var s = param[0];
          return Term$ReactTemplate.mkNamedProd(x, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkNamedProd(y, Constr$ReactTemplate.mkVar(s), Term$ReactTemplate.mkArrow(Constr$ReactTemplate.mkApp(/* tuple */[
                                  eq$1,
                                  /* array */[
                                    bb$1,
                                    Constr$ReactTemplate.mkApp(/* tuple */[
                                          Constr$ReactTemplate.mkVar(param[1]),
                                          /* array */[
                                            Constr$ReactTemplate.mkVar(x),
                                            Constr$ReactTemplate.mkVar(y)
                                          ]
                                        ]),
                                    tt$1
                                  ]
                                ]), Constr$ReactTemplate.mkApp(/* tuple */[
                                  eq$1,
                                  /* array */[
                                    Constr$ReactTemplate.mkVar(s),
                                    Constr$ReactTemplate.mkVar(x),
                                    Constr$ReactTemplate.mkVar(y)
                                  ]
                                ]))));
        }), list_id$1);
  var lb_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
          return Term$ReactTemplate.mkNamedProd(param[3], b, a);
        }), c, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], lb_typ));
  var bl_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
          return Term$ReactTemplate.mkNamedProd(param[2], b, a);
        }), lb_input, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], bl_typ));
  var eqs_typ = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          var s = param[0];
          return Constr$ReactTemplate.mkProd(/* tuple */[
                      /* Anonymous */0,
                      Constr$ReactTemplate.mkVar(s),
                      Constr$ReactTemplate.mkProd(/* tuple */[
                            /* Anonymous */0,
                            Constr$ReactTemplate.mkVar(s),
                            bb$1
                          ])
                    ]);
        }), list_id$1);
  var eq_input = Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (a, param, b) {
          return Term$ReactTemplate.mkNamedProd(param[1], b, a);
        }), bl_input, Curry._1(Util$ReactTemplate.List[/* rev */4], list_id$1), Curry._1(Util$ReactTemplate.List[/* rev */4], eqs_typ));
  return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (a, decl) {
                var match = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl);
                return Term$ReactTemplate.mkNamedProd(match ? match[0] : Names$ReactTemplate.Id[/* of_string */5]("A"), Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl), a);
              }), eq_input, lnamesparrec);
}

function compute_dec_tact(ind, lnamesparrec, nparrec) {
  var tag = eq.tag | 0;
  var eq$1 = tag === 250 ? eq[0] : (
      tag === 246 ? CamlinternalLazy.force_lazy_block(eq) : eq
    );
  var tag$1 = tt.tag | 0;
  var tt$1 = tag$1 === 250 ? tt[0] : (
      tag$1 === 246 ? CamlinternalLazy.force_lazy_block(tt) : tt
    );
  var tag$2 = ff.tag | 0;
  var ff$1 = tag$2 === 250 ? ff[0] : (
      tag$2 === 246 ? CamlinternalLazy.force_lazy_block(ff) : ff
    );
  var tag$3 = bb.tag | 0;
  var bb$1 = tag$3 === 250 ? bb[0] : (
      tag$3 === 246 ? CamlinternalLazy.force_lazy_block(bb) : bb
    );
  var list_id$1 = list_id(lnamesparrec);
  var match = eqI(ind, lnamesparrec);
  var eff = match[1];
  var eqI$1 = match[0];
  var avoid = [/* [] */0];
  var eqtrue = function (x) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                eq$1,
                /* array */[
                  bb$1,
                  x,
                  tt$1
                ]
              ]);
  };
  var eqfalse = function (x) {
    return Constr$ReactTemplate.mkApp(/* tuple */[
                eq$1,
                /* array */[
                  bb$1,
                  x,
                  ff$1
                ]
              ]);
  };
  var first_intros = Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
              return param[0];
            }), list_id$1), Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  return param[1];
                }), list_id$1), Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                      return param[2];
                    }), list_id$1), Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                      return param[3];
                    }), list_id$1))));
  var fresh_id = function (s, gl) {
    var fresh = Tactics$ReactTemplate.fresh_id_in_env(Curry._1(Names$ReactTemplate.Id[/* Set */9][/* of_list */25], avoid[0]), s, Proofview$ReactTemplate.Goal[/* env */4](gl));
    avoid[0] = /* :: */[
      fresh,
      avoid[0]
    ];
    return fresh;
  };
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var fresh_first_intros = Curry._2(Util$ReactTemplate.List[/* map */10], (function (id) {
                        return fresh_id(id, gl);
                      }), first_intros);
                var freshn = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("x"), gl);
                var freshm = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("y"), gl);
                var freshH = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("H"), gl);
                var eqbnm = Constr$ReactTemplate.mkApp(/* tuple */[
                      eqI$1,
                      /* array */[
                        Constr$ReactTemplate.mkVar(freshn),
                        Constr$ReactTemplate.mkVar(freshm)
                      ]
                    ]);
                var arfresh = Util$ReactTemplate.$$Array[/* of_list */10](fresh_first_intros);
                var xargs = Util$ReactTemplate.$$Array[/* sub */5](arfresh, 0, (nparrec << 1));
                var tmp;
                try {
                  var match = Ind_tables$ReactTemplate.find_scheme(/* None */0, bl_scheme_kind, ind);
                  tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, /* tuple */[
                        Constr$ReactTemplate.mkConst(match[0]),
                        match[1]
                      ]);
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    tmp = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Error during the decidability part, boolean to leibniz equality is required."));
                  } else {
                    throw exn;
                  }
                }
                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], tmp, (function (param) {
                              var eff$prime = param[1];
                              var blI = param[0];
                              var tmp;
                              try {
                                var match = Ind_tables$ReactTemplate.find_scheme(/* None */0, lb_scheme_kind, ind);
                                tmp = Curry._1(Proofview$ReactTemplate.tclUNIT, /* tuple */[
                                      Constr$ReactTemplate.mkConst(match[0]),
                                      match[1]
                                    ]);
                              }
                              catch (exn){
                                if (exn === Caml_builtin_exceptions.not_found) {
                                  tmp = Tacticals$ReactTemplate.New[/* tclZEROMSG */4](/* None */0, Pp$ReactTemplate.str("Error during the decidability part, leibniz to boolean equality is required."));
                                } else {
                                  throw exn;
                                }
                              }
                              return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], tmp, (function (param) {
                                            var lbI = param[0];
                                            var eff$1 = Safe_typing$ReactTemplate.concat_private(param[1], Safe_typing$ReactTemplate.concat_private(eff$prime, eff));
                                            return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                        Proofview$ReactTemplate.tclEFFECTS(eff$1),
                                                        /* :: */[
                                                          Tactics$ReactTemplate.intros_using(fresh_first_intros),
                                                          /* :: */[
                                                            Tactics$ReactTemplate.intros_using(/* :: */[
                                                                  freshn,
                                                                  /* :: */[
                                                                    freshm,
                                                                    /* [] */0
                                                                  ]
                                                                ]),
                                                            /* :: */[
                                                              Tactics$ReactTemplate.assert_by(/* Name */[freshH], EConstr$ReactTemplate.of_constr(Constr$ReactTemplate.mkApp(/* tuple */[
                                                                            Universes$ReactTemplate.constr_of_global(Coqlib$ReactTemplate.build_coq_sumbool(/* () */0)),
                                                                            /* array */[
                                                                              eqtrue(eqbnm),
                                                                              eqfalse(eqbnm)
                                                                            ]
                                                                          ])), Tacticals$ReactTemplate.New[/* tclTHEN */2](destruct_on(EConstr$ReactTemplate.of_constr(eqbnm)), Auto$ReactTemplate.default_auto)),
                                                              /* :: */[
                                                                Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                                                                        var freshH2 = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("H"), gl);
                                                                        return Tacticals$ReactTemplate.New[/* tclTHENS */18](destruct_on_using(EConstr$ReactTemplate.mkVar(freshH), freshH2), /* :: */[
                                                                                    Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                                                          Tactics$ReactTemplate.simplest_left,
                                                                                          /* :: */[
                                                                                            Tactics$ReactTemplate.apply(EConstr$ReactTemplate.of_constr(Constr$ReactTemplate.mkApp(/* tuple */[
                                                                                                          blI,
                                                                                                          Util$ReactTemplate.$$Array[/* map */12](Constr$ReactTemplate.mkVar, xargs)
                                                                                                        ]))),
                                                                                            /* :: */[
                                                                                              Auto$ReactTemplate.default_auto,
                                                                                              /* [] */0
                                                                                            ]
                                                                                          ]
                                                                                        ]),
                                                                                    /* :: */[
                                                                                      Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                                                                                              var freshH3 = fresh_id(Names$ReactTemplate.Id[/* of_string */5]("H"), gl);
                                                                                              var tag = Coqlib$ReactTemplate.coq_not_ref.tag | 0;
                                                                                              return Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                                                                          Tactics$ReactTemplate.simplest_right,
                                                                                                          /* :: */[
                                                                                                            Tactics$ReactTemplate.unfold_constr(tag === 250 ? Coqlib$ReactTemplate.coq_not_ref[0] : (
                                                                                                                    tag === 246 ? CamlinternalLazy.force_lazy_block(Coqlib$ReactTemplate.coq_not_ref) : Coqlib$ReactTemplate.coq_not_ref
                                                                                                                  )),
                                                                                                            /* :: */[
                                                                                                              Tactics$ReactTemplate.intro,
                                                                                                              /* :: */[
                                                                                                                Equality$ReactTemplate.subst_all(/* None */0, /* () */0),
                                                                                                                /* :: */[
                                                                                                                  Tactics$ReactTemplate.assert_by(/* Name */[freshH3], EConstr$ReactTemplate.of_constr(Constr$ReactTemplate.mkApp(/* tuple */[
                                                                                                                                eq$1,
                                                                                                                                /* array */[
                                                                                                                                  bb$1,
                                                                                                                                  Constr$ReactTemplate.mkApp(/* tuple */[
                                                                                                                                        eqI$1,
                                                                                                                                        /* array */[
                                                                                                                                          Constr$ReactTemplate.mkVar(freshm),
                                                                                                                                          Constr$ReactTemplate.mkVar(freshm)
                                                                                                                                        ]
                                                                                                                                      ]),
                                                                                                                                  tt$1
                                                                                                                                ]
                                                                                                                              ])), Tacticals$ReactTemplate.New[/* tclTHENLIST */19](/* :: */[
                                                                                                                            Tactics$ReactTemplate.apply(EConstr$ReactTemplate.of_constr(Constr$ReactTemplate.mkApp(/* tuple */[
                                                                                                                                          lbI,
                                                                                                                                          Util$ReactTemplate.$$Array[/* map */12](Constr$ReactTemplate.mkVar, xargs)
                                                                                                                                        ]))),
                                                                                                                            /* :: */[
                                                                                                                              Auto$ReactTemplate.default_auto,
                                                                                                                              /* [] */0
                                                                                                                            ]
                                                                                                                          ])),
                                                                                                                  /* :: */[
                                                                                                                    Equality$ReactTemplate.general_rewrite_bindings_in(/* true */1, /* AllOccurrences */0, /* true */1, /* false */0, /* None */0, Curry._1(Util$ReactTemplate.List[/* hd */1], avoid[0]), /* tuple */[
                                                                                                                            EConstr$ReactTemplate.mkVar(Curry._1(Util$ReactTemplate.List[/* hd */1], Curry._1(Util$ReactTemplate.List[/* tl */2], avoid[0]))),
                                                                                                                            /* NoBindings */0
                                                                                                                          ])(/* true */1),
                                                                                                                    /* :: */[
                                                                                                                      my_discr_tac,
                                                                                                                      /* [] */0
                                                                                                                    ]
                                                                                                                  ]
                                                                                                                ]
                                                                                                              ]
                                                                                                            ]
                                                                                                          ]
                                                                                                        ]);
                                                                                            })),
                                                                                      /* [] */0
                                                                                    ]
                                                                                  ]);
                                                                      })),
                                                                /* [] */0
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]);
                                          }));
                            }));
              }));
}

function make_eq_decidability(mode, mind) {
  var mib = Global$ReactTemplate.lookup_mind(mind);
  if (mib[/* mind_packets */0].length !== 1) {
    throw DecidabilityMutualNotSupported;
  }
  var ind = /* tuple */[
    mind,
    0
  ];
  var nparams = mib[/* mind_nparams */5];
  var nparrec = mib[/* mind_nparams_rec */6];
  var u = Univ$ReactTemplate.Instance[/* empty */0];
  var ctx = UState$ReactTemplate.make(Global$ReactTemplate.universes(/* () */0));
  var match = Termops$ReactTemplate.context_chop(nparams - nparrec | 0, mib[/* mind_params_ctxt */7]);
  var lnamesparrec = match[1];
  var side_eff = side_effect_of_mode(mode);
  var match$1 = Pfedit$ReactTemplate.build_by_tactic(/* Some */[side_eff], Global$ReactTemplate.env(/* () */0), ctx, /* None */0, EConstr$ReactTemplate.of_constr(compute_dec_goal(/* tuple */[
                ind,
                u
              ], lnamesparrec, nparrec)), compute_dec_tact(ind, lnamesparrec, nparrec));
  return /* tuple */[
          /* tuple */[
            /* array */[match$1[0]],
            match$1[2]
          ],
          Safe_typing$ReactTemplate.empty_private_constants
        ];
}

var eq_dec_scheme_kind = Ind_tables$ReactTemplate.declare_mutual_scheme_object("_eq_dec", /* None */0, make_eq_decidability);

Equality$ReactTemplate.set_eq_dec_scheme_kind(eq_dec_scheme_kind);

exports.EqNotFound = EqNotFound;
exports.EqUnknown = EqUnknown;
exports.UndefinedCst = UndefinedCst;
exports.InductiveWithProduct = InductiveWithProduct;
exports.InductiveWithSort = InductiveWithSort;
exports.ParameterWithoutEquality = ParameterWithoutEquality;
exports.NonSingletonProp = NonSingletonProp;
exports.DecidabilityMutualNotSupported = DecidabilityMutualNotSupported;
exports.NoDecidabilityCoInductive = NoDecidabilityCoInductive;
exports.beq_scheme_kind = beq_scheme_kind;
exports.build_beq_scheme = build_beq_scheme;
exports.lb_scheme_kind = lb_scheme_kind;
exports.make_lb_scheme = make_lb_scheme;
exports.bl_scheme_kind = bl_scheme_kind;
exports.make_bl_scheme = make_bl_scheme;
exports.eq_dec_scheme_kind = eq_dec_scheme_kind;
exports.make_eq_decidability = make_eq_decidability;
/* my_discr_tac Not a pure module */
