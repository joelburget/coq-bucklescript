// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var CAst$ReactTemplate = require("./cAst.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var UGraph$ReactTemplate = require("./uGraph.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var CString$ReactTemplate = require("./cString.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Univops$ReactTemplate = require("./univops.bs.js");
var Libnames$ReactTemplate = require("./libnames.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Universes$ReactTemplate = require("./universes.bs.js");
var Safe_typing$ReactTemplate = require("./safe_typing.bs.js");

var empty_000 = /* uctx_names : tuple */[
  Names$ReactTemplate.Id[/* Map */10][/* empty */0],
  Univ$ReactTemplate.LMap[/* empty */0]
];

var empty_001 = /* uctx_local */Univ$ReactTemplate.ContextSet[/* empty */0];

var empty_002 = /* uctx_seff_univs */Univ$ReactTemplate.LSet[/* empty */0];

var empty_003 = /* uctx_univ_variables */Univ$ReactTemplate.LMap[/* empty */0];

var empty_004 = /* uctx_univ_algebraic */Univ$ReactTemplate.LSet[/* empty */0];

var empty_007 = /* uctx_weak_constraints */Universes$ReactTemplate.UPairSet[/* empty */0];

var empty = /* record */[
  empty_000,
  empty_001,
  empty_002,
  empty_003,
  empty_004,
  /* uctx_universes */UGraph$ReactTemplate.initial_universes,
  /* uctx_initial_universes */UGraph$ReactTemplate.initial_universes,
  empty_007
];

function make(u) {
  var newrecord = empty.slice();
  newrecord[/* uctx_universes */5] = u;
  newrecord[/* uctx_initial_universes */6] = u;
  return newrecord;
}

function is_empty(ctx) {
  if (Univ$ReactTemplate.ContextSet[/* is_empty */1](ctx[/* uctx_local */1])) {
    return Curry._1(Univ$ReactTemplate.LMap[/* is_empty */1], ctx[/* uctx_univ_variables */3]);
  } else {
    return /* false */0;
  }
}

function uname_union(s, t) {
  if (s === t) {
    return s;
  } else {
    return Curry._3(Names$ReactTemplate.Id[/* Map */10][/* merge */6], (function (_, l, r) {
                  if (l) {
                    return l;
                  } else {
                    return r;
                  }
                }), s, t);
  }
}

function union(ctx, ctx$prime) {
  if (ctx === ctx$prime) {
    return ctx;
  } else if (is_empty(ctx$prime)) {
    return ctx;
  } else {
    var local = Univ$ReactTemplate.ContextSet[/* union */6](ctx[/* uctx_local */1], ctx$prime[/* uctx_local */1]);
    var seff = Curry._2(Univ$ReactTemplate.LSet[/* union */6], ctx[/* uctx_seff_univs */2], ctx$prime[/* uctx_seff_univs */2]);
    var names = uname_union(ctx[/* uctx_names */0][0], ctx$prime[/* uctx_names */0][0]);
    var newus = Curry._2(Univ$ReactTemplate.LSet[/* diff */8], Univ$ReactTemplate.ContextSet[/* levels */16](ctx$prime[/* uctx_local */1]), Univ$ReactTemplate.ContextSet[/* levels */16](ctx[/* uctx_local */1]));
    var newus$1 = Curry._2(Univ$ReactTemplate.LSet[/* diff */8], newus, Curry._1(Univ$ReactTemplate.LMap[/* domain */27], ctx[/* uctx_univ_variables */3]));
    var weak = Curry._2(Universes$ReactTemplate.UPairSet[/* union */6], ctx[/* uctx_weak_constraints */7], ctx$prime[/* uctx_weak_constraints */7]);
    var declarenew = function (g) {
      return Curry._3(Univ$ReactTemplate.LSet[/* fold */13], (function (u, g) {
                    return UGraph$ReactTemplate.add_universe(u, /* false */0, g);
                  }), newus$1, g);
    };
    var names_rev = Univ$ReactTemplate.LMap[/* union */36](ctx[/* uctx_names */0][1], ctx$prime[/* uctx_names */0][1]);
    var tmp;
    if (local === ctx[/* uctx_local */1]) {
      tmp = ctx[/* uctx_universes */5];
    } else {
      var cstrsr = Univ$ReactTemplate.ContextSet[/* constraints */15](ctx$prime[/* uctx_local */1]);
      tmp = UGraph$ReactTemplate.merge_constraints(cstrsr, declarenew(ctx[/* uctx_universes */5]));
    }
    return /* record */[
            /* uctx_names : tuple */[
              names,
              names_rev
            ],
            /* uctx_local */local,
            /* uctx_seff_univs */seff,
            /* uctx_univ_variables */Univ$ReactTemplate.LMap[/* subst_union */38](ctx[/* uctx_univ_variables */3], ctx$prime[/* uctx_univ_variables */3]),
            /* uctx_univ_algebraic */Curry._2(Univ$ReactTemplate.LSet[/* union */6], ctx[/* uctx_univ_algebraic */4], ctx$prime[/* uctx_univ_algebraic */4]),
            /* uctx_universes */tmp,
            /* uctx_initial_universes */declarenew(ctx[/* uctx_initial_universes */6]),
            /* uctx_weak_constraints */weak
          ];
  }
}

function context_set(ctx) {
  return ctx[/* uctx_local */1];
}

function constraints(ctx) {
  return ctx[/* uctx_local */1][1];
}

function context(ctx) {
  return Univ$ReactTemplate.ContextSet[/* to_context */13](ctx[/* uctx_local */1]);
}

function const_univ_entry(poly, uctx) {
  if (poly) {
    return /* Polymorphic_const_entry */Block.__(1, [Univ$ReactTemplate.ContextSet[/* to_context */13](uctx[/* uctx_local */1])]);
  } else {
    return /* Monomorphic_const_entry */Block.__(0, [uctx[/* uctx_local */1]]);
  }
}

function ind_univ_entry(poly, uctx) {
  if (poly) {
    return /* Polymorphic_ind_entry */Block.__(1, [Univ$ReactTemplate.ContextSet[/* to_context */13](uctx[/* uctx_local */1])]);
  } else {
    return /* Monomorphic_ind_entry */Block.__(0, [uctx[/* uctx_local */1]]);
  }
}

function of_context_set(ctx) {
  var newrecord = empty.slice();
  newrecord[/* uctx_local */1] = ctx;
  return newrecord;
}

function subst(ctx) {
  return ctx[/* uctx_univ_variables */3];
}

function ugraph(ctx) {
  return ctx[/* uctx_universes */5];
}

function initial_graph(ctx) {
  return ctx[/* uctx_initial_universes */6];
}

function algebraics(ctx) {
  return ctx[/* uctx_univ_algebraic */4];
}

function add_uctx_names(loc, s, l, param) {
  var names = param[0];
  if (Curry._2(Names$ReactTemplate.Id[/* Map */10][/* mem */2], s, names)) {
    CErrors$ReactTemplate.user_err(loc, /* Some */["add_uctx_names"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Universe "), Names$ReactTemplate.Id[/* print */8](s)), Pp$ReactTemplate.str(" already bound.")));
  }
  return /* tuple */[
          Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], s, l, names),
          Curry._3(Univ$ReactTemplate.LMap[/* add */3], l, /* record */[
                /* uname : Some */[s],
                /* uloc */loc
              ], param[1])
        ];
}

function add_uctx_loc(l, loc, param) {
  var names_rev = param[1];
  var names = param[0];
  if (loc) {
    return /* tuple */[
            names,
            Curry._3(Univ$ReactTemplate.LMap[/* add */3], l, /* record */[
                  /* uname : None */0,
                  /* uloc */loc
                ], names_rev)
          ];
  } else {
    return /* tuple */[
            names,
            names_rev
          ];
  }
}

function of_binders(b) {
  var rmap = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* fold */10], (function (id, l, rmap) {
          return Curry._3(Univ$ReactTemplate.LMap[/* add */3], l, /* record */[
                      /* uname : Some */[id],
                      /* uloc : None */0
                    ], rmap);
        }), b, Univ$ReactTemplate.LMap[/* empty */0]);
  var newrecord = empty.slice();
  newrecord[/* uctx_names */0] = /* tuple */[
    b,
    rmap
  ];
  return newrecord;
}

function universe_binders(ctx) {
  return ctx[/* uctx_names */0][0];
}

function instantiate_variable(l, b, v) {
  try {
    v[0] = Curry._3(Univ$ReactTemplate.LMap[/* set */25], l, /* Some */[b], v[0]);
    return /* () */0;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "uState.ml",
              147,
              20
            ]
          ];
    } else {
      throw exn;
    }
  }
}

var UniversesDiffer = Caml_exceptions.create("UState-ReactTemplate.UniversesDiffer");

var drop_weak_constraints = [/* false */0];

function process_universe_constraints(ctx, cstrs) {
  var univs = ctx[/* uctx_universes */5];
  var vars = [ctx[/* uctx_univ_variables */3]];
  var weak = [ctx[/* uctx_weak_constraints */7]];
  var normalize = Universes$ReactTemplate.normalize_univ_variable_opt_subst(vars);
  var nf_constraint = function (param) {
    switch (param.tag | 0) {
      case 0 : 
          return /* ULe */Block.__(0, [
                    Univ$ReactTemplate.subst_univs_universe(normalize, param[0]),
                    Univ$ReactTemplate.subst_univs_universe(normalize, param[1])
                  ]);
      case 1 : 
          return /* UEq */Block.__(1, [
                    Univ$ReactTemplate.subst_univs_universe(normalize, param[0]),
                    Univ$ReactTemplate.subst_univs_universe(normalize, param[1])
                  ]);
      case 2 : 
          return /* ULub */Block.__(2, [
                    Universes$ReactTemplate.level_subst_of(normalize, param[0]),
                    Universes$ReactTemplate.level_subst_of(normalize, param[1])
                  ]);
      case 3 : 
          return /* UWeak */Block.__(3, [
                    Universes$ReactTemplate.level_subst_of(normalize, param[0]),
                    Universes$ReactTemplate.level_subst_of(normalize, param[1])
                  ]);
      
    }
  };
  var is_local = function (l) {
    return Curry._2(Univ$ReactTemplate.LMap[/* mem */2], l, vars[0]);
  };
  var varinfo = function (x) {
    var match = Univ$ReactTemplate.Universe[/* level */8](x);
    if (match) {
      return /* Inr */Block.__(1, [match[0]]);
    } else {
      return /* Inl */Block.__(0, [x]);
    }
  };
  var equalize_variables = function (fo, l, l$prime, r, r$prime, local) {
    if (is_local(l$prime)) {
      instantiate_variable(l$prime, r, vars);
    } else if (is_local(r$prime)) {
      instantiate_variable(r$prime, l, vars);
    } else if (!UGraph$ReactTemplate.check_eq_level(univs, l$prime, r$prime)) {
      if (Univ$ReactTemplate.Level[/* is_small */2](l$prime) || Univ$ReactTemplate.Level[/* is_small */2](r$prime)) {
        throw [
              Univ$ReactTemplate.UniverseInconsistency,
              /* tuple */[
                /* Eq */2,
                l,
                r,
                /* None */0
              ]
            ];
      } else if (fo) {
        throw UniversesDiffer;
      }
      
    }
    return Univ$ReactTemplate.enforce_eq_level(l$prime, r$prime, local);
  };
  var unify_universes = function (cst, local) {
    var cst$1 = nf_constraint(cst);
    if (Universes$ReactTemplate.Constraints[/* is_trivial */26](cst$1)) {
      return local;
    } else {
      switch (cst$1.tag | 0) {
        case 0 : 
            var r = cst$1[1];
            var l = cst$1[0];
            if (UGraph$ReactTemplate.check_leq(univs, l, r)) {
              var match = Univ$ReactTemplate.Universe[/* level */8](l);
              var match$1 = Univ$ReactTemplate.Universe[/* level */8](r);
              if (match && match$1) {
                return Curry._2(Univ$ReactTemplate.Constraint[/* add */3], /* tuple */[
                            match[0],
                            /* Le */1,
                            match$1[0]
                          ], local);
              } else {
                return local;
              }
            } else {
              var match$2 = Univ$ReactTemplate.Universe[/* level */8](r);
              if (match$2) {
                var r$prime = match$2[0];
                if (Univ$ReactTemplate.Level[/* is_small */2](r$prime)) {
                  if (Univ$ReactTemplate.Universe[/* is_levels */7](l)) {
                    var levels = Univ$ReactTemplate.Universe[/* levels */9](l);
                    var fold = function (l$prime, local) {
                      var l = Univ$ReactTemplate.Universe[/* make */3](l$prime);
                      if (Univ$ReactTemplate.Level[/* is_small */2](l$prime) || is_local(l$prime)) {
                        return equalize_variables(/* false */0, l, l$prime, r, r$prime, local);
                      } else {
                        throw [
                              Univ$ReactTemplate.UniverseInconsistency,
                              /* tuple */[
                                /* Le */1,
                                l,
                                r,
                                /* None */0
                              ]
                            ];
                      }
                    };
                    return Curry._3(Univ$ReactTemplate.LSet[/* fold */13], fold, levels, local);
                  } else {
                    throw [
                          Univ$ReactTemplate.UniverseInconsistency,
                          /* tuple */[
                            /* Le */1,
                            l,
                            r,
                            /* None */0
                          ]
                        ];
                  }
                } else {
                  return Univ$ReactTemplate.enforce_leq(l, r, local);
                }
              } else {
                return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Algebraic universe on the right"));
              }
            }
            break;
        case 1 : 
            var l$1 = cst$1[0];
            var r$1 = cst$1[1];
            var local$1 = local;
            var match$3 = varinfo(l$1);
            var match$4 = varinfo(r$1);
            var exit = 0;
            var l$2;
            var r$2;
            if (match$3.tag) {
              var l$prime = match$3[0];
              if (match$4.tag) {
                return equalize_variables(/* false */0, l$1, l$prime, r$1, match$4[0], local$1);
              } else {
                l$2 = l$prime;
                r$2 = match$4[0];
                exit = 1;
              }
            } else if (match$4.tag) {
              l$2 = match$4[0];
              r$2 = match$3[0];
              exit = 1;
            } else if (UGraph$ReactTemplate.check_eq(univs, l$1, r$1)) {
              return local$1;
            } else {
              throw [
                    Univ$ReactTemplate.UniverseInconsistency,
                    /* tuple */[
                      /* Eq */2,
                      l$1,
                      r$1,
                      /* None */0
                    ]
                  ];
            }
            if (exit === 1) {
              var alg = Curry._2(Univ$ReactTemplate.LSet[/* mem */2], l$2, ctx[/* uctx_univ_algebraic */4]);
              var inst = Univ$ReactTemplate.univ_level_rem(l$2, r$2, r$2);
              if (alg) {
                instantiate_variable(l$2, inst, vars);
                return local$1;
              } else {
                var lu = Univ$ReactTemplate.Universe[/* make */3](l$2);
                if (Univ$ReactTemplate.univ_level_mem(l$2, r$2)) {
                  return Univ$ReactTemplate.enforce_leq(inst, lu, local$1);
                } else {
                  throw [
                        Univ$ReactTemplate.UniverseInconsistency,
                        /* tuple */[
                          /* Eq */2,
                          lu,
                          r$2,
                          /* None */0
                        ]
                      ];
                }
              }
            }
            case 2 : 
            var r$3 = cst$1[1];
            var l$3 = cst$1[0];
            return equalize_variables(/* true */1, Univ$ReactTemplate.Universe[/* make */3](l$3), l$3, Univ$ReactTemplate.Universe[/* make */3](r$3), r$3, local);
        case 3 : 
            if (!drop_weak_constraints[0]) {
              weak[0] = Curry._2(Universes$ReactTemplate.UPairSet[/* add */3], /* tuple */[
                    cst$1[0],
                    cst$1[1]
                  ], weak[0]);
            }
            return local;
        
      }
    }
  };
  var local = Curry._3(Universes$ReactTemplate.Constraints[/* fold */13], unify_universes, cstrs, Univ$ReactTemplate.Constraint[/* empty */0]);
  return /* tuple */[
          vars[0],
          weak[0],
          local
        ];
}

function add_constraints(ctx, cstrs) {
  var match = ctx[/* uctx_local */1];
  var cstrs$prime = Curry._3(Univ$ReactTemplate.Constraint[/* fold */13], (function (param, acc) {
          var l = Univ$ReactTemplate.Universe[/* make */3](param[0]);
          var r = Univ$ReactTemplate.Universe[/* make */3](param[2]);
          var cstr$prime;
          switch (param[1]) {
            case 0 : 
                cstr$prime = /* ULe */Block.__(0, [
                    Univ$ReactTemplate.Universe[/* super */10](l),
                    r
                  ]);
                break;
            case 1 : 
                cstr$prime = /* ULe */Block.__(0, [
                    l,
                    r
                  ]);
                break;
            case 2 : 
                cstr$prime = /* UEq */Block.__(1, [
                    l,
                    r
                  ]);
                break;
            
          }
          return Universes$ReactTemplate.Constraints[/* add */3](cstr$prime, acc);
        }), cstrs, Universes$ReactTemplate.Constraints[/* empty */0]);
  var match$1 = process_universe_constraints(ctx, cstrs$prime);
  var local$prime = match$1[2];
  return /* record */[
          /* uctx_names */ctx[/* uctx_names */0],
          /* uctx_local : tuple */[
            match[0],
            Curry._2(Univ$ReactTemplate.Constraint[/* union */6], match[1], local$prime)
          ],
          /* uctx_seff_univs */ctx[/* uctx_seff_univs */2],
          /* uctx_univ_variables */match$1[0],
          /* uctx_univ_algebraic */ctx[/* uctx_univ_algebraic */4],
          /* uctx_universes */UGraph$ReactTemplate.merge_constraints(local$prime, ctx[/* uctx_universes */5]),
          /* uctx_initial_universes */ctx[/* uctx_initial_universes */6],
          /* uctx_weak_constraints */match$1[1]
        ];
}

function add_universe_constraints(ctx, cstrs) {
  var match = ctx[/* uctx_local */1];
  var match$1 = process_universe_constraints(ctx, cstrs);
  var local$prime = match$1[2];
  return /* record */[
          /* uctx_names */ctx[/* uctx_names */0],
          /* uctx_local : tuple */[
            match[0],
            Curry._2(Univ$ReactTemplate.Constraint[/* union */6], match[1], local$prime)
          ],
          /* uctx_seff_univs */ctx[/* uctx_seff_univs */2],
          /* uctx_univ_variables */match$1[0],
          /* uctx_univ_algebraic */ctx[/* uctx_univ_algebraic */4],
          /* uctx_universes */UGraph$ReactTemplate.merge_constraints(local$prime, ctx[/* uctx_universes */5]),
          /* uctx_initial_universes */ctx[/* uctx_initial_universes */6],
          /* uctx_weak_constraints */match$1[1]
        ];
}

function constrain_variables(diff, ctx) {
  var match = ctx[/* uctx_local */1];
  var match$1 = Curry._3(Univ$ReactTemplate.LSet[/* fold */13], (function (l, param) {
          var cstrs = param[2];
          var vars = param[1];
          var univs = param[0];
          try {
            var match = Curry._2(Univ$ReactTemplate.LMap[/* find */21], l, vars);
            if (match) {
              return /* tuple */[
                      Curry._2(Univ$ReactTemplate.LSet[/* add */3], l, univs),
                      Curry._2(Univ$ReactTemplate.LMap[/* remove */5], l, vars),
                      Curry._2(Univ$ReactTemplate.Constraint[/* add */3], /* tuple */[
                            l,
                            /* Eq */2,
                            Option$ReactTemplate.get(Univ$ReactTemplate.Universe[/* level */8](match[0]))
                          ], cstrs)
                    ];
            } else {
              return /* tuple */[
                      univs,
                      vars,
                      cstrs
                    ];
            }
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return /* tuple */[
                      univs,
                      vars,
                      cstrs
                    ];
            } else if (exn === Option$ReactTemplate.IsNone) {
              return /* tuple */[
                      univs,
                      vars,
                      cstrs
                    ];
            } else {
              throw exn;
            }
          }
        }), diff, /* tuple */[
        match[0],
        ctx[/* uctx_univ_variables */3],
        match[1]
      ]);
  var newrecord = ctx.slice();
  newrecord[/* uctx_local */1] = /* tuple */[
    match$1[0],
    match$1[2]
  ];
  newrecord[/* uctx_univ_variables */3] = match$1[1];
  return newrecord;
}

function reference_of_level(uctx) {
  var match = uctx[/* uctx_names */0];
  var map_rev = match[1];
  return (function (l) {
      try {
        var eta = /* Ident */Block.__(1, [Option$ReactTemplate.get(Curry._2(Univ$ReactTemplate.LMap[/* find */21], l, map_rev)[/* uname */0])]);
        return CAst$ReactTemplate.make(/* None */0, eta);
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return Universes$ReactTemplate.reference_of_level(l);
        } else if (exn === Option$ReactTemplate.IsNone) {
          return Universes$ReactTemplate.reference_of_level(l);
        } else {
          throw exn;
        }
      }
    });
}

function pr_uctx_level(uctx, l) {
  return Libnames$ReactTemplate.pr_reference(reference_of_level(uctx)(l));
}

function error_unbound_universes(left, uctx) {
  var n = Curry._1(Univ$ReactTemplate.LSet[/* cardinal */18], left);
  var loc;
  try {
    loc = Curry._2(Univ$ReactTemplate.LMap[/* find */21], Curry._1(Univ$ReactTemplate.LSet[/* choose */22], left), uctx[/* uctx_names */0][1])[/* uloc */1];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      loc = /* None */0;
    } else {
      throw exn;
    }
  }
  return CErrors$ReactTemplate.user_err(loc, /* Some */["universe_context"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str(CString$ReactTemplate.plural(n, "Universe")), Pp$ReactTemplate.spc(/* () */0)), Univ$ReactTemplate.LSet[/* pr */24]((function (param) {
                                    return Libnames$ReactTemplate.pr_reference(Curry._1(reference_of_level(uctx), param));
                                  }), left)), Pp$ReactTemplate.spc(/* () */0)), Pp$ReactTemplate.str(CString$ReactTemplate.conjugate_verb_to_be(n))), Pp$ReactTemplate.str(" unbound.")));
}

function universe_context(names, extensible, uctx) {
  var levels = Univ$ReactTemplate.ContextSet[/* levels */16](uctx[/* uctx_local */1]);
  var match = Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (param, param$1) {
          var l;
          try {
            l = Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], param[/* v */0], uctx[/* uctx_names */0][0]);
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "uState.ml",
                      333,
                      29
                    ]
                  ];
            } else {
              throw exn;
            }
          }
          return /* tuple */[
                  /* :: */[
                    l,
                    param$1[0]
                  ],
                  Curry._2(Univ$ReactTemplate.LSet[/* remove */5], l, param$1[1])
                ];
        }), names, /* tuple */[
        /* [] */0,
        levels
      ]);
  var left = match[1];
  if (!extensible && !Curry._1(Univ$ReactTemplate.LSet[/* is_empty */1], left)) {
    return error_unbound_universes(left, uctx);
  } else {
    var left$1 = Univ$ReactTemplate.ContextSet[/* sort_levels */12](Util$ReactTemplate.$$Array[/* of_list */10](Curry._1(Univ$ReactTemplate.LSet[/* elements */19], left)));
    var inst = Util$ReactTemplate.$$Array[/* append */3](Util$ReactTemplate.$$Array[/* of_list */10](match[0]), left$1);
    var inst$1 = Univ$ReactTemplate.Instance[/* of_array */2](inst);
    return Univ$ReactTemplate.UContext[/* make */0](/* tuple */[
                inst$1,
                Univ$ReactTemplate.ContextSet[/* constraints */15](uctx[/* uctx_local */1])
              ]);
  }
}

function check_universe_context_set(names, extensible, uctx) {
  if (extensible) {
    return /* () */0;
  } else {
    var left = Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (left, param) {
            var l;
            try {
              l = Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], param[/* v */0], uctx[/* uctx_names */0][0]);
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "uState.ml",
                        353,
                        28
                      ]
                    ];
              } else {
                throw exn;
              }
            }
            return Curry._2(Univ$ReactTemplate.LSet[/* remove */5], l, left);
          }), Univ$ReactTemplate.ContextSet[/* levels */16](uctx[/* uctx_local */1]), names);
    if (Curry._1(Univ$ReactTemplate.LSet[/* is_empty */1], left)) {
      return 0;
    } else {
      return error_unbound_universes(left, uctx);
    }
  }
}

function check_implication(uctx, cstrs, cstrs$prime) {
  var gr = uctx[/* uctx_initial_universes */6];
  var grext = UGraph$ReactTemplate.merge_constraints(cstrs, gr);
  if (UGraph$ReactTemplate.check_constraints(cstrs$prime, grext)) {
    return /* () */0;
  } else {
    return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["check_univ_decl"], Pp$ReactTemplate.str("Universe constraints are not implied by the ones declared."));
  }
}

function check_mono_univ_decl(uctx, decl) {
  var names = decl[/* univdecl_instance */0];
  var extensible = decl[/* univdecl_extensible_instance */1];
  check_universe_context_set(names, extensible, uctx);
  if (!decl[/* univdecl_extensible_constraints */3]) {
    check_implication(uctx, decl[/* univdecl_constraints */2], Univ$ReactTemplate.ContextSet[/* constraints */15](uctx[/* uctx_local */1]));
  }
  return uctx[/* uctx_local */1];
}

function check_univ_decl(poly, uctx, decl) {
  var names = decl[/* univdecl_instance */0];
  var extensible = decl[/* univdecl_extensible_instance */1];
  var ctx = poly ? /* Polymorphic_const_entry */Block.__(1, [universe_context(names, extensible, uctx)]) : (check_universe_context_set(names, extensible, uctx), /* Monomorphic_const_entry */Block.__(0, [uctx[/* uctx_local */1]]));
  if (!decl[/* univdecl_extensible_constraints */3]) {
    check_implication(uctx, decl[/* univdecl_constraints */2], Univ$ReactTemplate.ContextSet[/* constraints */15](uctx[/* uctx_local */1]));
  }
  return ctx;
}

function restrict(ctx, vars) {
  var vars$1 = Curry._2(Univ$ReactTemplate.LSet[/* union */6], vars, ctx[/* uctx_seff_univs */2]);
  var vars$2 = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* fold */10], (function (_, l, vars) {
          return Curry._2(Univ$ReactTemplate.LSet[/* add */3], l, vars);
        }), ctx[/* uctx_names */0][0], vars$1);
  var uctx$prime = Univops$ReactTemplate.restrict_universe_context(ctx[/* uctx_local */1], vars$2);
  var newrecord = ctx.slice();
  newrecord[/* uctx_local */1] = uctx$prime;
  return newrecord;
}

function demote_seff_univs(entry, uctx) {
  var match = entry[/* const_entry_universes */4];
  if (match.tag) {
    return uctx;
  } else {
    var seff = Curry._2(Univ$ReactTemplate.LSet[/* union */6], uctx[/* uctx_seff_univs */2], match[0][0]);
    var newrecord = uctx.slice();
    newrecord[/* uctx_seff_univs */2] = seff;
    return newrecord;
  }
}

function merge(loc, sideff, rigid, uctx, ctx$prime) {
  var levels = Univ$ReactTemplate.ContextSet[/* levels */16](ctx$prime);
  var uctx$1;
  if (sideff) {
    uctx$1 = uctx;
  } else if (rigid) {
    var fold = function (u, accu) {
      if (Curry._2(Univ$ReactTemplate.LMap[/* mem */2], u, accu)) {
        return accu;
      } else {
        return Curry._3(Univ$ReactTemplate.LMap[/* add */3], u, /* None */0, accu);
      }
    };
    var uvars$prime = Curry._3(Univ$ReactTemplate.LSet[/* fold */13], fold, levels, uctx[/* uctx_univ_variables */3]);
    if (rigid[0]) {
      var newrecord = uctx.slice();
      newrecord[/* uctx_univ_variables */3] = uvars$prime;
      newrecord[/* uctx_univ_algebraic */4] = Curry._2(Univ$ReactTemplate.LSet[/* union */6], uctx[/* uctx_univ_algebraic */4], levels);
      uctx$1 = newrecord;
    } else {
      var newrecord$1 = uctx.slice();
      newrecord$1[/* uctx_univ_variables */3] = uvars$prime;
      uctx$1 = newrecord$1;
    }
  } else {
    uctx$1 = uctx;
  }
  var uctx_local = sideff ? uctx$1[/* uctx_local */1] : Univ$ReactTemplate.ContextSet[/* append */7](ctx$prime, uctx$1[/* uctx_local */1]);
  var declare = function (g) {
    return Curry._3(Univ$ReactTemplate.LSet[/* fold */13], (function (u, g) {
                  try {
                    return UGraph$ReactTemplate.add_universe(u, /* false */0, g);
                  }
                  catch (exn){
                    if (exn === UGraph$ReactTemplate.AlreadyDeclared) {
                      if (sideff) {
                        return g;
                      } else {
                        throw exn;
                      }
                    } else {
                      throw exn;
                    }
                  }
                }), levels, g);
  };
  var fold$1 = function (u, accu) {
    var modify = function (_, info) {
      var match = info[/* uloc */1];
      if (match) {
        return info;
      } else {
        return /* record */[
                /* uname */info[/* uname */0],
                /* uloc */loc
              ];
      }
    };
    try {
      return Curry._3(Univ$ReactTemplate.LMap[/* modify */26], u, modify, accu);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return Curry._3(Univ$ReactTemplate.LMap[/* add */3], u, /* record */[
                    /* uname : None */0,
                    /* uloc */loc
                  ], accu);
      } else {
        throw exn;
      }
    }
  };
  var uctx_names_000 = uctx$1[/* uctx_names */0][0];
  var uctx_names_001 = Curry._3(Univ$ReactTemplate.LSet[/* fold */13], fold$1, levels, uctx$1[/* uctx_names */0][1]);
  var uctx_names = /* tuple */[
    uctx_names_000,
    uctx_names_001
  ];
  var initial = declare(uctx$1[/* uctx_initial_universes */6]);
  var univs = declare(uctx$1[/* uctx_universes */5]);
  var uctx_universes = UGraph$ReactTemplate.merge_constraints(Univ$ReactTemplate.ContextSet[/* constraints */15](ctx$prime), univs);
  return /* record */[
          /* uctx_names */uctx_names,
          /* uctx_local */uctx_local,
          /* uctx_seff_univs */uctx$1[/* uctx_seff_univs */2],
          /* uctx_univ_variables */uctx$1[/* uctx_univ_variables */3],
          /* uctx_univ_algebraic */uctx$1[/* uctx_univ_algebraic */4],
          /* uctx_universes */uctx_universes,
          /* uctx_initial_universes */initial,
          /* uctx_weak_constraints */uctx$1[/* uctx_weak_constraints */7]
        ];
}

function merge_subst(uctx, s) {
  var newrecord = uctx.slice();
  newrecord[/* uctx_univ_variables */3] = Univ$ReactTemplate.LMap[/* subst_union */38](uctx[/* uctx_univ_variables */3], s);
  return newrecord;
}

function emit_side_effects(eff, u) {
  var uctxs = Safe_typing$ReactTemplate.universes_of_private(eff);
  return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (param, param$1) {
                return merge(/* None */0, /* true */1, /* UnivRigid */0, param, param$1);
              }), u, uctxs);
}

function new_univ_variable(loc, rigid, name, uctx) {
  var u = Universes$ReactTemplate.new_univ_level(/* () */0);
  var ctx$prime = Univ$ReactTemplate.ContextSet[/* add_universe */9](u, uctx[/* uctx_local */1]);
  var match;
  if (rigid) {
    var uvars$prime = Curry._3(Univ$ReactTemplate.LMap[/* add */3], u, /* None */0, uctx[/* uctx_univ_variables */3]);
    if (rigid[0]) {
      var newrecord = uctx.slice();
      match = /* tuple */[
        (newrecord[/* uctx_univ_variables */3] = uvars$prime, newrecord[/* uctx_univ_algebraic */4] = Curry._2(Univ$ReactTemplate.LSet[/* add */3], u, uctx[/* uctx_univ_algebraic */4]), newrecord),
        /* false */0
      ];
    } else {
      var newrecord$1 = uctx.slice();
      match = /* tuple */[
        (newrecord$1[/* uctx_univ_variables */3] = uvars$prime, newrecord$1),
        /* false */0
      ];
    }
  } else {
    match = /* tuple */[
      uctx,
      /* true */1
    ];
  }
  var uctx$prime = match[0];
  var names = name ? add_uctx_names(loc, name[0], u, uctx[/* uctx_names */0]) : add_uctx_loc(u, loc, uctx[/* uctx_names */0]);
  var initial = UGraph$ReactTemplate.add_universe(u, /* false */0, uctx[/* uctx_initial_universes */6]);
  var uctx$prime_002 = /* uctx_seff_univs */uctx$prime[/* uctx_seff_univs */2];
  var uctx$prime_003 = /* uctx_univ_variables */uctx$prime[/* uctx_univ_variables */3];
  var uctx$prime_004 = /* uctx_univ_algebraic */uctx$prime[/* uctx_univ_algebraic */4];
  var uctx$prime_005 = /* uctx_universes */UGraph$ReactTemplate.add_universe(u, /* false */0, uctx[/* uctx_universes */5]);
  var uctx$prime_007 = /* uctx_weak_constraints */uctx$prime[/* uctx_weak_constraints */7];
  var uctx$prime$1 = /* record */[
    /* uctx_names */names,
    /* uctx_local */ctx$prime,
    uctx$prime_002,
    uctx$prime_003,
    uctx$prime_004,
    uctx$prime_005,
    /* uctx_initial_universes */initial,
    uctx$prime_007
  ];
  return /* tuple */[
          uctx$prime$1,
          u
        ];
}

function make_with_initial_binders(e, us) {
  var uctx = make(e);
  return Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (uctx, param) {
                return new_univ_variable(param[/* loc */1], /* UnivRigid */0, /* Some */[param[/* v */0]], uctx)[0];
              }), uctx, us);
}

function add_global_univ(uctx, u) {
  var initial = UGraph$ReactTemplate.add_universe(u, /* true */1, uctx[/* uctx_initial_universes */6]);
  var univs = UGraph$ReactTemplate.add_universe(u, /* true */1, uctx[/* uctx_universes */5]);
  return /* record */[
          /* uctx_names */uctx[/* uctx_names */0],
          /* uctx_local */Univ$ReactTemplate.ContextSet[/* add_universe */9](u, uctx[/* uctx_local */1]),
          /* uctx_seff_univs */uctx[/* uctx_seff_univs */2],
          /* uctx_univ_variables */uctx[/* uctx_univ_variables */3],
          /* uctx_univ_algebraic */uctx[/* uctx_univ_algebraic */4],
          /* uctx_universes */univs,
          /* uctx_initial_universes */initial,
          /* uctx_weak_constraints */uctx[/* uctx_weak_constraints */7]
        ];
}

function make_flexible_variable(ctx, algebraic, u) {
  var avars = ctx[/* uctx_univ_algebraic */4];
  var uvars = ctx[/* uctx_univ_variables */3];
  var cstrs = ctx[/* uctx_local */1];
  var uvars$prime = Curry._3(Univ$ReactTemplate.LMap[/* add */3], u, /* None */0, uvars);
  var avars$prime;
  if (algebraic) {
    var uu = Univ$ReactTemplate.Universe[/* make */3](u);
    var substu_not_alg = function (u$prime, v) {
      return Option$ReactTemplate.cata((function (vu) {
                    if (Univ$ReactTemplate.Universe[/* equal */1](uu, vu)) {
                      return 1 - Curry._2(Univ$ReactTemplate.LSet[/* mem */2], u$prime, avars);
                    } else {
                      return /* false */0;
                    }
                  }), /* false */0, v);
    };
    var has_upper_constraint = function () {
      return Curry._2(Univ$ReactTemplate.Constraint[/* exists */15], (function (param) {
                    if (param[1]) {
                      return /* false */0;
                    } else {
                      return Univ$ReactTemplate.Level[/* equal */6](param[0], u);
                    }
                  }), Univ$ReactTemplate.ContextSet[/* constraints */15](cstrs));
    };
    avars$prime = Curry._2(Univ$ReactTemplate.LMap[/* exists */12], substu_not_alg, uvars) || has_upper_constraint(/* () */0) ? avars : Curry._2(Univ$ReactTemplate.LSet[/* add */3], u, avars);
  } else {
    avars$prime = avars;
  }
  var newrecord = ctx.slice();
  newrecord[/* uctx_univ_variables */3] = uvars$prime;
  newrecord[/* uctx_univ_algebraic */4] = avars$prime;
  return newrecord;
}

function make_flexible_nonalgebraic(ctx) {
  var newrecord = ctx.slice();
  newrecord[/* uctx_univ_algebraic */4] = Univ$ReactTemplate.LSet[/* empty */0];
  return newrecord;
}

function is_sort_variable(uctx, s) {
  if (s.tag) {
    var x = Univ$ReactTemplate.universe_level(s[0]);
    if (x && Curry._2(Univ$ReactTemplate.LSet[/* mem */2], x[0], Univ$ReactTemplate.ContextSet[/* levels */16](uctx[/* uctx_local */1]))) {
      return x;
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function subst_univs_context_with_def(def, usubst, param) {
  return /* tuple */[
          Curry._2(Univ$ReactTemplate.LSet[/* diff */8], param[0], def),
          Universes$ReactTemplate.subst_univs_constraints(usubst, param[1])
        ];
}

function normalize_variables(uctx) {
  var match = Universes$ReactTemplate.normalize_univ_variables(uctx[/* uctx_univ_variables */3]);
  var subst = match[3];
  var ctx_local = subst_univs_context_with_def(match[2], (function (param) {
          return Univ$ReactTemplate.make_subst(subst, param);
        }), uctx[/* uctx_local */1]);
  var match$1 = Universes$ReactTemplate.refresh_constraints(uctx[/* uctx_initial_universes */6], ctx_local);
  return /* tuple */[
          subst,
          /* record */[
            /* uctx_names */uctx[/* uctx_names */0],
            /* uctx_local */match$1[0],
            /* uctx_seff_univs */uctx[/* uctx_seff_univs */2],
            /* uctx_univ_variables */match[0],
            /* uctx_univ_algebraic */uctx[/* uctx_univ_algebraic */4],
            /* uctx_universes */match$1[1],
            /* uctx_initial_universes */uctx[/* uctx_initial_universes */6],
            /* uctx_weak_constraints */uctx[/* uctx_weak_constraints */7]
          ]
        ];
}

function abstract_undefined_variables(uctx) {
  var vars$prime = Curry._3(Univ$ReactTemplate.LMap[/* fold */10], (function (u, v, acc) {
          if (v) {
            return acc;
          } else {
            return Curry._2(Univ$ReactTemplate.LSet[/* remove */5], u, acc);
          }
        }), uctx[/* uctx_univ_variables */3], uctx[/* uctx_univ_algebraic */4]);
  var newrecord = uctx.slice();
  newrecord[/* uctx_local */1] = Univ$ReactTemplate.ContextSet[/* empty */0];
  newrecord[/* uctx_univ_algebraic */4] = vars$prime;
  return newrecord;
}

function fix_undefined_variables(uctx) {
  var match = Curry._3(Univ$ReactTemplate.LMap[/* fold */10], (function (u, v, acc) {
          if (v) {
            return acc;
          } else {
            return /* tuple */[
                    Curry._2(Univ$ReactTemplate.LSet[/* remove */5], u, acc[0]),
                    Curry._2(Univ$ReactTemplate.LMap[/* remove */5], u, acc[1])
                  ];
          }
        }), uctx[/* uctx_univ_variables */3], /* tuple */[
        uctx[/* uctx_univ_algebraic */4],
        uctx[/* uctx_univ_variables */3]
      ]);
  var newrecord = uctx.slice();
  newrecord[/* uctx_univ_variables */3] = match[1];
  newrecord[/* uctx_univ_algebraic */4] = match[0];
  return newrecord;
}

function refresh_undefined_univ_variables(uctx) {
  var match = Universes$ReactTemplate.fresh_universe_context_set_instance(uctx[/* uctx_local */1]);
  var ctx$prime = match[1];
  var subst = match[0];
  var alg = Curry._3(Univ$ReactTemplate.LSet[/* fold */13], (function (u, acc) {
          return Curry._2(Univ$ReactTemplate.LSet[/* add */3], Univ$ReactTemplate.subst_univs_level_level(subst, u), acc);
        }), uctx[/* uctx_univ_algebraic */4], Univ$ReactTemplate.LSet[/* empty */0]);
  var vars = Curry._3(Univ$ReactTemplate.LMap[/* fold */10], (function (u, v, acc) {
          return Curry._3(Univ$ReactTemplate.LMap[/* add */3], Univ$ReactTemplate.subst_univs_level_level(subst, u), Option$ReactTemplate.map((function (param) {
                            return Univ$ReactTemplate.subst_univs_level_universe(subst, param);
                          }), v), acc);
        }), uctx[/* uctx_univ_variables */3], Univ$ReactTemplate.LMap[/* empty */0]);
  var weak = Curry._3(Universes$ReactTemplate.UPairSet[/* fold */13], (function (param, acc) {
          return Curry._2(Universes$ReactTemplate.UPairSet[/* add */3], /* tuple */[
                      Univ$ReactTemplate.subst_univs_level_level(subst, param[0]),
                      Univ$ReactTemplate.subst_univs_level_level(subst, param[1])
                    ], acc);
        }), uctx[/* uctx_weak_constraints */7], Universes$ReactTemplate.UPairSet[/* empty */0]);
  var declare = function (g) {
    return Curry._3(Univ$ReactTemplate.LSet[/* fold */13], (function (u, g) {
                  return UGraph$ReactTemplate.add_universe(u, /* false */0, g);
                }), Univ$ReactTemplate.ContextSet[/* levels */16](ctx$prime), g);
  };
  var initial = declare(uctx[/* uctx_initial_universes */6]);
  var univs = declare(UGraph$ReactTemplate.initial_universes);
  var uctx$prime_000 = /* uctx_names */uctx[/* uctx_names */0];
  var uctx$prime_002 = /* uctx_seff_univs */uctx[/* uctx_seff_univs */2];
  var uctx$prime = /* record */[
    uctx$prime_000,
    /* uctx_local */ctx$prime,
    uctx$prime_002,
    /* uctx_univ_variables */vars,
    /* uctx_univ_algebraic */alg,
    /* uctx_universes */univs,
    /* uctx_initial_universes */initial,
    /* uctx_weak_constraints */weak
  ];
  return /* tuple */[
          uctx$prime,
          subst
        ];
}

function minimize(uctx) {
  var match = Universes$ReactTemplate.normalize_context_set(uctx[/* uctx_universes */5], uctx[/* uctx_local */1], uctx[/* uctx_univ_variables */3], uctx[/* uctx_univ_algebraic */4], uctx[/* uctx_weak_constraints */7]);
  var us$prime = match[1];
  var match$1 = match[0];
  if (Univ$ReactTemplate.ContextSet[/* equal */5](us$prime, uctx[/* uctx_local */1])) {
    return uctx;
  } else {
    var match$2 = Universes$ReactTemplate.refresh_constraints(uctx[/* uctx_initial_universes */6], us$prime);
    return /* record */[
            /* uctx_names */uctx[/* uctx_names */0],
            /* uctx_local */match$2[0],
            /* uctx_seff_univs */uctx[/* uctx_seff_univs */2],
            /* uctx_univ_variables */match$1[0],
            /* uctx_univ_algebraic */match$1[1],
            /* uctx_universes */match$2[1],
            /* uctx_initial_universes */uctx[/* uctx_initial_universes */6],
            /* uctx_weak_constraints */Universes$ReactTemplate.UPairSet[/* empty */0]
          ];
  }
}

function universe_of_name(uctx, s) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], s, uctx[/* uctx_names */0][0]);
}

function update_sigma_env(uctx, env) {
  var univs = Environ$ReactTemplate.universes(env);
  var newrecord = uctx.slice();
  newrecord[/* uctx_universes */5] = univs;
  newrecord[/* uctx_initial_universes */6] = univs;
  return merge(/* None */0, /* true */1, /* UnivRigid */0, newrecord, newrecord[/* uctx_local */1]);
}

function pr_weak(prl, param) {
  return Pp$ReactTemplate.prlist_with_sep(Pp$ReactTemplate.fnl, (function (param) {
                return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Curry._1(prl, param[0]), Pp$ReactTemplate.str(" ~ ")), Curry._1(prl, param[1]));
              }), Curry._1(Universes$ReactTemplate.UPairSet[/* elements */19], param[/* uctx_weak_constraints */7]));
}

var univ_rigid = /* UnivRigid */0;

var univ_flexible = /* UnivFlexible */[/* false */0];

var univ_flexible_alg = /* UnivFlexible */[/* true */1];

var normalize = minimize;

exports.UniversesDiffer = UniversesDiffer;
exports.empty = empty;
exports.make = make;
exports.make_with_initial_binders = make_with_initial_binders;
exports.is_empty = is_empty;
exports.union = union;
exports.of_context_set = of_context_set;
exports.of_binders = of_binders;
exports.universe_binders = universe_binders;
exports.context_set = context_set;
exports.subst = subst;
exports.ugraph = ugraph;
exports.initial_graph = initial_graph;
exports.algebraics = algebraics;
exports.constraints = constraints;
exports.context = context;
exports.const_univ_entry = const_univ_entry;
exports.ind_univ_entry = ind_univ_entry;
exports.drop_weak_constraints = drop_weak_constraints;
exports.add_constraints = add_constraints;
exports.add_universe_constraints = add_universe_constraints;
exports.universe_of_name = universe_of_name;
exports.restrict = restrict;
exports.demote_seff_univs = demote_seff_univs;
exports.univ_rigid = univ_rigid;
exports.univ_flexible = univ_flexible;
exports.univ_flexible_alg = univ_flexible_alg;
exports.merge = merge;
exports.merge_subst = merge_subst;
exports.emit_side_effects = emit_side_effects;
exports.new_univ_variable = new_univ_variable;
exports.add_global_univ = add_global_univ;
exports.make_flexible_variable = make_flexible_variable;
exports.make_flexible_nonalgebraic = make_flexible_nonalgebraic;
exports.is_sort_variable = is_sort_variable;
exports.normalize_variables = normalize_variables;
exports.constrain_variables = constrain_variables;
exports.abstract_undefined_variables = abstract_undefined_variables;
exports.fix_undefined_variables = fix_undefined_variables;
exports.refresh_undefined_univ_variables = refresh_undefined_univ_variables;
exports.minimize = minimize;
exports.normalize = normalize;
exports.check_univ_decl = check_univ_decl;
exports.check_mono_univ_decl = check_mono_univ_decl;
exports.update_sigma_env = update_sigma_env;
exports.pr_uctx_level = pr_uctx_level;
exports.reference_of_level = reference_of_level;
exports.pr_weak = pr_weak;
/* Pp-ReactTemplate Not a pure module */
