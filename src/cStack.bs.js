// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Stack = require("bs-platform/lib/js/stack.js");
var CList$ReactTemplate = require("./cList.bs.js");

function create() {
  return /* record */[/* stack : [] */0];
}

function push(x, s) {
  s[/* stack */0] = /* :: */[
    x,
    s[/* stack */0]
  ];
  return /* () */0;
}

function pop(s) {
  var match = s[/* stack */0];
  if (match) {
    s[/* stack */0] = match[1];
    return match[0];
  } else {
    throw Stack.Empty;
  }
}

function top(param) {
  var match = param[/* stack */0];
  if (match) {
    return match[0];
  } else {
    throw Stack.Empty;
  }
}

function to_list(param) {
  return param[/* stack */0];
}

function find(f, s) {
  return List.find(f, s[/* stack */0]);
}

function find_map(f, s) {
  return CList$ReactTemplate.find_map(f, s[/* stack */0]);
}

function fold_until(f, accu, s) {
  return CList$ReactTemplate.fold_left_until(f, accu, s[/* stack */0]);
}

function is_empty(param) {
  var s = param[/* stack */0];
  return +(s === /* [] */0);
}

function iter(f, param) {
  var s = param[/* stack */0];
  return List.iter(f, s);
}

function clear(s) {
  s[/* stack */0] = /* [] */0;
  return /* () */0;
}

function length(param) {
  return List.length(param[/* stack */0]);
}

var Empty = Stack.Empty;

exports.Empty = Empty;
exports.create = create;
exports.push = push;
exports.find = find;
exports.is_empty = is_empty;
exports.iter = iter;
exports.clear = clear;
exports.length = length;
exports.pop = pop;
exports.top = top;
exports.to_list = to_list;
exports.find_map = find_map;
exports.fold_until = fold_until;
/* No side effect */
