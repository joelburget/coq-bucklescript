// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function Make(funarg) {
  var $$let = function (X) {
    var T_codom = $$Map.Make(funarg);
    var codom_for_all = function (f, m) {
      var fold = function (_, v, accu) {
        if (Curry._1(f, v)) {
          return accu;
        } else {
          return /* false */0;
        }
      };
      return Curry._3(T_codom[/* fold */10], fold, m, /* true */1);
    };
    var empty_000 = X[/* nil */0];
    var empty_001 = T_codom[/* empty */0];
    var empty = /* Node */[
      empty_000,
      empty_001
    ];
    var next = function (param, lbl) {
      return Curry._2(T_codom[/* find */21], lbl, param[1]);
    };
    var get = function (param) {
      return param[0];
    };
    var labels = function (param) {
      return List.rev(Curry._3(T_codom[/* fold */10], (function (x, _, acc) {
                        return /* :: */[
                                x,
                                acc
                              ];
                      }), param[1], /* [] */0));
    };
    var is_empty_node = function (param) {
      if (Curry._1(X[/* is_nil */1], param[0])) {
        return Curry._1(T_codom[/* is_empty */1], param[1]);
      } else {
        return /* false */0;
      }
    };
    var assure_arc = function (m, lbl) {
      if (Curry._2(T_codom[/* mem */2], lbl, m)) {
        return m;
      } else {
        return Curry._3(T_codom[/* add */3], lbl, /* Node */[
                    X[/* nil */0],
                    T_codom[/* empty */0]
                  ], m);
      }
    };
    var cleanse_arcs = function (param) {
      var m = param[1];
      var m$1 = codom_for_all(is_empty_node, m) ? T_codom[/* empty */0] : m;
      return /* Node */[
              param[0],
              m$1
            ];
    };
    var at_path = function (f, param, param$1) {
      var m = param[1];
      var hereset = param[0];
      if (param$1) {
        var h = param$1[0];
        var m$1 = assure_arc(m, h);
        return cleanse_arcs(/* Node */[
                    hereset,
                    Curry._3(T_codom[/* add */3], h, at_path(f, Curry._2(T_codom[/* find */21], h, m$1), param$1[1]), m$1)
                  ]);
      } else {
        return cleanse_arcs(/* Node */[
                    Curry._1(f, hereset),
                    m
                  ]);
      }
    };
    var add = function (path, v, tm) {
      return at_path((function (hereset) {
                    return Curry._2(X[/* add */2], v, hereset);
                  }), tm, path);
    };
    var remove = function (path, v, tm) {
      return at_path((function (hereset) {
                    return Curry._2(X[/* sub */3], hereset, v);
                  }), tm, path);
    };
    var iter = function (f, tlm) {
      var apprec = function (pfx, param) {
        var path = List.rev(pfx);
        Curry._2(f, path, param[0]);
        return Curry._2(T_codom[/* iter */9], (function (l, tm) {
                      return apprec(/* :: */[
                                  l,
                                  pfx
                                ], tm);
                    }), param[1]);
      };
      return apprec(/* [] */0, tlm);
    };
    return /* module */[
            /* T_codom */T_codom,
            /* codom_for_all */codom_for_all,
            /* empty */empty,
            /* next */next,
            /* get */get,
            /* labels */labels,
            /* is_empty_node */is_empty_node,
            /* assure_arc */assure_arc,
            /* cleanse_arcs */cleanse_arcs,
            /* at_path */at_path,
            /* add */add,
            /* remove */remove,
            /* iter */iter
          ];
  };
  return (function (funarg) {
      var $$let$1 = $$let(funarg);
      return [
              $$let$1[2],
              $$let$1[4],
              $$let$1[3],
              $$let$1[5],
              $$let$1[10],
              $$let$1[11],
              $$let$1[12]
            ];
    });
}

exports.Make = Make;
/* No side effect */
