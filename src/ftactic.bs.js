// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Monad$ReactTemplate = require("./monad.bs.js");
var Proofview$ReactTemplate = require("./proofview.bs.js");

function $$return(x) {
  return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Uniform */Block.__(0, [x]));
}

function bind(m, f) {
  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], m, (function (param) {
                if (param.tag) {
                  var f$1 = function (arg) {
                    return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Curry._1(f, arg), (function (param) {
                                  if (param.tag) {
                                    var l = param[0];
                                    return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.Goal[/* goals */11], (function (goals) {
                                                  return Curry._1(Proofview$ReactTemplate.tclUNIT, List.combine(goals, l));
                                                }));
                                  } else {
                                    var x = param[0];
                                    return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.Goal[/* goals */11], (function (goals) {
                                                  return Curry._1(Proofview$ReactTemplate.tclUNIT, List.map((function (g) {
                                                                    return /* tuple */[
                                                                            g,
                                                                            x
                                                                          ];
                                                                  }), goals));
                                                }));
                                  }
                                }));
                  };
                  var filter = function (param) {
                    var x = param[1];
                    return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], param[0], (function (g) {
                                  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.Goal[/* unsolved */12](g), (function (param) {
                                                if (param !== 0) {
                                                  return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Some */[x]);
                                                } else {
                                                  return Curry._1(Proofview$ReactTemplate.tclUNIT, /* None */0);
                                                }
                                              }));
                                }));
                  };
                  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.tclDISPATCHL(List.map(f$1, param[0])), (function (l) {
                                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Curry._2(Proofview$ReactTemplate.Monad[/* List */4][/* map_filter */5], filter, List.concat(l)), (function (filtered) {
                                              return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Depends */Block.__(1, [filtered]));
                                            }));
                              }));
                } else {
                  return Curry._1(f, param[0]);
                }
              }));
}

var goals = Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.Goal[/* goals */11], (function (l) {
        return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Depends */Block.__(1, [l]));
      }));

function nf_enter(f) {
  return bind(goals, (function (gl) {
                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], gl, (function (gl) {
                              return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.Goal[/* normalize */1](gl), (function (nfgl) {
                                            return Proofview$ReactTemplate.V82[/* wrap_exceptions */10]((function () {
                                                          return Curry._1(f, nfgl);
                                                        }));
                                          }));
                            }));
              }));
}

function enter(f) {
  return bind(goals, (function (gl) {
                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], gl, (function (gl) {
                              return Proofview$ReactTemplate.V82[/* wrap_exceptions */10]((function () {
                                            return Curry._1(f, gl);
                                          }));
                            }));
              }));
}

function with_env(t) {
  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], t, (function (param) {
                if (param.tag) {
                  var l = param[0];
                  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.Goal[/* goals */11], (function (gs) {
                                return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Curry._2(Proofview$ReactTemplate.Monad[/* List */4][/* map */0], Curry._1(Proofview$ReactTemplate.Monad[/* map */3], Proofview$ReactTemplate.Goal[/* env */4]), gs), (function (envs) {
                                              return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Depends */Block.__(1, [List.combine(envs, l)]));
                                            }));
                              }));
                } else {
                  var a = param[0];
                  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Proofview$ReactTemplate.tclENV, (function (env) {
                                return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Uniform */Block.__(0, [/* tuple */[
                                                env,
                                                a
                                              ]]));
                              }));
                }
              }));
}

function lift(t) {
  return Curry._2(Proofview$ReactTemplate.tclBIND, t, (function (x) {
                return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Uniform */Block.__(0, [x]));
              }));
}

function run(m, k) {
  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], m, (function (param) {
                if (param.tag) {
                  return Proofview$ReactTemplate.tclDISPATCH(List.map(k, param[0]));
                } else {
                  return Curry._1(k, param[0]);
                }
              }));
}

function $less$star$great(m, n) {
  return bind(m, (function () {
                return n;
              }));
}

function map(f, x) {
  return bind(x, (function (a) {
                var x = Curry._1(f, a);
                return Curry._1(Proofview$ReactTemplate.tclUNIT, /* Uniform */Block.__(0, [x]));
              }));
}

var Self = /* module */[
  /* return */$$return,
  /* >>= */bind,
  /* >> */$less$star$great,
  /* map */map
];

var Ftac = Monad$ReactTemplate.Make(Self);

function $less$star$great$1(m, n) {
  return bind(m, (function () {
                return n;
              }));
}

var Notations = /* module */[
  /* >>= */bind,
  /* <*> */$less$star$great$1
];

var $great$great$eq = bind;

var List$1 = Ftac[/* List */4];

exports.$$return = $$return;
exports.bind = bind;
exports.lift = lift;
exports.run = run;
exports.nf_enter = nf_enter;
exports.enter = enter;
exports.with_env = with_env;
exports.$great$great$eq = $great$great$eq;
exports.$less$star$great = $less$star$great;
exports.List = List$1;
exports.Notations = Notations;
/* goals Not a pure module */
