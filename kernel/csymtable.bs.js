// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var Caml_missing_polyfill = require("bs-platform/lib/js/caml_missing_polyfill.js");
var Context$ReactTemplate = require("../src/context.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Pre_env$ReactTemplate = require("../src/pre_env.bs.js");
var Cbytegen$ReactTemplate = require("../src/cbytegen.bs.js");
var Vmvalues$ReactTemplate = require("../src/vmvalues.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var CEphemeron$ReactTemplate = require("../src/cEphemeron.bs.js");
var Cbytecodes$ReactTemplate = require("../src/cbytecodes.bs.js");
var Cemitcodes$ReactTemplate = require("../src/cemitcodes.bs.js");

function check_global_data(n) {
  if (n >= Caml_missing_polyfill.not_implemented("get_coq_global_data not implemented by bucklescript yet\n").length) {
    return Caml_missing_polyfill.not_implemented("realloc_coq_global_data not implemented by bucklescript yet\n");
  } else {
    return 0;
  }
}

var num_global = [0];

function set_global(v) {
  var n = num_global[0];
  check_global_data(n);
  Caml_array.caml_array_set(Caml_missing_polyfill.not_implemented("get_coq_global_data not implemented by bucklescript yet\n"), n, v);
  num_global[0] = num_global[0] + 1 | 0;
  return n;
}

var SConstTable = Hashtbl.Make(/* module */[
      /* equal */Cbytecodes$ReactTemplate.eq_structured_constant,
      /* hash */Cbytecodes$ReactTemplate.hash_structured_constant
    ]);

var AnnotTable = Hashtbl.Make(/* module */[
      /* equal */Cbytecodes$ReactTemplate.eq_annot_switch,
      /* hash */Cbytecodes$ReactTemplate.hash_annot_switch
    ]);

var str_cst_tbl = Curry._1(SConstTable[/* create */0], 31);

var annot_tbl = Curry._1(AnnotTable[/* create */0], 31);

var NotEvaluated = Caml_exceptions.create("Csymtable-ReactTemplate.NotEvaluated");

function slot_for_getglobal(env, kn) {
  var match = Pre_env$ReactTemplate.lookup_constant_key(kn, env);
  var rk = match[1][1];
  try {
    var rk$1 = rk;
    var match$1 = rk$1[0];
    if (match$1) {
      try {
        return CEphemeron$ReactTemplate.get(match$1[0]);
      }
      catch (exn){
        if (exn === CEphemeron$ReactTemplate.InvalidKey) {
          throw NotEvaluated;
        } else {
          throw exn;
        }
      }
    } else {
      throw NotEvaluated;
    }
  }
  catch (exn$1){
    if (exn$1 === NotEvaluated) {
      var match$2 = match[0][/* const_body_code */3];
      var pos;
      if (match$2) {
        var match$3 = Cemitcodes$ReactTemplate.force(match$2[0]);
        if (typeof match$3 === "number") {
          pos = set_global(Vmvalues$ReactTemplate.val_of_constant(kn));
        } else if (match$3.tag) {
          pos = slot_for_getglobal(env, match$3[0]);
        } else {
          var match$4 = match$3[0];
          pos = set_global(eval_to_patch(env, /* tuple */[
                    match$4[0],
                    match$4[1],
                    match$4[2]
                  ]));
        }
      } else {
        pos = set_global(Vmvalues$ReactTemplate.val_of_constant(kn));
      }
      rk[0] = /* Some */[CEphemeron$ReactTemplate.create(pos)];
      return pos;
    } else {
      throw exn$1;
    }
  }
}

function slot_for_fv(env, fv) {
  var fill_fv_cache = function (cache, id, v_of_id, env_of_id, b) {
    var match;
    if (b) {
      var c = b[0];
      match = /* tuple */[
        val_of_constr(Curry._2(env_of_id, id, env), c),
        Environ$ReactTemplate.global_vars_set(Environ$ReactTemplate.env_of_pre_env(env), c)
      ];
    } else {
      match = /* tuple */[
        Curry._1(v_of_id, id),
        Names$ReactTemplate.Id[/* Set */9][/* empty */0]
      ];
    }
    var v = match[0];
    Pre_env$ReactTemplate.build_lazy_val(cache, /* tuple */[
          v,
          match[1]
        ]);
    return v;
  };
  var val_of_rel = function (i) {
    return Vmvalues$ReactTemplate.val_of_rel(Pre_env$ReactTemplate.nb_rel(env) - i | 0);
  };
  var idfun = function (_, x) {
    return x;
  };
  switch (fv.tag | 0) {
    case 0 : 
        var id = fv[0];
        var nv = Pre_env$ReactTemplate.lookup_named_val(id, env);
        var match = Pre_env$ReactTemplate.force_lazy_val(nv);
        if (match) {
          return match[0][0];
        } else {
          return fill_fv_cache(nv, id, Vmvalues$ReactTemplate.val_of_named, idfun, Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_value */1], Pre_env$ReactTemplate.lookup_named(id, env)));
        }
    case 1 : 
        var i = fv[0];
        var rv = Pre_env$ReactTemplate.lookup_rel_val(i, env);
        var match$1 = Pre_env$ReactTemplate.force_lazy_val(rv);
        if (match$1) {
          return match$1[0][0];
        } else {
          return fill_fv_cache(rv, i, val_of_rel, Pre_env$ReactTemplate.env_of_rel, Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_value */1], Pre_env$ReactTemplate.lookup_rel(i, env)));
        }
    case 2 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "csymtable.ml",
                157,
                4
              ]
            ];
    case 3 : 
        return Vmvalues$ReactTemplate.val_of_evar(fv[0]);
    
  }
}

function eval_to_patch(env, param) {
  var slots = function (param) {
    switch (param.tag | 0) {
      case 0 : 
          var key = param[0];
          try {
            return Curry._2(AnnotTable[/* find */6], annot_tbl, key);
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              var n = set_global(key);
              Curry._3(AnnotTable[/* add */4], annot_tbl, key, n);
              return n;
            } else {
              throw exn;
            }
          }
      case 1 : 
          var key$1 = param[0];
          try {
            return Curry._2(SConstTable[/* find */6], str_cst_tbl, key$1);
          }
          catch (exn$1){
            if (exn$1 === Caml_builtin_exceptions.not_found) {
              var n$1 = set_global(Vmvalues$ReactTemplate.val_of_str_const(key$1));
              Curry._3(SConstTable[/* add */4], str_cst_tbl, key$1, n$1);
              return n$1;
            } else {
              throw exn$1;
            }
          }
      case 2 : 
          return slot_for_getglobal(env, param[0]);
      
    }
  };
  Cemitcodes$ReactTemplate.patch(param[0], param[1], slots);
  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
          return slot_for_fv(env, param);
        }), param[2]);
  return Caml_missing_polyfill.not_implemented("coq_eval_tcode not implemented by bucklescript yet\n");
}

function val_of_constr(env, c) {
  var match = Cbytegen$ReactTemplate.compile(/* true */1, /* None */0, env, c);
  if (match) {
    return eval_to_patch(env, Cemitcodes$ReactTemplate.to_memory(match[0]));
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "csymtable.ml",
            172,
            12
          ]
        ];
  }
}

function set_transparent_const() {
  return /* () */0;
}

function set_opaque_const() {
  return /* () */0;
}

exports.val_of_constr = val_of_constr;
exports.set_opaque_const = set_opaque_const;
exports.set_transparent_const = set_transparent_const;
/* SConstTable Not a pure module */
