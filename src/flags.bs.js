// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");
var Backtrace$ReactTemplate = require("./backtrace.bs.js");

function with_modified_ref($staropt$star, r, nf, f, x) {
  var restore = $staropt$star ? $staropt$star[0] : /* true */1;
  var old_ref = r[0];
  r[0] = Curry._1(nf, r[0]);
  try {
    var pre = r[0];
    var res = Curry._1(f, x);
    if (restore || pre === r[0]) {
      r[0] = old_ref;
    }
    return res;
  }
  catch (raw_reraise){
    var reraise = Js_exn.internalToOCamlException(raw_reraise);
    var reraise$1 = Backtrace$ReactTemplate.add_backtrace(reraise);
    r[0] = old_ref;
    return Exninfo$ReactTemplate.iraise(reraise$1);
  }
}

function with_option(o, f, x) {
  return with_modified_ref(/* Some */[/* false */0], o, (function () {
                return /* true */1;
              }), f, x);
}

function without_option(o, f, x) {
  return with_modified_ref(/* Some */[/* false */0], o, (function () {
                return /* false */0;
              }), f, x);
}

function with_extra_values(o, l, f, x) {
  return with_modified_ref(/* None */0, o, (function (ol) {
                return Pervasives.$at(ol, l);
              }), f, x);
}

function with_modified_ref$1(r, nf, f, x) {
  return with_modified_ref(/* None */0, r, nf, f, x);
}

var debug = [/* false */0];

var ide_slave = [/* false */0];

var async_proofs_worker_id = ["master"];

function async_proofs_is_worker() {
  return +(async_proofs_worker_id[0] !== "master");
}

var warn = [/* true */1];

function make_warn(flag) {
  warn[0] = flag;
  return /* () */0;
}

function if_warn(f, x) {
  if (warn[0]) {
    return Curry._1(f, x);
  } else {
    return 0;
  }
}

var dump_bytecode = [/* false */0];

function set_dump_bytecode(param) {
  dump_bytecode[0] = param;
  return /* () */0;
}

function get_dump_bytecode() {
  return dump_bytecode[0];
}

var dump_lambda = [/* false */0];

function set_dump_lambda(param) {
  dump_lambda[0] = param;
  return /* () */0;
}

function get_dump_lambda() {
  return dump_lambda[0];
}

var we_are_parsing = [/* false */0];

var in_debugger = [/* false */0];

var in_toplevel = [/* false */0];

var program_mode = [/* false */0];

function is_program_mode() {
  return program_mode[0];
}

var quiet = [/* false */0];

function silently(f, x) {
  return with_option(quiet, f, x);
}

function verbosely(f, x) {
  return without_option(quiet, f, x);
}

function if_silent(f, x) {
  if (quiet[0]) {
    return Curry._1(f, x);
  } else {
    return 0;
  }
}

function if_verbose(f, x) {
  if (quiet[0]) {
    return 0;
  } else {
    return Curry._1(f, x);
  }
}

var raw_print = [/* false */0];

var univ_print = [/* false */0];

var beautify = [/* false */0];

var beautify_file = [/* false */0];

var inline_level = [100];

function set_inline_level(param) {
  inline_level[0] = param;
  return /* () */0;
}

function get_inline_level() {
  return inline_level[0];
}

var compat_version = [/* Current */2];

function version_compare(v1, v2) {
  switch (v1) {
    case 0 : 
        if (v2 !== 0) {
          return -1;
        } else {
          return 0;
        }
    case 1 : 
        switch (v2) {
          case 0 : 
              return 1;
          case 1 : 
              return 0;
          case 2 : 
              return -1;
          
        }
        break;
    case 2 : 
        switch (v2) {
          case 0 : 
          case 1 : 
              return 1;
          case 2 : 
              return 0;
          
        }
        break;
    
  }
}

function version_strictly_greater(v) {
  return +(version_compare(compat_version[0], v) > 0);
}

function version_less_or_equal(v) {
  return 1 - version_strictly_greater(v);
}

function pr_version(param) {
  switch (param) {
    case 0 : 
        return "8.6";
    case 1 : 
        return "8.7";
    case 2 : 
        return "current";
    
  }
}

function with_options(ol, f, x) {
  var vl = List.map((function (prim) {
          return prim[0];
        }), ol);
  List.iter((function (r) {
          r[0] = /* true */1;
          return /* () */0;
        }), ol);
  try {
    var r = Curry._1(f, x);
    List.iter2((function (prim, prim$1) {
            prim[0] = prim$1;
            return /* () */0;
          }), ol, vl);
    return r;
  }
  catch (raw_reraise){
    var reraise = Js_exn.internalToOCamlException(raw_reraise);
    var reraise$1 = Backtrace$ReactTemplate.add_backtrace(reraise);
    List.iter2((function (prim, prim$1) {
            prim[0] = prim$1;
            return /* () */0;
          }), ol, vl);
    return Exninfo$ReactTemplate.iraise(reraise$1);
  }
}

var universe_polymorphism = [/* false */0];

function make_universe_polymorphism(b) {
  universe_polymorphism[0] = b;
  return /* () */0;
}

function is_universe_polymorphism() {
  return universe_polymorphism[0];
}

var polymorphic_inductive_cumulativity = [/* false */0];

function make_polymorphic_inductive_cumulativity(b) {
  polymorphic_inductive_cumulativity[0] = b;
  return /* () */0;
}

function is_polymorphic_inductive_cumulativity() {
  return polymorphic_inductive_cumulativity[0];
}

var auto_intros = [/* true */1];

function make_auto_intros(flag) {
  auto_intros[0] = flag;
  return /* () */0;
}

function is_auto_intros() {
  return auto_intros[0];
}

var test_mode = [/* false */0];

var profile = /* false */0;

var default_inline_level = 100;

exports.with_option = with_option;
exports.without_option = without_option;
exports.with_extra_values = with_extra_values;
exports.with_modified_ref = with_modified_ref$1;
exports.debug = debug;
exports.ide_slave = ide_slave;
exports.profile = profile;
exports.async_proofs_worker_id = async_proofs_worker_id;
exports.async_proofs_is_worker = async_proofs_is_worker;
exports.warn = warn;
exports.make_warn = make_warn;
exports.if_warn = if_warn;
exports.dump_bytecode = dump_bytecode;
exports.set_dump_bytecode = set_dump_bytecode;
exports.get_dump_bytecode = get_dump_bytecode;
exports.dump_lambda = dump_lambda;
exports.set_dump_lambda = set_dump_lambda;
exports.get_dump_lambda = get_dump_lambda;
exports.we_are_parsing = we_are_parsing;
exports.in_debugger = in_debugger;
exports.in_toplevel = in_toplevel;
exports.program_mode = program_mode;
exports.is_program_mode = is_program_mode;
exports.quiet = quiet;
exports.silently = silently;
exports.verbosely = verbosely;
exports.if_silent = if_silent;
exports.if_verbose = if_verbose;
exports.raw_print = raw_print;
exports.univ_print = univ_print;
exports.beautify = beautify;
exports.beautify_file = beautify_file;
exports.default_inline_level = default_inline_level;
exports.inline_level = inline_level;
exports.set_inline_level = set_inline_level;
exports.get_inline_level = get_inline_level;
exports.compat_version = compat_version;
exports.version_compare = version_compare;
exports.version_strictly_greater = version_strictly_greater;
exports.version_less_or_equal = version_less_or_equal;
exports.pr_version = pr_version;
exports.with_options = with_options;
exports.universe_polymorphism = universe_polymorphism;
exports.make_universe_polymorphism = make_universe_polymorphism;
exports.is_universe_polymorphism = is_universe_polymorphism;
exports.polymorphic_inductive_cumulativity = polymorphic_inductive_cumulativity;
exports.make_polymorphic_inductive_cumulativity = make_polymorphic_inductive_cumulativity;
exports.is_polymorphic_inductive_cumulativity = is_polymorphic_inductive_cumulativity;
exports.auto_intros = auto_intros;
exports.make_auto_intros = make_auto_intros;
exports.is_auto_intros = is_auto_intros;
exports.test_mode = test_mode;
/* Exninfo-ReactTemplate Not a pure module */
