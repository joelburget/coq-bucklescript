// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Pcoq$ReactTemplate = require("./pcoq.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var CLexer$ReactTemplate = require("./cLexer.bs.js");
var Genarg$ReactTemplate = require("./genarg.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function ty_rule_of_gram(param) {
  if (param) {
    var match = param[0];
    if (match.tag) {
      var match$1 = match[0][1];
      var match$2 = ty_rule_of_gram(param[1]);
      var inj = Option$ReactTemplate.map(Genarg$ReactTemplate.in_gen, match$1[0]);
      var r_000 = match$2[0];
      var r_001 = match$1[1];
      var r = /* TyNext */[
        r_000,
        r_001,
        inj
      ];
      return /* AnyTyRule */[r];
    } else {
      var match$3 = ty_rule_of_gram(param[1]);
      var tok = /* Atoken */Block.__(0, [CLexer$ReactTemplate.terminal(match[0])]);
      var r_000$1 = match$3[0];
      var r$1 = /* TyNext */[
        r_000$1,
        tok,
        /* None */0
      ];
      return /* AnyTyRule */[r$1];
    }
  } else {
    return /* AnyTyRule */[/* TyStop */0];
  }
}

function ty_erase(param) {
  if (param) {
    return /* Next */[
            ty_erase(param[0]),
            param[1]
          ];
  } else {
    return /* Stop */0;
  }
}

function ty_eval(param) {
  if (param) {
    var match = param[2];
    var rem = param[0];
    if (match) {
      var inj = match[0];
      return (function (f, x) {
          return Curry._1(ty_eval(rem), (function (loc, args) {
                        return Curry._2(f, loc, /* :: */[
                                    Curry._1(inj, x),
                                    args
                                  ]);
                      }));
        });
    } else {
      return (function (f, _) {
          return Curry._1(ty_eval(rem), f);
        });
    }
  } else {
    return (function (f, loc) {
        return Curry._2(f, loc, /* [] */0);
      });
  }
}

function make_rule(f, prod) {
  var match = ty_rule_of_gram(Curry._1(Util$ReactTemplate.List[/* rev */4], prod));
  var ty_rule = match[0];
  var symb = ty_erase(ty_rule);
  var f$1 = function (loc, l) {
    return Curry._2(f, loc, Curry._1(Util$ReactTemplate.List[/* rev */4], l));
  };
  var act = Curry._1(ty_eval(ty_rule), f$1);
  return /* Rule */[
          symb,
          act
        ];
}

var vernac_exts = [/* [] */0];

function get_extend_vernac_rule(param) {
  var i = param[1];
  var s = param[0];
  try {
    var find = function (param) {
      var match = param[0];
      if (match[0] === s) {
        return +(i === match[1]);
      } else {
        return /* false */0;
      }
    };
    return Curry._2(Util$ReactTemplate.List[/* find */26], find, vernac_exts[0])[1];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      throw Caml_builtin_exceptions.not_found;
    } else {
      throw exn;
    }
  }
}

function extend_vernac_command_grammar(s, nt, gl) {
  var nt$1 = Option$ReactTemplate.$$default(Pcoq$ReactTemplate.Vernac_[/* command */2], nt);
  vernac_exts[0] = /* :: */[
    /* tuple */[
      s,
      gl
    ],
    vernac_exts[0]
  ];
  var mkact = function (_, l) {
    return /* VernacExtend */Block.__(83, [
              s,
              l
            ]);
  };
  var rules_000 = make_rule(mkact, gl);
  var rules = /* :: */[
    rules_000,
    /* [] */0
  ];
  return Pcoq$ReactTemplate.grammar_extend(nt$1, /* None */0, /* tuple */[
              /* None */0,
              /* :: */[
                /* tuple */[
                  /* None */0,
                  /* None */0,
                  rules
                ],
                /* [] */0
              ]
            ]);
}

exports.extend_vernac_command_grammar = extend_vernac_command_grammar;
exports.get_extend_vernac_rule = get_extend_vernac_rule;
exports.make_rule = make_rule;
/* Pcoq-ReactTemplate Not a pure module */
