// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Dyn$ReactTemplate = require("./dyn.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var CList$ReactTemplate = require("./cList.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Feedback$ReactTemplate = require("./feedback.bs.js");
var CWarnings$ReactTemplate = require("./cWarnings.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var CEphemeron$ReactTemplate = require("./cEphemeron.bs.js");

var Dyn = Dyn$ReactTemplate.Make(/* module */[]);

var sum_mod = [/* None */0];

var sum_map = [Util$ReactTemplate.$$String[/* Map */39][/* empty */0]];

function unmangle(id) {
  return Curry._3(Util$ReactTemplate.$$String[/* sub */3], id, 0, id.length - 8 | 0);
}

var ml_modules = "ML-MODULES";

function internal_declare_summary(fadd, sumname, sdecl) {
  var match = Curry._1(Dyn[/* Easy */6][/* make_dyn_tag */0], sumname + "-SUMMARY");
  var outfun = match[1];
  var infun = match[0];
  var dyn_freeze = function (b) {
    return Curry._1(infun, Curry._1(sdecl[/* freeze_function */0], b));
  };
  var dyn_unfreeze = function (sum) {
    return Curry._1(sdecl[/* unfreeze_function */1], Curry._1(outfun, sum));
  };
  var dyn_init = sdecl[/* init_function */2];
  var ddecl = /* record */[
    /* freeze_function */dyn_freeze,
    /* unfreeze_function */dyn_unfreeze,
    /* init_function */dyn_init
  ];
  Curry._2(fadd, sumname, ddecl);
  return match[2];
}

function declare_ml_modules_summary(decl) {
  var ml_add = function (_, ddecl) {
    sum_mod[0] = /* Some */[ddecl];
    return /* () */0;
  };
  return internal_declare_summary(ml_add, ml_modules, decl);
}

function declare_ml_modules_summary$1(decl) {
  declare_ml_modules_summary(decl);
  return /* () */0;
}

function declare_summary_tag(sumname, decl) {
  var fadd = function (name, ddecl) {
    sum_map[0] = Curry._3(Util$ReactTemplate.$$String[/* Map */39][/* add */3], name, ddecl, sum_map[0]);
    return /* () */0;
  };
  if (Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], sumname, sum_map[0])) {
    CErrors$ReactTemplate.anomaly(/* None */0, /* Some */["Summary.declare_summary"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Colliding summary names: "), Pp$ReactTemplate.str(sumname)), Pp$ReactTemplate.str(" vs. ")), Pp$ReactTemplate.str(sumname)), Pp$ReactTemplate.str(".")));
  }
  return internal_declare_summary(fadd, sumname, decl);
}

function declare_summary(sumname, decl) {
  declare_summary_tag(sumname, decl);
  return /* () */0;
}

var empty_frozen_000 = /* summaries */Util$ReactTemplate.$$String[/* Map */39][/* empty */0];

var empty_frozen = /* record */[
  empty_frozen_000,
  /* ml_module : None */0
];

function freeze_summaries(marshallable) {
  var smap = function (decl) {
    return Curry._1(decl[/* freeze_function */0], marshallable);
  };
  return /* record */[
          /* summaries */Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* map */22], smap, sum_map[0]),
          /* ml_module */Option$ReactTemplate.map((function (decl) {
                  return Curry._1(decl[/* freeze_function */0], marshallable);
                }), sum_mod[0])
        ];
}

function unfreeze_single(name, state) {
  var decl;
  try {
    decl = Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* find */21], name, sum_map[0]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      decl = CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("trying to unfreeze unregistered summary "), Pp$ReactTemplate.str(name)));
    } else {
      throw exn;
    }
  }
  try {
    return Curry._1(decl[/* unfreeze_function */1], state);
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    if (CErrors$ReactTemplate.noncritical(e)) {
      var e$1 = CErrors$ReactTemplate.push(e);
      Feedback$ReactTemplate.msg_warning(/* None */0, Pp$ReactTemplate.seq(/* :: */[
                Pp$ReactTemplate.str("Error unfreezing summary "),
                /* :: */[
                  Pp$ReactTemplate.str(name),
                  /* :: */[
                    Pp$ReactTemplate.fnl(/* () */0),
                    /* :: */[
                      CErrors$ReactTemplate.iprint(e$1),
                      /* [] */0
                    ]
                  ]
                ]
              ]));
      return Util$ReactTemplate.iraise(e$1);
    } else {
      throw e;
    }
  }
}

var warn_summary_out_of_scope = CWarnings$ReactTemplate.create("summary-out-of-scope", "dev", /* Some */[/* Disabled */0], (function (name) {
        return Pp$ReactTemplate.str(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "A Coq plugin was loaded inside a local scope (such as a Section). It is recommended to load plugins at the start of the file. Summary entry: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "A Coq plugin was loaded inside a local scope (such as a Section). It is recommended to load plugins at the start of the file. Summary entry: %s"
                          ]), name));
      }));

function unfreeze_summaries($staropt$star, param) {
  var summaries = param[/* summaries */0];
  var partial = $staropt$star ? $staropt$star[0] : /* false */0;
  var match = sum_mod[0];
  if (match) {
    var decl = match[0];
    Option$ReactTemplate.iter((function (state) {
            return Curry._1(decl[/* unfreeze_function */1], state);
          }), param[/* ml_module */1]);
  } else {
    CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Undeclared summary "), Pp$ReactTemplate.str(ml_modules)), Pp$ReactTemplate.str(".")));
  }
  var ufz = function (name, decl) {
    try {
      return Curry._1(decl[/* unfreeze_function */1], Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* find */21], name, summaries));
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        if (partial) {
          return 0;
        } else {
          Curry._2(warn_summary_out_of_scope, /* None */0, name);
          return Curry._1(decl[/* init_function */2], /* () */0);
        }
      } else {
        throw exn;
      }
    }
  };
  return Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* iter */9], ufz, sum_map[0]);
}

function init_summaries() {
  return Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* iter */9], (function (_, decl) {
                return Curry._1(decl[/* init_function */2], /* () */0);
              }), sum_map[0]);
}

function nop() {
  return /* () */0;
}

function project_from_summary(param, tag) {
  var id = unmangle(Curry._1(Dyn[/* repr */2], tag));
  var state = Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* find */21], id, param[/* summaries */0]);
  return Option$ReactTemplate.get(Curry._2(Dyn[/* Easy */6][/* prj */3], state, tag));
}

function modify_summary(st, tag, v) {
  var id = unmangle(Curry._1(Dyn[/* repr */2], tag));
  var summaries = Curry._3(Util$ReactTemplate.$$String[/* Map */39][/* set */25], id, Curry._2(Dyn[/* Easy */6][/* inj */2], v, tag), st[/* summaries */0]);
  return /* record */[
          /* summaries */summaries,
          /* ml_module */st[/* ml_module */1]
        ];
}

function remove_from_summary(st, tag) {
  var id = unmangle(Curry._1(Dyn[/* repr */2], tag));
  var summaries = Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* remove */5], id, st[/* summaries */0]);
  return /* record */[
          /* summaries */summaries,
          /* ml_module */st[/* ml_module */1]
        ];
}

function freeze_summary(marshallable, $staropt$star, ids) {
  var complement = $staropt$star ? $staropt$star[0] : /* false */0;
  var sub_map = Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* filter */13], (function (id, _) {
          return +(complement !== Curry._2(Util$ReactTemplate.List[/* mem */24], id, ids));
        }), sum_map[0]);
  return Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* map */22], (function (decl) {
                return Curry._1(decl[/* freeze_function */0], marshallable);
              }), sub_map);
}

var unfreeze_summary = Curry._1(Util$ReactTemplate.$$String[/* Map */39][/* iter */9], unfreeze_single);

function surgery_summary(param, bits) {
  var summaries = Curry._3(Util$ReactTemplate.$$String[/* Map */39][/* fold */10], (function (hash, state, sum) {
          return Curry._3(Util$ReactTemplate.$$String[/* Map */39][/* set */25], hash, state, sum);
        }), param[/* summaries */0], bits);
  return /* record */[
          /* summaries */summaries,
          /* ml_module */param[/* ml_module */1]
        ];
}

function project_summary(param, $staropt$star, ids) {
  var complement = $staropt$star ? $staropt$star[0] : /* false */0;
  return Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* filter */13], (function (name, _) {
                return +(complement !== Curry._2(Util$ReactTemplate.List[/* mem */24], name, ids));
              }), param[/* summaries */0]);
}

function pointer_equal(l1, l2) {
  var l1$1 = Curry._1(Util$ReactTemplate.$$String[/* Map */39][/* bindings */16], l1);
  var l2$1 = Curry._1(Util$ReactTemplate.$$String[/* Map */39][/* bindings */16], l2);
  return CList$ReactTemplate.for_all2eq((function (param, param$1) {
                if (param[0] === param$1[0]) {
                  var d1 = param[1];
                  var d2 = param$1[1];
                  var match = Curry._2(Dyn[/* eq */1], d1[0], d2[0]);
                  if (match) {
                    return +(d1[1] === d2[1]);
                  } else {
                    return /* false */0;
                  }
                } else {
                  return /* false */0;
                }
              }), l1$1, l2$1);
}

function ref_tag($staropt$star, name, x) {
  var freeze = $staropt$star ? $staropt$star[0] : (function (_, r) {
        return r;
      });
  var r = [x];
  var tag = declare_summary_tag(name, /* record */[
        /* freeze_function */(function (b) {
            return Curry._2(freeze, b, r[0]);
          }),
        /* unfreeze_function */(function (param) {
            r[0] = param;
            return /* () */0;
          }),
        /* init_function */(function () {
            r[0] = x;
            return /* () */0;
          })
      ]);
  return /* tuple */[
          r,
          tag
        ];
}

function ref(freeze, name, x) {
  return ref_tag(freeze, name, x)[0];
}

function $colon$eq(r, v) {
  r[0] = /* tuple */[
    CEphemeron$ReactTemplate.create(v),
    r[0][1]
  ];
  return /* () */0;
}

function $bang(r) {
  var match = r[0];
  try {
    return CEphemeron$ReactTemplate.get(match[0]);
  }
  catch (exn){
    if (exn === CEphemeron$ReactTemplate.InvalidKey) {
      var match$1 = Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* find */21], match[1], sum_map[0]);
      Curry._1(match$1[/* init_function */2], /* () */0);
      return CEphemeron$ReactTemplate.get(r[0][0]);
    } else {
      throw exn;
    }
  }
}

function ref$1($staropt$star, name, init) {
  var freeze = $staropt$star ? $staropt$star[0] : (function (x) {
        return x;
      });
  var r = [/* tuple */[
      CEphemeron$ReactTemplate.create(init),
      name
    ]];
  var decl_000 = function () {
    return Curry._1(freeze, $bang(r));
  };
  var decl_001 = function (param) {
    return $colon$eq(r, param);
  };
  var decl_002 = function () {
    return $colon$eq(r, init);
  };
  var decl = /* record */[
    decl_000,
    decl_001,
    decl_002
  ];
  declare_summary_tag(name, decl);
  return r;
}

var dump = Dyn[/* dump */5];

var Local = [
  ref$1,
  $colon$eq,
  $bang
];

exports.declare_summary = declare_summary;
exports.Dyn = Dyn;
exports.declare_summary_tag = declare_summary_tag;
exports.ref = ref;
exports.ref_tag = ref_tag;
exports.Local = Local;
exports.declare_ml_modules_summary = declare_ml_modules_summary$1;
exports.nop = nop;
exports.empty_frozen = empty_frozen;
exports.freeze_summaries = freeze_summaries;
exports.unfreeze_summaries = unfreeze_summaries;
exports.init_summaries = init_summaries;
exports.modify_summary = modify_summary;
exports.project_from_summary = project_from_summary;
exports.remove_from_summary = remove_from_summary;
exports.freeze_summary = freeze_summary;
exports.unfreeze_summary = unfreeze_summary;
exports.surgery_summary = surgery_summary;
exports.project_summary = project_summary;
exports.pointer_equal = pointer_equal;
exports.dump = dump;
/* Dyn Not a pure module */
