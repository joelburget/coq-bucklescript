// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Queue = require("bs-platform/lib/js/queue.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Evd$ReactTemplate = require("./evd.bs.js");
var Int$ReactTemplate = require("./int.bs.js");
var Loc$ReactTemplate = require("./loc.bs.js");
var Evar$ReactTemplate = require("./evar.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Global$ReactTemplate = require("./global.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var EConstr$ReactTemplate = require("./eConstr.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Namegen$ReactTemplate = require("./namegen.bs.js");
var Pre_env$ReactTemplate = require("./pre_env.bs.js");
var Summary$ReactTemplate = require("./summary.bs.js");
var Termops$ReactTemplate = require("./termops.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Universes$ReactTemplate = require("./universes.bs.js");

function safe_evar_value(sigma, ev) {
  try {
    return /* Some */[Evd$ReactTemplate.existential_value(sigma, ev)];
  }
  catch (exn){
    if (exn === Evd$ReactTemplate.NotInstantiatedEvar) {
      return /* None */0;
    } else if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function evd_comb0(f, evdref) {
  var match = Curry._1(f, evdref[0]);
  evdref[0] = match[0];
  return match[1];
}

function evd_comb1(f, evdref, x) {
  var match = Curry._2(f, evdref[0], x);
  evdref[0] = match[0];
  return match[1];
}

function evd_comb2(f, evdref, x, y) {
  var match = Curry._3(f, evdref[0], x, y);
  evdref[0] = match[0];
  return match[1];
}

function e_new_global(evdref, x) {
  var partial_arg = Global$ReactTemplate.env(/* () */0);
  return EConstr$ReactTemplate.of_constr(evd_comb1((function (param, param$1) {
                    return Evd$ReactTemplate.fresh_global(/* None */0, /* None */0, /* None */0, partial_arg, param, param$1);
                  }), evdref, x));
}

function new_global(evd, x) {
  var match = Evd$ReactTemplate.fresh_global(/* None */0, /* None */0, /* None */0, Global$ReactTemplate.env(/* () */0), evd, x);
  return /* tuple */[
          match[0],
          EConstr$ReactTemplate.of_constr(match[1])
        ];
}

var Uninstantiated_evar = Caml_exceptions.create("Evarutil-ReactTemplate.Uninstantiated_evar");

function flush_and_check_evars(sigma, _c) {
  while(true) {
    var c = _c;
    var match = Constr$ReactTemplate.kind(c);
    if (match.tag === 3) {
      var ev = match[0];
      var match$1 = Evd$ReactTemplate.existential_opt_value(sigma, ev);
      if (match$1) {
        _c = match$1[0];
        continue ;
        
      } else {
        throw [
              Uninstantiated_evar,
              ev[0]
            ];
      }
    } else {
      return Constr$ReactTemplate.map((function (param) {
                    return flush_and_check_evars(sigma, param);
                  }), c);
    }
  };
}

function flush_and_check_evars$1(sigma, c) {
  return flush_and_check_evars(sigma, EConstr$ReactTemplate.Unsafe[/* to_constr */0](c));
}

function nf_evar(sigma, c) {
  return EConstr$ReactTemplate.of_constr(EConstr$ReactTemplate.to_constr(sigma, c));
}

function j_nf_evar(sigma, j) {
  return /* record */[
          /* uj_val */EConstr$ReactTemplate.of_constr(EConstr$ReactTemplate.to_constr(sigma, j[/* uj_val */0])),
          /* uj_type */EConstr$ReactTemplate.of_constr(EConstr$ReactTemplate.to_constr(sigma, j[/* uj_type */1]))
        ];
}

function jl_nf_evar(sigma, jl) {
  return Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                return j_nf_evar(sigma, param);
              }), jl);
}

function jv_nf_evar(sigma) {
  var partial_arg = Util$ReactTemplate.$$Array[/* map */12];
  return (function (param) {
      return partial_arg((function (param) {
                    return j_nf_evar(sigma, param);
                  }), param);
    });
}

function tj_nf_evar(sigma, param) {
  return /* record */[
          /* utj_val */EConstr$ReactTemplate.of_constr(EConstr$ReactTemplate.to_constr(sigma, param[/* utj_val */0])),
          /* utj_type */param[/* utj_type */1]
        ];
}

function nf_evars_universes(evm) {
  return Universes$ReactTemplate.nf_evars_and_universes_opt_subst((function (param) {
                return safe_evar_value(evm, param);
              }), Evd$ReactTemplate.universe_subst(evm));
}

function nf_evars_and_universes(evm) {
  var evm$1 = Evd$ReactTemplate.minimize_universes(evm);
  return /* tuple */[
          evm$1,
          nf_evars_universes(evm$1)
        ];
}

function e_nf_evars_and_universes(evdref) {
  evdref[0] = Evd$ReactTemplate.minimize_universes(evdref[0]);
  return /* tuple */[
          nf_evars_universes(evdref[0]),
          Evd$ReactTemplate.universe_subst(evdref[0])
        ];
}

function nf_evar_map_universes(evm) {
  var evm$1 = Evd$ReactTemplate.minimize_universes(evm);
  var subst = Evd$ReactTemplate.universe_subst(evm$1);
  if (Curry._1(Univ$ReactTemplate.LMap[/* is_empty */1], subst)) {
    return /* tuple */[
            evm$1,
            (function (param) {
                return EConstr$ReactTemplate.to_constr(evm$1, EConstr$ReactTemplate.of_constr(param));
              })
          ];
  } else {
    var f = nf_evars_universes(evm$1);
    return /* tuple */[
            Evd$ReactTemplate.raw_map((function () {
                    return (function (param) {
                        return Evd$ReactTemplate.map_evar_info(f, param);
                      });
                  }), evm$1),
            f
          ];
  }
}

function nf_named_context_evar(sigma, ctx) {
  return Curry._1(Context$ReactTemplate.Named[/* map */6]((function (param) {
                    return EConstr$ReactTemplate.to_constr(sigma, EConstr$ReactTemplate.of_constr(param));
                  })), ctx);
}

function nf_rel_context_evar(sigma, ctx) {
  return Curry._1(Context$ReactTemplate.Rel[/* map */7]((function (param) {
                    return EConstr$ReactTemplate.of_constr(EConstr$ReactTemplate.to_constr(sigma, param));
                  })), ctx);
}

function nf_env_evar(sigma, env) {
  var nc$prime = nf_named_context_evar(sigma, Environ$ReactTemplate.named_context(env));
  var rel$prime = nf_rel_context_evar(sigma, EConstr$ReactTemplate.rel_context(env));
  return EConstr$ReactTemplate.push_rel_context(rel$prime, Environ$ReactTemplate.reset_with_named_context(Environ$ReactTemplate.val_of_named_context(nc$prime), env));
}

function nf_evar_info(evc, info) {
  return Evd$ReactTemplate.map_evar_info((function (param) {
                return EConstr$ReactTemplate.to_constr(evc, EConstr$ReactTemplate.of_constr(param));
              }), info);
}

function nf_evar_map(evm) {
  return Evd$ReactTemplate.raw_map((function (_, evi) {
                return nf_evar_info(evm, evi);
              }), evm);
}

function nf_evar_map_undefined(evm) {
  return Evd$ReactTemplate.raw_map_undefined((function (_, evi) {
                return nf_evar_info(evm, evi);
              }), evm);
}

function has_undefined_evars(evd, t) {
  var has_ev = function (t) {
    var match = EConstr$ReactTemplate.kind(evd, t);
    if (match.tag === 3) {
      throw Evd$ReactTemplate.NotInstantiatedEvar;
    } else {
      return EConstr$ReactTemplate.iter(evd, has_ev, t);
    }
  };
  try {
    has_ev(t);
    return /* false */0;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* true */1;
    } else if (exn === Evd$ReactTemplate.NotInstantiatedEvar) {
      return /* true */1;
    } else {
      throw exn;
    }
  }
}

function is_ground_term(evd, t) {
  return 1 - has_undefined_evars(evd, t);
}

function is_ground_env(evd, env) {
  var is_ground_rel_decl = function (param) {
    if (param.tag) {
      var t = EConstr$ReactTemplate.of_constr(param[1]);
      return 1 - has_undefined_evars(evd, t);
    } else {
      return /* true */1;
    }
  };
  var is_ground_named_decl = function (param) {
    if (param.tag) {
      var t = EConstr$ReactTemplate.of_constr(param[1]);
      return 1 - has_undefined_evars(evd, t);
    } else {
      return /* true */1;
    }
  };
  if (Curry._2(Util$ReactTemplate.List[/* for_all */20], is_ground_rel_decl, Environ$ReactTemplate.rel_context(env))) {
    return Curry._2(Util$ReactTemplate.List[/* for_all */20], is_ground_named_decl, Environ$ReactTemplate.named_context(env));
  } else {
    return /* false */0;
  }
}

function memo(f) {
  var m = [/* None */0];
  return (function (x, y) {
      var match = m[0];
      var exit = 0;
      if (match) {
        var match$1 = match[0];
        if (x === match$1[0] && y === match$1[1]) {
          return match$1[2];
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
      if (exit === 1) {
        var r = Curry._2(f, x, y);
        m[0] = /* Some */[/* tuple */[
            x,
            y,
            r
          ]];
        return r;
      }
      
    });
}

var is_ground_env$1 = memo(is_ground_env);

var NoHeadEvar = Caml_exceptions.create("Evarutil-ReactTemplate.NoHeadEvar");

function head_evar(_, c) {
  var c$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](c);
  var _c = c$1;
  while(true) {
    var c$2 = _c;
    var match = Constr$ReactTemplate.kind(c$2);
    switch (match.tag | 0) {
      case 3 : 
          return match[0][0];
      case 5 : 
      case 9 : 
          _c = match[0];
          continue ;
          case 13 : 
          _c = match[2];
          continue ;
          case 16 : 
          _c = match[1];
          continue ;
          default:
        throw NoHeadEvar;
    }
  };
}

function whd_head_evar_stack(sigma, c) {
  var _param = /* tuple */[
    c,
    /* [] */0
  ];
  while(true) {
    var param = _param;
    var l = param[1];
    var c$1 = EConstr$ReactTemplate.kind(sigma, param[0]);
    switch (c$1.tag | 0) {
      case 5 : 
          _param = /* tuple */[
            c$1[0],
            l
          ];
          continue ;
          case 9 : 
          _param = /* tuple */[
            c$1[0],
            /* :: */[
              c$1[1],
              l
            ]
          ];
          continue ;
          default:
        return /* tuple */[
                EConstr$ReactTemplate.of_kind(c$1),
                l
              ];
    }
  };
}

function whd_head_evar(sigma, c) {
  var match = whd_head_evar_stack(sigma, c);
  var args = match[1];
  var f = match[0];
  if (args) {
    if (args[1]) {
      return EConstr$ReactTemplate.mkApp(/* tuple */[
                  f,
                  Util$ReactTemplate.$$Array[/* concat */4](args)
                ]);
    } else {
      return EConstr$ReactTemplate.mkApp(/* tuple */[
                  f,
                  args[0]
                ]);
    }
  } else {
    return EConstr$ReactTemplate.mkApp(/* tuple */[
                f,
                Util$ReactTemplate.$$Array[/* concat */4](args)
              ]);
  }
}

var match = Summary$ReactTemplate.ref_tag(/* None */0, "meta counter", 0);

var meta_ctr = match[0];

function new_meta() {
  meta_ctr[0] = meta_ctr[0] + 1 | 0;
  return meta_ctr[0];
}

function mk_new_meta() {
  return EConstr$ReactTemplate.mkMeta(new_meta(/* () */0));
}

function non_instantiated(sigma) {
  var listev = Evd$ReactTemplate.undefined_map(sigma);
  return Curry._2(Evar$ReactTemplate.$$Map[/* smartmap */31], (function (evi) {
                return nf_evar_info(sigma, evi);
              }), listev);
}

function make_pure_subst(evi, args) {
  return Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (decl, param) {
                  var args = param[0];
                  if (args) {
                    return /* tuple */[
                            args[1],
                            /* :: */[
                              /* tuple */[
                                Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl),
                                args[0]
                              ],
                              param[1]
                            ]
                          ];
                  } else {
                    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Instance does not match its signature."));
                  }
                }), Evd$ReactTemplate.evar_filtered_context(evi), /* tuple */[
                Util$ReactTemplate.$$Array[/* rev_to_list */63](args),
                /* [] */0
              ])[1];
}

function next_ident_away(id, avoid) {
  var avoid$1 = function (id) {
    return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], id, avoid);
  };
  return Namegen$ReactTemplate.next_ident_away_from(id, avoid$1);
}

function next_name_away(na, avoid) {
  var avoid$1 = function (id) {
    return Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], id, avoid);
  };
  var id = na ? na[0] : Namegen$ReactTemplate.default_non_dependent_ident;
  return Namegen$ReactTemplate.next_ident_away_from(id, avoid$1);
}

var empty_csubst_001 = /* csubst_var */Names$ReactTemplate.Id[/* Map */10][/* empty */0];

var empty_csubst_002 = /* csubst_rel */Int$ReactTemplate.$$Map[/* empty */0];

var empty_csubst_003 = /* csubst_rev */Names$ReactTemplate.Id[/* Map */10][/* empty */0];

var empty_csubst = /* record */[
  /* csubst_len */0,
  empty_csubst_001,
  empty_csubst_002,
  empty_csubst_003
];

function csubst_subst(param, c) {
  var s = param[/* csubst_rel */2];
  var v = param[/* csubst_var */1];
  var k = param[/* csubst_len */0];
  var c$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](c);
  var subst = function (n, c) {
    var match = Constr$ReactTemplate.kind(c);
    switch (match.tag | 0) {
      case 0 : 
          var m = match[0];
          if (m <= n) {
            return c;
          } else if ((m - n | 0) <= k) {
            return Int$ReactTemplate.$$Map[/* find */21]((k - m | 0) + n | 0, s);
          } else {
            return Constr$ReactTemplate.mkRel(m - k | 0);
          }
      case 1 : 
          try {
            return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], match[0], v);
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return c;
            } else {
              throw exn;
            }
          }
          break;
      default:
        return Constr$ReactTemplate.map_with_binders((function (prim) {
                      return prim + 1 | 0;
                    }), subst, n, c);
    }
  };
  return EConstr$ReactTemplate.of_constr(k === 0 && Curry._1(Names$ReactTemplate.Id[/* Map */10][/* is_empty */1], v) ? c$1 : subst(0, c$1));
}

function push_var(id, param) {
  var n = param[/* csubst_len */0];
  var s = Curry._3(Int$ReactTemplate.$$Map[/* add */3], n, Constr$ReactTemplate.mkVar(id), param[/* csubst_rel */2]);
  var r = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], id, /* SRel */Block.__(0, [n]), param[/* csubst_rev */3]);
  return /* record */[
          /* csubst_len */n + 1 | 0,
          /* csubst_var */param[/* csubst_var */1],
          /* csubst_rel */s,
          /* csubst_rev */r
        ];
}

function update_var(src, tgt, subst) {
  var cur;
  try {
    cur = /* Some */[Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], src, subst[/* csubst_rev */3])];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      cur = /* None */0;
    } else {
      throw exn;
    }
  }
  if (cur) {
    var bnd = cur[0];
    var csubst_rev = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], tgt, bnd, Curry._2(Names$ReactTemplate.Id[/* Map */10][/* remove */5], src, subst[/* csubst_rev */3]));
    if (bnd.tag) {
      var csubst_var = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], bnd[0], Constr$ReactTemplate.mkVar(tgt), subst[/* csubst_var */1]);
      return /* record */[
              /* csubst_len */subst[/* csubst_len */0],
              /* csubst_var */csubst_var,
              /* csubst_rel */subst[/* csubst_rel */2],
              /* csubst_rev */csubst_rev
            ];
    } else {
      var csubst_rel = Curry._3(Int$ReactTemplate.$$Map[/* add */3], bnd[0], Constr$ReactTemplate.mkVar(tgt), subst[/* csubst_rel */2]);
      return /* record */[
              /* csubst_len */subst[/* csubst_len */0],
              /* csubst_var */subst[/* csubst_var */1],
              /* csubst_rel */csubst_rel,
              /* csubst_rev */csubst_rev
            ];
    }
  } else {
    var csubst_var$1 = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], src, Constr$ReactTemplate.mkVar(tgt), subst[/* csubst_var */1]);
    var csubst_rev$1 = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], tgt, /* SVar */Block.__(1, [src]), subst[/* csubst_rev */3]);
    return /* record */[
            /* csubst_len */subst[/* csubst_len */0],
            /* csubst_var */csubst_var$1,
            /* csubst_rel */subst[/* csubst_rel */2],
            /* csubst_rev */csubst_rev$1
          ];
  }
}

function push_rel_decl_to_named_context(sigma, decl, param) {
  var nc = param[2];
  var avoid = param[1];
  var subst = param[0];
  var map_decl = function (f, d) {
    return Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* map_constr */13], f, d);
  };
  var extract_if_neq = function (id, param) {
    if (param) {
      var id$prime = param[0];
      if (Curry._2(Names$ReactTemplate.Id[/* compare */1], id, id$prime)) {
        return /* Some */[id$prime];
      } else {
        return /* None */0;
      }
    } else {
      return /* None */0;
    }
  };
  var na = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_name */0], decl);
  var id = Flags$ReactTemplate.is_program_mode(/* () */0) ? next_name_away(na, avoid) : next_ident_away(Namegen$ReactTemplate.id_of_name_using_hdchar(Environ$ReactTemplate.empty_env, sigma, Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl), na), avoid);
  var match = extract_if_neq(id, na);
  var exit = 0;
  if (match) {
    var id0 = match[0];
    if (Termops$ReactTemplate.is_section_variable(id0)) {
      exit = 1;
    } else {
      var subst$1 = update_var(id0, id, subst);
      var d = map_decl((function (param) {
              return csubst_subst(subst$1, param);
            }), Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* of_rel_decl */18], (function () {
                  return id0;
                }), decl));
      var nc$1 = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
              var id0$1 = id0;
              var id$1 = id;
              var decl = param;
              var id$prime = Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl);
              var id$prime$1 = Names$ReactTemplate.Id[/* equal */0](id0$1, id$prime) ? id$1 : id$prime;
              var vsubst_000 = /* tuple */[
                id0$1,
                EConstr$ReactTemplate.mkVar(id$1)
              ];
              var vsubst = /* :: */[
                vsubst_000,
                /* [] */0
              ];
              var partial_arg = EConstr$ReactTemplate.Vars[/* replace_vars */8];
              return map_decl((function (param) {
                            return partial_arg(vsubst, param);
                          }), Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* set_id */3], id$prime$1, decl));
            }), nc);
      return /* tuple */[
              push_var(id0, subst$1),
              Curry._2(Names$ReactTemplate.Id[/* Set */9][/* add */3], id, avoid),
              /* :: */[
                d,
                nc$1
              ]
            ];
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var d$1 = map_decl((function (param) {
            return csubst_subst(subst, param);
          }), Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* of_rel_decl */18], (function () {
                return id;
              }), decl));
    return /* tuple */[
            push_var(id, subst),
            Curry._2(Names$ReactTemplate.Id[/* Set */9][/* add */3], id, avoid),
            /* :: */[
              d$1,
              nc
            ]
          ];
  }
  
}

function push_rel_context_to_named_context(env, sigma, typ) {
  var ids = Curry._2(Util$ReactTemplate.List[/* map */10], Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], EConstr$ReactTemplate.named_context(env));
  var inst_vars = Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.mkVar, ids);
  if (Curry._1(Util$ReactTemplate.List[/* is_empty */45], Environ$ReactTemplate.rel_context(env))) {
    return /* tuple */[
            Environ$ReactTemplate.named_context_val(env),
            typ,
            inst_vars,
            empty_csubst
          ];
  } else {
    var avoid = Curry._3(Util$ReactTemplate.List[/* fold_right */14], Names$ReactTemplate.Id[/* Set */9][/* add */3], ids, Names$ReactTemplate.Id[/* Set */9][/* empty */0]);
    var inst_rels = Curry._1(Util$ReactTemplate.List[/* rev */4], Termops$ReactTemplate.rel_list(0, Environ$ReactTemplate.nb_rel(env)));
    var match = Context$ReactTemplate.Rel[/* fold_outside */10]((function (d, acc) {
            return push_rel_decl_to_named_context(sigma, d, acc);
          }), EConstr$ReactTemplate.rel_context(env), /* tuple */[
          empty_csubst,
          avoid,
          EConstr$ReactTemplate.named_context(env)
        ]);
    var subst = match[0];
    return /* tuple */[
            EConstr$ReactTemplate.val_of_named_context(match[2]),
            csubst_subst(subst, typ),
            Util$ReactTemplate.$at(inst_rels, inst_vars),
            subst
          ];
  }
}

var default_source = Loc$ReactTemplate.tag(/* None */0, /* InternalHole */0);

function restrict_evar(evd, evk, filter, src, candidates) {
  var candidates$1 = Option$ReactTemplate.map((function (l) {
          return Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.Unsafe[/* to_constr */0], l);
        }), candidates);
  var match = Evd$ReactTemplate.restrict(evk, filter, candidates$1, src, evd);
  var evk$prime = match[1];
  return /* tuple */[
          Evd$ReactTemplate.declare_future_goal(/* None */0, evk$prime, match[0]),
          evk$prime
        ];
}

function new_pure_evar_full(evd, evi) {
  var match = Evd$ReactTemplate.new_evar(evd, /* None */0, evi);
  var evk = match[1];
  var evd$1 = Evd$ReactTemplate.declare_future_goal(/* None */0, evk, match[0]);
  return /* tuple */[
          evd$1,
          evk
        ];
}

function new_pure_evar(sign, evd, $staropt$star, $staropt$star$1, candidates, $staropt$star$2, naming, $staropt$star$3, typ) {
  var src = $staropt$star ? $staropt$star[0] : default_source;
  var filter = $staropt$star$1 ? $staropt$star$1[0] : Evd$ReactTemplate.Filter[/* identity */1];
  var store = $staropt$star$2 ? $staropt$star$2[0] : Evd$ReactTemplate.Store[/* empty */0];
  var principal = $staropt$star$3 ? $staropt$star$3[0] : /* false */0;
  var typ$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](typ);
  var candidates$1 = Option$ReactTemplate.map((function (l) {
          return Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.Unsafe[/* to_constr */0], l);
        }), candidates);
  var naming$1 = Option$ReactTemplate.$$default(/* IntroAnonymous */0, naming);
  var name;
  if (typeof naming$1 === "number") {
    name = /* None */0;
  } else if (naming$1.tag) {
    var has_name = function (id) {
      try {
        Evd$ReactTemplate.evar_key(id, evd);
        return /* true */1;
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return /* false */0;
        } else {
          throw exn;
        }
      }
    };
    var id = Namegen$ReactTemplate.next_ident_away_from(naming$1[0], has_name);
    name = /* Some */[id];
  } else {
    name = /* Some */[naming$1[0]];
  }
  var evi = /* record */[
    /* evar_concl */typ$1,
    /* evar_hyps */sign,
    /* evar_body : Evar_empty */0,
    /* evar_filter */filter,
    /* evar_source */src,
    /* evar_candidates */candidates$1,
    /* evar_extra */store
  ];
  var match = Evd$ReactTemplate.new_evar(evd, name, evi);
  var newevk = match[1];
  var evd$1 = match[0];
  var evd$2 = principal ? Evd$ReactTemplate.declare_principal_goal(/* None */0, newevk, evd$1) : Evd$ReactTemplate.declare_future_goal(/* None */0, newevk, evd$1);
  return /* tuple */[
          evd$2,
          newevk
        ];
}

function new_evar_instance(sign, evd, typ, src, filter, candidates, store, naming, principal, instance) {
  if (!(!Flags$ReactTemplate.debug[0] || Curry._1(Util$ReactTemplate.List[/* distinct */58], Termops$ReactTemplate.ids_of_named_context(EConstr$ReactTemplate.named_context_of_val(sign))))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "evarutil.ml",
            457,
            2
          ]
        ];
  }
  var match = new_pure_evar(sign, evd, src, filter, candidates, store, naming, principal, typ);
  return /* tuple */[
          match[0],
          EConstr$ReactTemplate.mkEvar(/* tuple */[
                match[1],
                Util$ReactTemplate.$$Array[/* of_list */10](instance)
              ])
        ];
}

function new_evar_from_context(sign, evd, src, filter, candidates, store, naming, principal, typ) {
  var partial_arg = Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0];
  var instance = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          return Util$ReactTemplate.$percent$great(partial_arg, EConstr$ReactTemplate.mkVar, param);
        }), Environ$ReactTemplate.named_context_of_val(sign));
  var instance$1 = filter ? Evd$ReactTemplate.Filter[/* filter_list */2](filter[0], instance) : instance;
  return new_evar_instance(sign, evd, typ, src, filter, candidates, store, naming, principal, instance$1);
}

function new_evar(env, evd, src, filter, candidates, store, naming, principal, typ) {
  var match = push_rel_context_to_named_context(env, evd, typ);
  var subst = match[3];
  var instance = match[2];
  var map = function (c) {
    return csubst_subst(subst, c);
  };
  var candidates$1 = Option$ReactTemplate.map((function (l) {
          return Curry._2(Util$ReactTemplate.List[/* map */10], map, l);
        }), candidates);
  var instance$1 = filter ? Evd$ReactTemplate.Filter[/* filter_list */2](filter[0], instance) : instance;
  return new_evar_instance(match[0], evd, match[1], src, filter, candidates$1, store, naming, principal, instance$1);
}

function new_type_evar(env, evd, src, filter, naming, principal, rigid) {
  var match = Evd$ReactTemplate.new_sort_variable(/* None */0, /* None */0, rigid, evd);
  var s = match[1];
  var match$1 = new_evar(env, match[0], src, filter, /* None */0, /* None */0, naming, principal, EConstr$ReactTemplate.mkSort(s));
  return /* tuple */[
          match$1[0],
          /* tuple */[
            match$1[1],
            s
          ]
        ];
}

function e_new_type_evar(env, evdref, src, filter, naming, principal, rigid) {
  var match = new_type_evar(env, evdref[0], src, filter, naming, principal, rigid);
  evdref[0] = match[0];
  return match[1];
}

function new_Type($staropt$star, _, evd) {
  var rigid = $staropt$star ? $staropt$star[0] : Evd$ReactTemplate.univ_flexible;
  var match = Evd$ReactTemplate.new_sort_variable(/* None */0, /* None */0, rigid, evd);
  return /* tuple */[
          match[0],
          EConstr$ReactTemplate.mkSort(match[1])
        ];
}

function e_new_Type($staropt$star, _, evdref) {
  var rigid = $staropt$star ? $staropt$star[0] : Evd$ReactTemplate.univ_flexible;
  var match = Evd$ReactTemplate.new_sort_variable(/* None */0, /* None */0, rigid, evdref[0]);
  evdref[0] = match[0];
  return EConstr$ReactTemplate.mkSort(match[1]);
}

function e_new_evar(env, evdref, $staropt$star, filter, candidates, store, naming, principal, ty) {
  var src = $staropt$star ? $staropt$star[0] : default_source;
  var match = new_evar(env, evdref[0], /* Some */[src], filter, candidates, store, naming, principal, ty);
  evdref[0] = match[0];
  return match[1];
}

function generalize_evar_over_rels(sigma, param) {
  var evi = Evd$ReactTemplate.find(sigma, param[0]);
  var sign = EConstr$ReactTemplate.named_context_of_val(evi[/* evar_hyps */1]);
  return Curry._4(Util$ReactTemplate.List[/* fold_left2 */18], (function (x, a, d) {
                if (EConstr$ReactTemplate.isRel(sigma, a)) {
                  return /* tuple */[
                          EConstr$ReactTemplate.mkNamedProd_or_LetIn(d, x[0]),
                          /* :: */[
                            a,
                            x[1]
                          ]
                        ];
                } else {
                  return x;
                }
              }), /* tuple */[
              EConstr$ReactTemplate.of_constr(evi[/* evar_concl */0]),
              /* [] */0
            ], Util$ReactTemplate.$$Array[/* to_list */9](param[1]), sign);
}

var ClearDependencyError = Caml_exceptions.create("Evarutil-ReactTemplate.ClearDependencyError");

var Depends = Caml_exceptions.create("Evarutil-ReactTemplate.Depends");

function check_and_clear_in_constr(env, evdref, err, ids, $$global, _c) {
  while(true) {
    var c = _c;
    var match = Constr$ReactTemplate.kind(c);
    var exit = 0;
    switch (match.tag | 0) {
      case 1 : 
          var id$prime = match[0];
          if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], id$prime, ids)) {
            throw [
                  ClearDependencyError,
                  id$prime,
                  err
                ];
          } else {
            return c;
          }
          break;
      case 3 : 
          var ev = match[0];
          var evk = ev[0];
          if (Evd$ReactTemplate.is_defined(evdref[0], evk)) {
            var nc = Evd$ReactTemplate.existential_value(evdref[0], ev);
            _c = nc;
            continue ;
            
          } else {
            var evi = Evd$ReactTemplate.find_undefined(evdref[0], evk);
            var ctxt = Evd$ReactTemplate.evar_filtered_context(evi);
            var ctxt$1 = Curry._2(Util$ReactTemplate.List[/* map */10], (function (d) {
                    return Termops$ReactTemplate.map_named_decl(EConstr$ReactTemplate.of_constr, d);
                  }), ctxt);
            var match$1 = Curry._4(Util$ReactTemplate.List[/* fold_right2 */19], (function (h, a, param) {
                    var filter = param[1];
                    var ri = param[0];
                    try {
                      var check = function (id) {
                        if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], id, ids)) {
                          throw [
                                Depends,
                                id
                              ];
                        } else {
                          return 0;
                        }
                      };
                      Curry._2(Names$ReactTemplate.Id[/* Set */9][/* iter */12], check, Termops$ReactTemplate.collect_vars(evdref[0], EConstr$ReactTemplate.of_constr(a)));
                      var check$1 = function (id, _) {
                        if (Termops$ReactTemplate.occur_var_in_decl(Global$ReactTemplate.env(/* () */0), evdref[0], id, h)) {
                          throw [
                                Depends,
                                id
                              ];
                        } else {
                          return 0;
                        }
                      };
                      Curry._2(Names$ReactTemplate.Id[/* Map */10][/* iter */9], check$1, ri);
                      return /* tuple */[
                              ri,
                              /* :: */[
                                /* true */1,
                                filter
                              ]
                            ];
                    }
                    catch (raw_exn){
                      var exn = Js_exn.internalToOCamlException(raw_exn);
                      if (exn[0] === Depends) {
                        return /* tuple */[
                                Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], h), exn[1], ri),
                                /* :: */[
                                  /* false */0,
                                  filter
                                ]
                              ];
                      } else {
                        throw exn;
                      }
                    }
                  }), ctxt$1, Util$ReactTemplate.$$Array[/* to_list */9](ev[1]), /* tuple */[
                  Names$ReactTemplate.Id[/* Map */10][/* empty */0],
                  /* [] */0
                ]);
            var rids = match$1[0];
            try {
              var nids = Curry._1(Names$ReactTemplate.Id[/* Map */10][/* domain */27], rids);
              var $$global$1 = Curry._2(Names$ReactTemplate.Id[/* Set */9][/* exists */15], Termops$ReactTemplate.is_section_variable, nids);
              check_and_clear_in_constr(env, evdref, /* EvarTypingBreak */Block.__(1, [ev]), nids, $$global$1, Evd$ReactTemplate.evar_concl(evi));
            }
            catch (raw_exn){
              var exn = Js_exn.internalToOCamlException(raw_exn);
              if (exn[0] === ClearDependencyError) {
                throw [
                      ClearDependencyError,
                      Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], exn[1], rids),
                      exn[2]
                    ];
              } else {
                throw exn;
              }
            }
            if (Curry._1(Names$ReactTemplate.Id[/* Map */10][/* is_empty */1], rids)) {
              return c;
            } else {
              var origfilter = Evd$ReactTemplate.evar_filter(evi);
              var filter = Evd$ReactTemplate.Filter[/* apply_subfilter */6](origfilter, match$1[1]);
              var evd = evdref[0];
              var match$2 = restrict_evar(evd, evk, filter, /* None */0, /* None */0);
              evdref[0] = match$2[0];
              return Evd$ReactTemplate.existential_value(evdref[0], ev);
            }
          }
          break;
      case 10 : 
      case 11 : 
      case 12 : 
          exit = 1;
          break;
      default:
        return Constr$ReactTemplate.map((function (param) {
                      return check_and_clear_in_constr(env, evdref, err, ids, $$global, param);
                    }), c);
    }
    if (exit === 1) {
      if ($$global) {
        var check = function (id$prime) {
          if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], id$prime, ids)) {
            throw [
                  ClearDependencyError,
                  id$prime,
                  err
                ];
          } else {
            return 0;
          }
        };
        Curry._2(Names$ReactTemplate.Id[/* Set */9][/* iter */12], check, Environ$ReactTemplate.vars_of_global(env, c));
      }
      return c;
    }
    
  };
}

function clear_hyps_in_evi_main(env, evdref, hyps, terms, ids) {
  var terms$1 = Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.Unsafe[/* to_constr */0], terms);
  var $$global = Curry._2(Names$ReactTemplate.Id[/* Set */9][/* exists */15], Termops$ReactTemplate.is_section_variable, ids);
  var partial_arg = /* OccurHypInSimpleClause */Block.__(0, [/* None */0]);
  var terms$2 = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
          return check_and_clear_in_constr(env, evdref, partial_arg, ids, $$global, param);
        }), terms$1);
  var check_context = function (decl) {
    var err = /* OccurHypInSimpleClause */Block.__(0, [/* Some */[Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl)]]);
    return Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* map_constr */13], (function (param) {
                  return check_and_clear_in_constr(env, evdref, err, ids, $$global, param);
                }), decl);
  };
  var check_value = function (vk) {
    var match = Pre_env$ReactTemplate.force_lazy_val(vk);
    if (match) {
      var d = match[0][1];
      if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* for_all */14], (function (e) {
                return 1 - Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], e, d);
              }), ids)) {
        return vk;
      } else {
        return Pre_env$ReactTemplate.dummy_lazy_val(/* () */0);
      }
    } else {
      return vk;
    }
  };
  var nhyps = Environ$ReactTemplate.remove_hyps(ids, check_context, check_value, hyps);
  return /* tuple */[
          nhyps,
          Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.of_constr, terms$2)
        ];
}

function clear_hyps_in_evi(env, evdref, hyps, concl, ids) {
  var match = clear_hyps_in_evi_main(env, evdref, hyps, /* :: */[
        concl,
        /* [] */0
      ], ids);
  var match$1 = match[1];
  if (match$1) {
    if (match$1[1]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "evarutil.ml",
              635,
              9
            ]
          ];
    } else {
      return /* tuple */[
              match[0],
              match$1[0]
            ];
    }
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "evarutil.ml",
            635,
            9
          ]
        ];
  }
}

function clear_hyps2_in_evi(env, evdref, hyps, t, concl, ids) {
  var match = clear_hyps_in_evi_main(env, evdref, hyps, /* :: */[
        t,
        /* :: */[
          concl,
          /* [] */0
        ]
      ], ids);
  var match$1 = match[1];
  var exit = 0;
  if (match$1) {
    var match$2 = match$1[1];
    if (match$2) {
      if (match$2[1]) {
        exit = 1;
      } else {
        return /* tuple */[
                match[0],
                match$1[0],
                match$2[0]
              ];
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "evarutil.ml",
            640,
            9
          ]
        ];
  }
  
}

function queue_set(q, is_dependent, set) {
  return Curry._2(Evar$ReactTemplate.$$Set[/* iter */12], (function (a) {
                return Queue.push(/* tuple */[
                            is_dependent,
                            a
                          ], q);
              }), set);
}

function queue_term(q, is_dependent, c) {
  return queue_set(q, is_dependent, Evd$ReactTemplate.evars_of_term(c));
}

function process_dependent_evar(q, acc, evm, is_dependent, e) {
  var evi = Evd$ReactTemplate.find(evm, e);
  queue_term(q, /* true */1, evi[/* evar_concl */0]);
  Curry._2(Util$ReactTemplate.List[/* iter */9], (function (decl) {
          queue_term(q, /* true */1, Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_type */2], decl));
          if (decl.tag) {
            return queue_term(q, /* true */1, decl[1]);
          } else {
            return /* () */0;
          }
        }), Environ$ReactTemplate.named_context_of_val(evi[/* evar_hyps */1]));
  var match = evi[/* evar_body */2];
  if (match) {
    var subevars = Evd$ReactTemplate.evars_of_term(match[0]);
    queue_set(q, is_dependent, subevars);
    if (is_dependent) {
      return Curry._3(Evar$ReactTemplate.$$Map[/* add */3], e, /* Some */[subevars], acc);
    } else {
      return acc;
    }
  } else if (is_dependent) {
    return Curry._3(Evar$ReactTemplate.$$Map[/* add */3], e, /* None */0, acc);
  } else {
    return acc;
  }
}

function gather_dependent_evars(evm, l) {
  var q = Queue.create(/* () */0);
  Curry._2(Util$ReactTemplate.List[/* iter */9], (function (a) {
          return Queue.add(/* tuple */[
                      /* false */0,
                      a
                    ], q);
        }), l);
  var q$1 = q;
  var evm$1 = evm;
  var acc = Evar$ReactTemplate.$$Map[/* empty */0];
  while(!Queue.is_empty(q$1)) {
    var match = Queue.pop(q$1);
    var e = match[1];
    if (!Curry._2(Evar$ReactTemplate.$$Map[/* mem */2], e, acc)) {
      acc = process_dependent_evar(q$1, acc, evm$1, match[0], e);
    }
    
  };
  return acc;
}

function advance(sigma, _evk) {
  while(true) {
    var evk = _evk;
    var evi = Evd$ReactTemplate.find(sigma, evk);
    var match = evi[/* evar_body */2];
    if (match) {
      var match$1 = Evd$ReactTemplate.is_restricted_evar(evi);
      if (match$1) {
        _evk = match$1[0];
        continue ;
        
      } else {
        return /* None */0;
      }
    } else {
      return /* Some */[evk];
    }
  };
}

function undefined_evars_of_term(evd, t) {
  var evrec = function (acc, c) {
    var match = EConstr$ReactTemplate.kind(evd, c);
    if (match.tag === 3) {
      var match$1 = match[0];
      var acc$1 = Curry._2(Evar$ReactTemplate.$$Set[/* add */3], match$1[0], acc);
      return Util$ReactTemplate.$$Array[/* fold_left */15](evrec, acc$1, match$1[1]);
    } else {
      return EConstr$ReactTemplate.fold(evd, evrec, acc, c);
    }
  };
  return evrec(Evar$ReactTemplate.$$Set[/* empty */0], t);
}

function undefined_evars_of_named_context(evd, nc) {
  return Context$ReactTemplate.Named[/* fold_outside */9](Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* fold_constr */15], (function (c, s) {
                    return Curry._2(Evar$ReactTemplate.$$Set[/* union */6], s, undefined_evars_of_term(evd, EConstr$ReactTemplate.of_constr(c)));
                  })), nc, Evar$ReactTemplate.$$Set[/* empty */0]);
}

function undefined_evars_of_evar_info(evd, evi) {
  var match = evi[/* evar_body */2];
  return Curry._2(Evar$ReactTemplate.$$Set[/* union */6], undefined_evars_of_term(evd, EConstr$ReactTemplate.of_constr(evi[/* evar_concl */0])), Curry._2(Evar$ReactTemplate.$$Set[/* union */6], match ? undefined_evars_of_term(evd, EConstr$ReactTemplate.of_constr(match[0])) : Evar$ReactTemplate.$$Set[/* empty */0], undefined_evars_of_named_context(evd, Environ$ReactTemplate.named_context_of_val(evi[/* evar_hyps */1]))));
}

function create_undefined_evars_cache() {
  return /* record */[/* cache */Names$ReactTemplate.Id[/* Map */10][/* empty */0]];
}

function filtered_undefined_evars_of_evar_info(cache, sigma, evi) {
  var match = evi[/* evar_body */2];
  var accu = match ? Evd$ReactTemplate.evars_of_term(match[0]) : Evar$ReactTemplate.$$Set[/* empty */0];
  var accu$1 = Curry._2(Evar$ReactTemplate.$$Set[/* union */6], undefined_evars_of_term(sigma, EConstr$ReactTemplate.of_constr(evi[/* evar_concl */0])), accu);
  var cache$1 = cache;
  var accu$2 = accu$1;
  var nc = Evd$ReactTemplate.evar_filtered_context(evi);
  var fold = function (decl, accu) {
    var cache$2 = cache$1;
    var sigma$1 = sigma;
    var decl$1 = EConstr$ReactTemplate.of_named_decl(decl);
    var accu$1 = accu;
    if (cache$2) {
      var cache$3 = cache$2[0];
      var id = Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl$1);
      var r;
      try {
        r = Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, cache$3[/* cache */0]);
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          var r$1 = [/* tuple */[
              /* LocalAssum */Block.__(0, [
                  id,
                  EConstr$ReactTemplate.mkProp
                ]),
              Evar$ReactTemplate.$$Set[/* empty */0]
            ]];
          cache$3[/* cache */0] = Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], id, r$1, cache$3[/* cache */0]);
          r = r$1;
        } else {
          throw exn;
        }
      }
      var match = r[0];
      var evs;
      if (Curry._3(Context$ReactTemplate.Named[/* Declaration */0][/* equal */9], (function (prim, prim$1) {
                return +(prim === prim$1);
              }), decl$1, match[0])) {
        evs = r[0][1];
      } else {
        var fold$1 = function (c, acc) {
          var evs = undefined_evars_of_term(sigma$1, c);
          return Curry._2(Evar$ReactTemplate.$$Set[/* union */6], evs, acc);
        };
        var evs$1 = Curry._3(Context$ReactTemplate.Named[/* Declaration */0][/* fold_constr */15], fold$1, decl$1, Evar$ReactTemplate.$$Set[/* empty */0]);
        r[0] = /* tuple */[
          decl$1,
          evs$1
        ];
        evs = evs$1;
      }
      return Curry._3(Evar$ReactTemplate.$$Set[/* fold */13], Evar$ReactTemplate.$$Set[/* add */3], evs, accu$1);
    } else {
      var fold$2 = function (c, acc) {
        var evs = undefined_evars_of_term(sigma$1, c);
        return Curry._2(Evar$ReactTemplate.$$Set[/* union */6], evs, acc);
      };
      return Curry._3(Context$ReactTemplate.Named[/* Declaration */0][/* fold_constr */15], fold$2, decl$1, accu$1);
    }
  };
  return Context$ReactTemplate.Named[/* fold_outside */9](fold, nc, accu$2);
}

function occur_evar_upto(sigma, n, c) {
  var c$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](c);
  var occur_rec = function (c) {
    var match = Constr$ReactTemplate.kind(c);
    if (match.tag === 3) {
      var e = match[0];
      if (Evar$ReactTemplate.equal(e[0], n)) {
        throw Termops$ReactTemplate.Occur;
      } else {
        return Option$ReactTemplate.iter(occur_rec, Evd$ReactTemplate.existential_opt_value(sigma, e));
      }
    } else {
      return Constr$ReactTemplate.iter(occur_rec, c);
    }
  };
  try {
    occur_rec(c$1);
    return /* false */0;
  }
  catch (exn){
    if (exn === Termops$ReactTemplate.Occur) {
      return /* true */1;
    } else {
      throw exn;
    }
  }
}

function judge_of_new_Type(evd) {
  var match = Evd$ReactTemplate.new_univ_variable(/* None */0, /* None */0, Evd$ReactTemplate.univ_rigid, evd);
  var s = match[1];
  return /* tuple */[
          match[0],
          /* record */[
            /* uj_val */EConstr$ReactTemplate.mkSort(/* Type */Block.__(1, [s])),
            /* uj_type */EConstr$ReactTemplate.mkSort(/* Type */Block.__(1, [Univ$ReactTemplate.$$super(s)]))
          ]
        ];
}

function subterm_source(evk, param) {
  var k = param[1];
  var evk$1;
  evk$1 = typeof k === "number" || k.tag !== 8 ? evk : k[0];
  return /* tuple */[
          param[0],
          /* SubEvar */Block.__(8, [evk$1])
        ];
}

function compare_cumulative_instances(cv_pb, variances, u, u$prime, sigma) {
  var cstrs = Univ$ReactTemplate.Constraint[/* empty */0];
  var soft = Universes$ReactTemplate.Constraints[/* empty */0];
  var match = Util$ReactTemplate.$$Array[/* fold_left3 */41]((function (param, v, u, u$prime) {
          var soft = param[1];
          var cstrs = param[0];
          var exit = 0;
          switch (v) {
            case 0 : 
                return /* tuple */[
                        cstrs,
                        Universes$ReactTemplate.Constraints[/* add */3](/* UWeak */Block.__(3, [
                                u,
                                u$prime
                              ]), soft)
                      ];
            case 1 : 
                if (cv_pb === /* CUMUL */1) {
                  return /* tuple */[
                          Curry._2(Univ$ReactTemplate.Constraint[/* add */3], /* tuple */[
                                u,
                                /* Le */1,
                                u$prime
                              ], cstrs),
                          soft
                        ];
                } else {
                  exit = 1;
                }
                break;
            case 2 : 
                exit = 1;
                break;
            
          }
          if (exit === 1) {
            return /* tuple */[
                    Curry._2(Univ$ReactTemplate.Constraint[/* add */3], /* tuple */[
                          u,
                          /* Eq */2,
                          u$prime
                        ], cstrs),
                    soft
                  ];
          }
          
        }), /* tuple */[
        cstrs,
        soft
      ], variances, Univ$ReactTemplate.Instance[/* to_array */3](u), Univ$ReactTemplate.Instance[/* to_array */3](u$prime));
  var exit = 0;
  var sigma$1;
  try {
    sigma$1 = Evd$ReactTemplate.add_constraints(sigma, match[0]);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Univ$ReactTemplate.UniverseInconsistency) {
      return /* Inr */Block.__(1, [exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Inl */Block.__(0, [Evd$ReactTemplate.add_universe_constraints(sigma$1, match[1])]);
  }
  
}

function compare_constructor_instances(evd, u, u$prime) {
  var soft = Util$ReactTemplate.$$Array[/* fold_left2 */40]((function (cs, u, u$prime) {
          return Universes$ReactTemplate.Constraints[/* add */3](/* UWeak */Block.__(3, [
                        u,
                        u$prime
                      ]), cs);
        }), Universes$ReactTemplate.Constraints[/* empty */0], Univ$ReactTemplate.Instance[/* to_array */3](u), Univ$ReactTemplate.Instance[/* to_array */3](u$prime));
  return Evd$ReactTemplate.add_universe_constraints(evd, soft);
}

function eq_constr_univs_test(sigma1, sigma2, t, u) {
  var fold = function (cstr, sigma) {
    try {
      return /* Some */[Evd$ReactTemplate.add_universe_constraints(sigma, cstr)];
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Univ$ReactTemplate.UniverseInconsistency) {
        return /* None */0;
      } else if (exn === Evd$ReactTemplate.UniversesDiffer) {
        return /* None */0;
      } else {
        throw exn;
      }
    }
  };
  var ans = Universes$ReactTemplate.eq_constr_univs_infer_with((function (t) {
          return EConstr$ReactTemplate.kind_upto(sigma1, t);
        }), (function (u) {
          return EConstr$ReactTemplate.kind_upto(sigma2, u);
        }), Evd$ReactTemplate.universes(sigma2), fold, t, u, sigma2);
  if (ans) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

var whd_evar = EConstr$ReactTemplate.whd_evar;

var kind_of_term_upto = EConstr$ReactTemplate.kind_upto;

var meta_counter_summary_tag = match[1];

exports.new_meta = new_meta;
exports.mk_new_meta = mk_new_meta;
exports.new_evar_from_context = new_evar_from_context;
exports.new_evar = new_evar;
exports.new_pure_evar = new_pure_evar;
exports.new_pure_evar_full = new_pure_evar_full;
exports.e_new_evar = e_new_evar;
exports.new_type_evar = new_type_evar;
exports.e_new_type_evar = e_new_type_evar;
exports.new_Type = new_Type;
exports.e_new_Type = e_new_Type;
exports.restrict_evar = restrict_evar;
exports.new_global = new_global;
exports.e_new_global = e_new_global;
exports.new_evar_instance = new_evar_instance;
exports.make_pure_subst = make_pure_subst;
exports.safe_evar_value = safe_evar_value;
exports.non_instantiated = non_instantiated;
exports.NoHeadEvar = NoHeadEvar;
exports.head_evar = head_evar;
exports.whd_head_evar = whd_head_evar;
exports.has_undefined_evars = has_undefined_evars;
exports.is_ground_term = is_ground_term;
exports.is_ground_env = is_ground_env$1;
exports.gather_dependent_evars = gather_dependent_evars;
exports.advance = advance;
exports.undefined_evars_of_term = undefined_evars_of_term;
exports.undefined_evars_of_named_context = undefined_evars_of_named_context;
exports.undefined_evars_of_evar_info = undefined_evars_of_evar_info;
exports.create_undefined_evars_cache = create_undefined_evars_cache;
exports.filtered_undefined_evars_of_evar_info = filtered_undefined_evars_of_evar_info;
exports.occur_evar_upto = occur_evar_upto;
exports.judge_of_new_Type = judge_of_new_Type;
exports.whd_evar = whd_evar;
exports.nf_evar = nf_evar;
exports.j_nf_evar = j_nf_evar;
exports.jl_nf_evar = jl_nf_evar;
exports.jv_nf_evar = jv_nf_evar;
exports.tj_nf_evar = tj_nf_evar;
exports.nf_named_context_evar = nf_named_context_evar;
exports.nf_rel_context_evar = nf_rel_context_evar;
exports.nf_env_evar = nf_env_evar;
exports.nf_evar_info = nf_evar_info;
exports.nf_evar_map = nf_evar_map;
exports.nf_evar_map_undefined = nf_evar_map_undefined;
exports.nf_evars_universes = nf_evars_universes;
exports.nf_evars_and_universes = nf_evars_and_universes;
exports.e_nf_evars_and_universes = e_nf_evars_and_universes;
exports.nf_evar_map_universes = nf_evar_map_universes;
exports.Uninstantiated_evar = Uninstantiated_evar;
exports.flush_and_check_evars = flush_and_check_evars$1;
exports.kind_of_term_upto = kind_of_term_upto;
exports.eq_constr_univs_test = eq_constr_univs_test;
exports.compare_cumulative_instances = compare_cumulative_instances;
exports.compare_constructor_instances = compare_constructor_instances;
exports.ClearDependencyError = ClearDependencyError;
exports.clear_hyps_in_evi = clear_hyps_in_evi;
exports.clear_hyps2_in_evi = clear_hyps2_in_evi;
exports.empty_csubst = empty_csubst;
exports.csubst_subst = csubst_subst;
exports.push_rel_decl_to_named_context = push_rel_decl_to_named_context;
exports.push_rel_context_to_named_context = push_rel_context_to_named_context;
exports.generalize_evar_over_rels = generalize_evar_over_rels;
exports.evd_comb0 = evd_comb0;
exports.evd_comb1 = evd_comb1;
exports.evd_comb2 = evd_comb2;
exports.subterm_source = subterm_source;
exports.meta_counter_summary_tag = meta_counter_summary_tag;
/* is_ground_env Not a pure module */
