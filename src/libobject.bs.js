// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Dyn$ReactTemplate = require("./dyn.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Dyn = Dyn$ReactTemplate.Make(/* module */[]);

function default_object(s) {
  return /* record */[
          /* object_name */s,
          /* cache_function */(function () {
              return /* () */0;
            }),
          /* load_function */(function (_, _$1) {
              return /* () */0;
            }),
          /* open_function */(function (_, _$1) {
              return /* () */0;
            }),
          /* classify_function */(function (obj) {
              return /* Keep */Block.__(1, [obj]);
            }),
          /* subst_function */(function () {
              return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("The object "), Pp$ReactTemplate.str(s)), Pp$ReactTemplate.str(" does not know how to substitute!")));
            }),
          /* discharge_function */(function () {
              return /* None */0;
            }),
          /* rebuild_function */(function (x) {
              return x;
            })
        ];
}

function ident_subst_function(param) {
  return param[1];
}

function object_tag(param) {
  return Curry._1(Dyn[/* repr */2], param[0]);
}

var cache_tab = Hashtbl.create(/* None */0, 17);

function declare_object_full(odecl) {
  var na = odecl[/* object_name */0];
  var match = Curry._1(Dyn[/* Easy */6][/* make_dyn */1], na);
  var outfun = match[1];
  var infun = match[0];
  var cacher = function (param) {
    return Curry._1(odecl[/* cache_function */1], /* tuple */[
                param[0],
                Curry._1(outfun, param[1])
              ]);
  };
  var loader = function (i, param) {
    return Curry._2(odecl[/* load_function */2], i, /* tuple */[
                param[0],
                Curry._1(outfun, param[1])
              ]);
  };
  var opener = function (i, param) {
    return Curry._2(odecl[/* open_function */3], i, /* tuple */[
                param[0],
                Curry._1(outfun, param[1])
              ]);
  };
  var substituter = function (param) {
    return Curry._1(infun, Curry._1(odecl[/* subst_function */5], /* tuple */[
                    param[0],
                    Curry._1(outfun, param[1])
                  ]));
  };
  var classifier = function (lobj) {
    var match = Curry._1(odecl[/* classify_function */4], Curry._1(outfun, lobj));
    if (typeof match === "number") {
      return /* Dispose */0;
    } else {
      switch (match.tag | 0) {
        case 0 : 
            return /* Substitute */Block.__(0, [Curry._1(infun, match[0])]);
        case 1 : 
            return /* Keep */Block.__(1, [Curry._1(infun, match[0])]);
        case 2 : 
            return /* Anticipate */Block.__(2, [Curry._1(infun, match[0])]);
        
      }
    }
  };
  var discharge = function (param) {
    return Option$ReactTemplate.map(infun, Curry._1(odecl[/* discharge_function */6], /* tuple */[
                    param[0],
                    Curry._1(outfun, param[1])
                  ]));
  };
  var rebuild = function (lobj) {
    return Curry._1(infun, Curry._1(odecl[/* rebuild_function */7], Curry._1(outfun, lobj)));
  };
  Hashtbl.add(cache_tab, na, /* record */[
        /* dyn_cache_function */cacher,
        /* dyn_load_function */loader,
        /* dyn_open_function */opener,
        /* dyn_subst_function */substituter,
        /* dyn_classify_function */classifier,
        /* dyn_discharge_function */discharge,
        /* dyn_rebuild_function */rebuild
      ]);
  return /* tuple */[
          infun,
          outfun
        ];
}

function declare_object(odecl) {
  return declare_object_full(odecl)[0];
}

var declare_object_full$1 = declare_object_full;

function apply_dyn_fun(_, f, lobj) {
  var tag = object_tag(lobj);
  var tmp;
  try {
    tmp = Hashtbl.find(cache_tab, tag);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "libobject.ml",
              105,
              22
            ]
          ];
    } else {
      throw exn;
    }
  }
  return Curry._1(f, tmp);
}

function cache_object(node) {
  return apply_dyn_fun(/* () */0, (function (d) {
                return Curry._1(d[/* dyn_cache_function */0], node);
              }), node[1]);
}

function load_object(i, node) {
  return apply_dyn_fun(/* () */0, (function (d) {
                return Curry._2(d[/* dyn_load_function */1], i, node);
              }), node[1]);
}

function open_object(i, node) {
  return apply_dyn_fun(/* () */0, (function (d) {
                return Curry._2(d[/* dyn_open_function */2], i, node);
              }), node[1]);
}

function subst_object(node) {
  var lobj = node[1];
  return apply_dyn_fun(lobj, (function (d) {
                return Curry._1(d[/* dyn_subst_function */3], node);
              }), lobj);
}

function classify_object(lobj) {
  return apply_dyn_fun(/* Dispose */0, (function (d) {
                return Curry._1(d[/* dyn_classify_function */4], lobj);
              }), lobj);
}

function discharge_object(node) {
  return apply_dyn_fun(/* None */0, (function (d) {
                return Curry._1(d[/* dyn_discharge_function */5], node);
              }), node[1]);
}

function rebuild_object(lobj) {
  return apply_dyn_fun(lobj, (function (d) {
                return Curry._1(d[/* dyn_rebuild_function */6], lobj);
              }), lobj);
}

var dump = Dyn[/* dump */5];

exports.default_object = default_object;
exports.ident_subst_function = ident_subst_function;
exports.declare_object_full = declare_object_full$1;
exports.declare_object = declare_object;
exports.object_tag = object_tag;
exports.cache_object = cache_object;
exports.load_object = load_object;
exports.open_object = open_object;
exports.subst_object = subst_object;
exports.classify_object = classify_object;
exports.discharge_object = discharge_object;
exports.rebuild_object = rebuild_object;
exports.dump = dump;
/* Dyn Not a pure module */
