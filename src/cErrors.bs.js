// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Loc$ReactTemplate = require("./loc.bs.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");
var Backtrace$ReactTemplate = require("./backtrace.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Anomaly = Caml_exceptions.create("CErrors-ReactTemplate.Anomaly");

function pr(param) {
  if (param[0] === Anomaly) {
    return /* Some */["\"Anomaly: " + (Pp$ReactTemplate.string_of_ppcmds(param[2]) + "\"")];
  } else {
    return /* None */0;
  }
}

Printexc.register_printer(pr);

function make_anomaly(label, pp) {
  return [
          Anomaly,
          label,
          pp
        ];
}

function anomaly(loc, label, pp) {
  return Loc$ReactTemplate.raise(loc, [
              Anomaly,
              label,
              pp
            ]);
}

function is_anomaly(param) {
  if (param[0] === Anomaly) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

var UserError = Caml_exceptions.create("CErrors-ReactTemplate.UserError");

function todo(s) {
  return Pervasives.prerr_string("TODO: " + (s + "\n"));
}

function user_err(loc, hdr, strm) {
  return Loc$ReactTemplate.raise(loc, [
              UserError,
              hdr,
              strm
            ]);
}

function invalid_arg(loc, s) {
  return Loc$ReactTemplate.raise(loc, [
              Caml_builtin_exceptions.invalid_argument,
              s
            ]);
}

var AlreadyDeclared = Caml_exceptions.create("CErrors-ReactTemplate.AlreadyDeclared");

function alreadydeclared(pps) {
  throw [
        AlreadyDeclared,
        pps
      ];
}

var Timeout = Caml_exceptions.create("CErrors-ReactTemplate.Timeout");

var Drop = Caml_exceptions.create("CErrors-ReactTemplate.Drop");

var Quit = Caml_exceptions.create("CErrors-ReactTemplate.Quit");

var handle_stack = [/* [] */0];

var Unhandled = Caml_exceptions.create("CErrors-ReactTemplate.Unhandled");

function register_handler(h) {
  handle_stack[0] = /* :: */[
    h,
    handle_stack[0]
  ];
  return /* () */0;
}

function print_gen(bottom, _stk, _e) {
  while(true) {
    var e = _e;
    var stk = _stk;
    if (stk) {
      var stk$prime = stk[1];
      try {
        return Curry._1(stk[0], e);
      }
      catch (raw_any){
        var any = Js_exn.internalToOCamlException(raw_any);
        if (any === Unhandled) {
          _stk = stk$prime;
          continue ;
          
        } else {
          _e = any;
          _stk = stk$prime;
          continue ;
          
        }
      }
    } else {
      return Curry._1(bottom, e);
    }
  };
}

function where(param) {
  if (param && Flags$ReactTemplate.debug[0]) {
    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("in "), Pp$ReactTemplate.str(param[0])), Pp$ReactTemplate.str(":")), Pp$ReactTemplate.spc(/* () */0));
  } else {
    return Pp$ReactTemplate.mt(/* () */0);
  }
}

function raw_anomaly(e) {
  if (e[0] === Anomaly) {
    return Pp$ReactTemplate.$plus$plus(where(e[1]), e[2]);
  } else if (e[0] === Caml_builtin_exceptions.assert_failure || e[0] === Caml_builtin_exceptions.match_failure) {
    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str(Printexc.to_string(e)), Pp$ReactTemplate.str("."));
  } else {
    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Uncaught exception "), Pp$ReactTemplate.str(Printexc.to_string(e))), Pp$ReactTemplate.str("."));
  }
}

function print_backtrace(e) {
  var match = Backtrace$ReactTemplate.get_backtrace(e);
  if (match) {
    var bt = Backtrace$ReactTemplate.repr(match[0]);
    var pr_frame = function (f) {
      return Pp$ReactTemplate.str(Backtrace$ReactTemplate.print_frame(f));
    };
    var bt$1 = Pp$ReactTemplate.prlist_with_sep(Pp$ReactTemplate.fnl, pr_frame, bt);
    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.fnl(/* () */0), Pp$ReactTemplate.hov(0, bt$1));
  } else {
    return Pp$ReactTemplate.mt(/* () */0);
  }
}

function print_anomaly(askreport, e) {
  if (askreport) {
    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.hov(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Anomaly"), Pp$ReactTemplate.spc(/* () */0)), Pp$ReactTemplate.quote(raw_anomaly(e)))), Pp$ReactTemplate.spc(/* () */0));
  } else {
    return Pp$ReactTemplate.hov(0, raw_anomaly(e));
  }
}

function print($staropt$star, e) {
  var info = $staropt$star ? $staropt$star[0] : Exninfo$ReactTemplate.$$null;
  return Pp$ReactTemplate.$plus$plus(print_gen((function (param) {
                    return print_anomaly(/* true */1, param);
                  }), handle_stack[0], e), print_backtrace(info));
}

function iprint(param) {
  return print(/* Some */[param[1]], param[0]);
}

function print_no_report(e) {
  return print_gen((function (param) {
                return Pp$ReactTemplate.hov(0, raw_anomaly(param));
              }), handle_stack[0], e);
}

function iprint_no_report(param) {
  return Pp$ReactTemplate.$plus$plus(print_gen((function (param) {
                    return Pp$ReactTemplate.hov(0, raw_anomaly(param));
                  }), handle_stack[0], param[0]), print_backtrace(param[1]));
}

register_handler((function (param) {
        if (param[0] === UserError) {
          return Pp$ReactTemplate.hov(0, Pp$ReactTemplate.$plus$plus(where(param[1]), param[2]));
        } else {
          throw Unhandled;
        }
      }));

function noncritical(param) {
  if (param === Sys.Break || param === Caml_builtin_exceptions.out_of_memory || param === Caml_builtin_exceptions.stack_overflow || param[0] === Caml_builtin_exceptions.assert_failure || param[0] === Caml_builtin_exceptions.match_failure || param[0] === Anomaly || param === Timeout || param === Drop || param === Quit || param[0] === Caml_builtin_exceptions.invalid_argument && param[1] === "equal: functional value") {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

var Bottom = Caml_exceptions.create("CErrors-ReactTemplate.Bottom");

function handled(e) {
  var bottom = function () {
    throw Bottom;
  };
  try {
    print_gen(bottom, handle_stack[0], e);
    return /* true */1;
  }
  catch (exn){
    if (exn === Bottom) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

var push = Backtrace$ReactTemplate.add_backtrace;

exports.push = push;
exports.Anomaly = Anomaly;
exports.make_anomaly = make_anomaly;
exports.anomaly = anomaly;
exports.is_anomaly = is_anomaly;
exports.UserError = UserError;
exports.todo = todo;
exports.user_err = user_err;
exports.invalid_arg = invalid_arg;
exports.AlreadyDeclared = AlreadyDeclared;
exports.alreadydeclared = alreadydeclared;
exports.Timeout = Timeout;
exports.Drop = Drop;
exports.Quit = Quit;
exports.handle_stack = handle_stack;
exports.Unhandled = Unhandled;
exports.register_handler = register_handler;
exports.print_gen = print_gen;
exports.where = where;
exports.raw_anomaly = raw_anomaly;
exports.print_backtrace = print_backtrace;
exports.print_anomaly = print_anomaly;
exports.print = print;
exports.iprint = iprint;
exports.print_no_report = print_no_report;
exports.iprint_no_report = iprint_no_report;
exports.noncritical = noncritical;
exports.Bottom = Bottom;
exports.handled = handled;
/*  Not a pure module */
