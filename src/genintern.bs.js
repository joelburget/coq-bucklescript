// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Hook$ReactTemplate = require("./hook.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Store$ReactTemplate = require("./store.bs.js");
var Genarg$ReactTemplate = require("./genarg.bs.js");
var Detyping$ReactTemplate = require("./detyping.bs.js");

var Store = Store$ReactTemplate.Make(/* module */[]);

function empty_glob_sign(env) {
  return /* record */[
          /* ltacvars */Names$ReactTemplate.Id[/* Set */9][/* empty */0],
          /* genv */env,
          /* extra */Store[/* empty */0]
        ];
}

function $$default() {
  return /* None */0;
}

var InternObj = /* module */[
  /* name */"intern",
  /* default */$$default
];

function $$default$1() {
  return /* None */0;
}

var SubstObj = /* module */[
  /* name */"subst",
  /* default */$$default$1
];

function $$default$2() {
  return /* None */0;
}

var NtnSubstObj = /* module */[
  /* name */"notation_subst",
  /* default */$$default$2
];

var Intern = Genarg$ReactTemplate.Register(InternObj);

var Subst = Genarg$ReactTemplate.Register(SubstObj);

var NtnSubst = Genarg$ReactTemplate.Register(NtnSubstObj);

var intern = Intern[/* obj */1];

var register_intern0 = Intern[/* register0 */0];

function generic_intern(ist, param) {
  var wit = param[0][0];
  var match = Curry._3(intern, wit, ist, param[1]);
  return /* tuple */[
          match[0],
          Genarg$ReactTemplate.in_gen(Genarg$ReactTemplate.glbwit(wit), match[1])
        ];
}

var substitute = Subst[/* obj */1];

var register_subst0 = Subst[/* register0 */0];

function generic_substitute(subs, param) {
  var wit = param[0][0];
  return Genarg$ReactTemplate.in_gen(Genarg$ReactTemplate.glbwit(wit), Curry._3(substitute, wit, subs, param[1]));
}

Hook$ReactTemplate.set(Detyping$ReactTemplate.subst_genarg_hook, generic_substitute);

var substitute_notation = NtnSubst[/* obj */1];

var register_ntn_subst0 = NtnSubst[/* register0 */0];

function generic_substitute_notation(env, param) {
  var wit = param[0][0];
  var v = Curry._3(substitute_notation, wit, env, param[1]);
  return Genarg$ReactTemplate.in_gen(Genarg$ReactTemplate.glbwit(wit), v);
}

exports.Store = Store;
exports.empty_glob_sign = empty_glob_sign;
exports.intern = intern;
exports.generic_intern = generic_intern;
exports.substitute = substitute;
exports.generic_substitute = generic_substitute;
exports.substitute_notation = substitute_notation;
exports.generic_substitute_notation = generic_substitute_notation;
exports.register_intern0 = register_intern0;
exports.register_subst0 = register_subst0;
exports.register_ntn_subst0 = register_ntn_subst0;
/* Store Not a pure module */
