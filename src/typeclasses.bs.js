// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Evd$ReactTemplate = require("./evd.bs.js");
var Lib$ReactTemplate = require("./lib.bs.js");
var Evar$ReactTemplate = require("./evar.bs.js");
var Hook$ReactTemplate = require("./hook.bs.js");
var Term$ReactTemplate = require("./term.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Vars$ReactTemplate = require("./vars.bs.js");
var Decls$ReactTemplate = require("./decls.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Global$ReactTemplate = require("./global.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var Tacred$ReactTemplate = require("./tacred.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var Cooking$ReactTemplate = require("./cooking.bs.js");
var EConstr$ReactTemplate = require("./eConstr.bs.js");
var Nameops$ReactTemplate = require("./nameops.bs.js");
var Nametab$ReactTemplate = require("./nametab.bs.js");
var Summary$ReactTemplate = require("./summary.bs.js");
var Termops$ReactTemplate = require("./termops.bs.js");
var Goptions$ReactTemplate = require("./goptions.bs.js");
var Retyping$ReactTemplate = require("./retyping.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Globnames$ReactTemplate = require("./globnames.bs.js");
var Libobject$ReactTemplate = require("./libobject.bs.js");
var Mod_subst$ReactTemplate = require("./mod_subst.bs.js");
var Proofview$ReactTemplate = require("./proofview.bs.js");
var Universes$ReactTemplate = require("./universes.bs.js");
var Reductionops$ReactTemplate = require("./reductionops.bs.js");
var Typeclasses_errors$ReactTemplate = require("./typeclasses_errors.bs.js");

var typeclasses_unique_solutions = [/* false */0];

function set_typeclasses_unique_solutions(d) {
  typeclasses_unique_solutions[0] = d;
  return /* () */0;
}

function get_typeclasses_unique_solutions() {
  return typeclasses_unique_solutions[0];
}

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"check that typeclasses proof search returns unique solutions",
      /* optkey : :: */[
        "Typeclasses",
        /* :: */[
          "Unique",
          /* :: */[
            "Solutions",
            /* [] */0
          ]
        ]
      ],
      /* optread */get_typeclasses_unique_solutions,
      /* optwrite */set_typeclasses_unique_solutions
    ]);

var match = Hook$ReactTemplate.make(/* None */0, /* () */0);

var add_instance_hint = match[0];

function add_instance_hint$1(id) {
  return Curry._1(Hook$ReactTemplate.get(add_instance_hint), id);
}

var match$1 = Hook$ReactTemplate.make(/* None */0, /* () */0);

var remove_instance_hint = match$1[0];

function remove_instance_hint$1(id) {
  return Curry._1(Hook$ReactTemplate.get(remove_instance_hint), id);
}

var match$2 = Hook$ReactTemplate.make(/* None */0, /* () */0);

var set_typeclass_transparency = match$2[0];

function set_typeclass_transparency$1(gr, local, c) {
  return Curry._3(Hook$ReactTemplate.get(set_typeclass_transparency), gr, local, c);
}

var match$3 = Hook$ReactTemplate.make(/* None */0, /* () */0);

var classes_transparent_state = match$3[0];

function classes_transparent_state$1() {
  return Curry._1(Hook$ReactTemplate.get(classes_transparent_state), /* () */0);
}

var match$4 = Hook$ReactTemplate.make(/* None */0, /* () */0);

var get_solve_one_instance = match$4[0];

function resolve_one_typeclass($staropt$star, env, evm, t) {
  var unique = $staropt$star ? $staropt$star[0] : typeclasses_unique_solutions[0];
  return Curry._4(Hook$ReactTemplate.get(get_solve_one_instance), env, evm, t, unique);
}

function instance_impl(is) {
  return is[/* is_impl */3];
}

function hint_priority(is) {
  return is[/* is_info */1][/* hint_priority */0];
}

function new_instance(cl, info, glob, impl) {
  var $$global = glob ? /* Some */[Lib$ReactTemplate.sections_depth(/* () */0)] : /* None */0;
  if ($$global ? +($$global[0] > 0) && Globnames$ReactTemplate.isVarRef(impl) : /* false */0) {
    CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Cannot set Global an instance referring to a section variable."));
  }
  return /* record */[
          /* is_class */cl[/* cl_impl */1],
          /* is_info */info,
          /* is_global */$$global,
          /* is_impl */impl
        ];
}

var classes = Summary$ReactTemplate.ref(/* None */0, "classes", Globnames$ReactTemplate.Refmap[/* empty */0]);

var instances = Summary$ReactTemplate.ref(/* None */0, "instances", Globnames$ReactTemplate.Refmap[/* empty */0]);

function typeclass_univ_instance(param) {
  var u = param[1];
  var cl = param[0];
  if (Univ$ReactTemplate.AUContext[/* size */4](cl[/* cl_univs */0]) !== Univ$ReactTemplate.Instance[/* length */6](u)) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "typeclasses.ml",
            121,
            2
          ]
        ];
  }
  var subst_ctx = function (c) {
    return Curry._1(Context$ReactTemplate.Rel[/* map */7]((function (param) {
                      return Vars$ReactTemplate.subst_instance_constr(u, param);
                    })), c);
  };
  return /* record */[
          /* cl_univs */cl[/* cl_univs */0],
          /* cl_impl */cl[/* cl_impl */1],
          /* cl_context */Util$ReactTemplate.on_snd(subst_ctx, cl[/* cl_context */2]),
          /* cl_props */subst_ctx(cl[/* cl_props */3]),
          /* cl_projs */cl[/* cl_projs */4],
          /* cl_strict */cl[/* cl_strict */5],
          /* cl_unique */cl[/* cl_unique */6]
        ];
}

function class_info(c) {
  try {
    return Curry._2(Globnames$ReactTemplate.Refmap[/* find */21], c, classes[0]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return Typeclasses_errors$ReactTemplate.not_a_class(Global$ReactTemplate.env(/* () */0), EConstr$ReactTemplate.of_constr(Globnames$ReactTemplate.printable_constr_of_global(c)));
    } else {
      throw exn;
    }
  }
}

function global_class_of_constr(env, sigma, c) {
  try {
    var match = Termops$ReactTemplate.global_of_constr(sigma, c);
    return /* tuple */[
            class_info(match[0]),
            match[1]
          ];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return Typeclasses_errors$ReactTemplate.not_a_class(env, c);
    } else {
      throw exn;
    }
  }
}

function dest_class_app(env, sigma, c) {
  var match = EConstr$ReactTemplate.decompose_app(sigma, c);
  return /* tuple */[
          global_class_of_constr(env, sigma, match[0]),
          Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.Unsafe[/* to_constr */0], match[1])
        ];
}

function dest_class_arity(env, sigma, c) {
  var match = EConstr$ReactTemplate.decompose_prod_assum(sigma, c);
  return /* tuple */[
          match[0],
          dest_class_app(env, sigma, match[1])
        ];
}

function class_of_constr(sigma, c) {
  try {
    return /* Some */[dest_class_arity(Global$ReactTemplate.env(/* () */0), sigma, c)];
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    if (CErrors$ReactTemplate.noncritical(e)) {
      return /* None */0;
    } else {
      throw e;
    }
  }
}

function is_class_type(evd, _c) {
  while(true) {
    var c = _c;
    var match = Termops$ReactTemplate.decompose_app_vect(evd, c);
    var c$1 = match[0];
    var match$1 = EConstr$ReactTemplate.kind(evd, c$1);
    switch (match$1.tag | 0) {
      case 5 : 
          _c = match$1[0];
          continue ;
          case 6 : 
          _c = match$1[2];
          continue ;
          default:
        var sigma = evd;
        var c$2 = c$1;
        try {
          var match$2 = Termops$ReactTemplate.global_of_constr(sigma, c$2);
          return Curry._2(Globnames$ReactTemplate.Refmap[/* mem */2], match$2[0], classes[0]);
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            return /* false */0;
          } else {
            throw exn;
          }
        }
    }
  };
}

function is_class_evar(evd, evi) {
  return is_class_type(evd, EConstr$ReactTemplate.of_constr(evi[/* evar_concl */0]));
}

function load_class(param) {
  var cl = param[1];
  classes[0] = Curry._3(Globnames$ReactTemplate.Refmap[/* add */3], cl[/* cl_impl */1], cl, classes[0]);
  return /* () */0;
}

function subst_class(param) {
  var cl = param[1];
  var subst = param[0];
  var do_subst_con = function (c) {
    return Mod_subst$ReactTemplate.subst_constant(subst, c);
  };
  var do_subst = function (c) {
    return Mod_subst$ReactTemplate.subst_mps(subst, c);
  };
  var do_subst_gr = function (gr) {
    return Globnames$ReactTemplate.subst_global(subst, gr)[0];
  };
  var do_subst_ctx = Curry._1(Util$ReactTemplate.List[/* smartmap */65], Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], do_subst));
  var do_subst_context = function (param) {
    return /* tuple */[
            Curry._2(Util$ReactTemplate.List[/* smartmap */65], (function (param) {
                    return Option$ReactTemplate.smartmap(do_subst_gr, param);
                  }), param[0]),
            Curry._1(do_subst_ctx, param[1])
          ];
  };
  var do_subst_projs = function (projs) {
    return Curry._2(Util$ReactTemplate.List[/* smartmap */65], (function (param) {
                  return /* tuple */[
                          param[0],
                          param[1],
                          Option$ReactTemplate.smartmap(do_subst_con, param[2])
                        ];
                }), projs);
  };
  return /* record */[
          /* cl_univs */cl[/* cl_univs */0],
          /* cl_impl */Globnames$ReactTemplate.subst_global(subst, cl[/* cl_impl */1])[0],
          /* cl_context */do_subst_context(cl[/* cl_context */2]),
          /* cl_props */Curry._1(do_subst_ctx, cl[/* cl_props */3]),
          /* cl_projs */do_subst_projs(cl[/* cl_projs */4]),
          /* cl_strict */cl[/* cl_strict */5],
          /* cl_unique */cl[/* cl_unique */6]
        ];
}

function discharge_class(param) {
  var cl = param[1];
  var repl = Lib$ReactTemplate.replacement_context(/* () */0);
  var rel_of_variable_context = function (ctx) {
    return Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (param, param$1) {
                  var subst = param$1[1];
                  var decl = param[0];
                  var decl$prime = Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* to_rel_decl */19], Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* map_constr */13], (function (param) {
                              return Vars$ReactTemplate.substn_vars(1, subst, param);
                            }), decl));
                  return /* tuple */[
                          /* :: */[
                            decl$prime,
                            param$1[0]
                          ],
                          /* :: */[
                            Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl),
                            subst
                          ]
                        ];
                }), ctx, /* tuple */[
                /* [] */0,
                /* [] */0
              ]);
  };
  var discharge_rel_context = function (param, n, rel) {
    var usubst = param[1];
    var subst = param[0];
    var rel$1 = Curry._1(Context$ReactTemplate.Rel[/* map */7]((function (param) {
                return Cooking$ReactTemplate.expmod_constr(repl, param);
              })), rel);
    var fold = function (decl, param) {
      var k = param[1];
      var map = function (c) {
        return Vars$ReactTemplate.subst_univs_level_constr(usubst, Vars$ReactTemplate.substn_vars(k, subst, c));
      };
      return /* tuple */[
              /* :: */[
                Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], map, decl),
                param[0]
              ],
              k + 1 | 0
            ];
    };
    return Curry._3(Util$ReactTemplate.List[/* fold_right */14], fold, rel$1, /* tuple */[
                  /* [] */0,
                  n
                ])[0];
  };
  var abs_context = function (cl) {
    var match = cl[/* cl_impl */1];
    switch (match.tag | 0) {
      case 1 : 
          return Lib$ReactTemplate.section_segment_of_constant(match[0]);
      case 2 : 
          return Lib$ReactTemplate.section_segment_of_mutual_inductive(match[0][0]);
      case 0 : 
      case 3 : 
          throw [
                Caml_builtin_exceptions.assert_failure,
                [
                  "typeclasses.ml",
                  208,
                  37
                ]
              ];
      
    }
  };
  var discharge_context = function (ctx$prime, subst, param) {
    var newgrs = Curry._2(Util$ReactTemplate.List[/* map */10], (function (decl) {
            var match = class_of_constr(Evd$ReactTemplate.empty, EConstr$ReactTemplate.of_constr(Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* get_type */2], decl)));
            if (match) {
              return /* Some */[match[0][1][0][0][/* cl_impl */1]];
            } else {
              return /* None */0;
            }
          }), ctx$prime);
    var grs$prime = Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* smartmap */65], (function (param) {
                return Option$ReactTemplate.smartmap(Lib$ReactTemplate.discharge_global, param);
              }), param[0]), newgrs);
    return /* tuple */[
            grs$prime,
            Util$ReactTemplate.$at(discharge_rel_context(subst, 1, param[1]), ctx$prime)
          ];
  };
  var cl_impl$prime = Lib$ReactTemplate.discharge_global(cl[/* cl_impl */1]);
  if (cl_impl$prime === cl[/* cl_impl */1]) {
    return cl;
  } else {
    var info = abs_context(cl);
    var ctx = info[/* abstr_ctx */0];
    var match = rel_of_variable_context(ctx);
    var subst = match[1];
    var match$1 = Lib$ReactTemplate.discharge_abstract_universe_context(info, cl[/* cl_univs */0]);
    var usubst = match$1[0];
    var context = discharge_context(match[0], /* tuple */[
          subst,
          usubst
        ], cl[/* cl_context */2]);
    var props = discharge_rel_context(/* tuple */[
          subst,
          usubst
        ], Curry._1(Util$ReactTemplate.List[/* length */0], cl[/* cl_context */2][0]) + 1 | 0, cl[/* cl_props */3]);
    var discharge_proj = function (param) {
      return /* tuple */[
              param[0],
              param[1],
              Option$ReactTemplate.smartmap(Lib$ReactTemplate.discharge_con, param[2])
            ];
    };
    return /* record */[
            /* cl_univs */match$1[1],
            /* cl_impl */cl_impl$prime,
            /* cl_context */context,
            /* cl_props */props,
            /* cl_projs */Curry._2(Util$ReactTemplate.List[/* smartmap */65], discharge_proj, cl[/* cl_projs */4]),
            /* cl_strict */cl[/* cl_strict */5],
            /* cl_unique */cl[/* cl_unique */6]
          ];
  }
}

function rebuild_class(cl) {
  try {
    var cst = Tacred$ReactTemplate.evaluable_of_global_reference(Global$ReactTemplate.env(/* () */0), cl[/* cl_impl */1]);
    set_typeclass_transparency$1(cst, /* false */0, /* false */0);
    return cl;
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    if (CErrors$ReactTemplate.noncritical(e)) {
      return cl;
    } else {
      throw e;
    }
  }
}

var init = Libobject$ReactTemplate.default_object("type classes state");

var class_input = Libobject$ReactTemplate.declare_object(/* record */[
      /* object_name */init[/* object_name */0],
      /* cache_function */load_class,
      /* load_function */(function () {
          return load_class;
        }),
      /* open_function */(function () {
          return load_class;
        }),
      /* classify_function */(function (x) {
          return /* Substitute */Block.__(0, [x]);
        }),
      /* subst_function */subst_class,
      /* discharge_function */(function (a) {
          return /* Some */[discharge_class(a)];
        }),
      /* rebuild_function */rebuild_class
    ]);

function check_instance(env, sigma, c) {
  try {
    var match = resolve_one_typeclass(/* None */0, env, sigma, Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, env, sigma, c));
    return 1 - Evd$ReactTemplate.has_undefined(match[0]);
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    if (CErrors$ReactTemplate.noncritical(e)) {
      return /* false */0;
    } else {
      throw e;
    }
  }
}

function build_subclasses(check, env, sigma, glob, param) {
  Nametab$ReactTemplate.basename_of_global(glob);
  var match = Global$ReactTemplate.type_of_global_in_context(env, glob);
  var match$1 = Universes$ReactTemplate.fresh_instance_from(match[1], /* None */0);
  var inst = match$1[0];
  var ty = Vars$ReactTemplate.subst_instance_constr(inst, match[0]);
  var ty$1 = EConstr$ReactTemplate.of_constr(ty);
  var sigma$1 = Evd$ReactTemplate.merge_context_set(/* None */0, /* None */0, Evd$ReactTemplate.univ_rigid, sigma, match$1[1]);
  var aux = function (pri, c, ty, path) {
    var match = class_of_constr(sigma$1, ty);
    if (match) {
      var match$1 = match[0];
      var match$2 = match$1[1];
      var match$3 = match$2[0];
      var u = match$3[1];
      var rels = match$1[0];
      var instapp = Reductionops$ReactTemplate.whd_beta(sigma$1, EConstr$ReactTemplate.of_constr(Term$ReactTemplate.appvectc(c, Context$ReactTemplate.Rel[/* to_extended_vect */13](Constr$ReactTemplate.mkRel, 0, rels))));
      var instapp$1 = EConstr$ReactTemplate.Unsafe[/* to_constr */0](instapp);
      var projargs = Util$ReactTemplate.$$Array[/* of_list */10](Util$ReactTemplate.$at(match$2[1], /* :: */[
                instapp$1,
                /* [] */0
              ]));
      var projs = Curry._2(Util$ReactTemplate.List[/* map_filter */62], (function (param) {
              var b = param[1];
              if (b) {
                var match = b[0];
                if (match[0] !== 0) {
                  return /* None */0;
                } else {
                  var info = match[1];
                  var proj = Option$ReactTemplate.get(param[2]);
                  var rels$1 = Curry._2(Util$ReactTemplate.List[/* map */10], (function (d) {
                          return Termops$ReactTemplate.map_rel_decl(EConstr$ReactTemplate.Unsafe[/* to_constr */0], d);
                        }), rels);
                  var u$1 = EConstr$ReactTemplate.EInstance[/* kind */1](sigma$1, u);
                  var body = Curry._2(Term$ReactTemplate.it_mkLambda_or_LetIn, Constr$ReactTemplate.mkApp(/* tuple */[
                            Constr$ReactTemplate.mkConstU(/* tuple */[
                                  proj,
                                  u$1
                                ]),
                            projargs
                          ]), rels$1);
                  if (check && check_instance(env, sigma$1, EConstr$ReactTemplate.of_constr(body))) {
                    return /* None */0;
                  } else {
                    var match$1 = info[/* hint_priority */0];
                    var newpri;
                    if (pri) {
                      var p = pri[0];
                      newpri = match$1 ? /* Some */[p + match$1[0] | 0] : /* Some */[p + 1 | 0];
                    } else {
                      newpri = /* None */0;
                    }
                    return /* Some */[/* tuple */[
                              /* ConstRef */Block.__(1, [proj]),
                              /* record */[
                                /* hint_priority */newpri,
                                /* hint_pattern */info[/* hint_pattern */1]
                              ],
                              body
                            ]];
                  }
                }
              } else {
                return /* None */0;
              }
            }), match$3[0][/* cl_projs */4]);
      var declare_proj = function (hints, param) {
        var body = param[2];
        var path$prime_000 = param[0];
        var path$prime = /* :: */[
          path$prime_000,
          path
        ];
        var ty = Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, env, sigma$1, EConstr$ReactTemplate.of_constr(body));
        var rest = aux(pri, body, ty, path$prime);
        return Util$ReactTemplate.$at(hints, /* :: */[
                    /* tuple */[
                      path$prime,
                      param[1],
                      body
                    ],
                    rest
                  ]);
      };
      return Curry._3(Util$ReactTemplate.List[/* fold_left */13], declare_proj, /* [] */0, projs);
    } else {
      return /* [] */0;
    }
  };
  var term = Universes$ReactTemplate.constr_of_global_univ(/* tuple */[
        glob,
        inst
      ]);
  return aux(param[/* hint_priority */0], term, ty$1, /* :: */[
              glob,
              /* [] */0
            ]);
}

function cache_instance(param) {
  var match = param[1];
  var i = match[1];
  if (match[0] !== 0) {
    var inst = i;
    var insts;
    try {
      insts = Curry._2(Globnames$ReactTemplate.Refmap[/* find */21], inst[/* is_class */0], instances[0]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "typeclasses.ml",
                342,
                22
              ]
            ];
      } else {
        throw exn;
      }
    }
    var insts$1 = Curry._2(Globnames$ReactTemplate.Refmap[/* remove */5], inst[/* is_impl */3], insts);
    instances[0] = Curry._3(Globnames$ReactTemplate.Refmap[/* add */3], inst[/* is_class */0], insts$1, instances[0]);
    return /* () */0;
  } else {
    var inst$1 = i;
    var insts$2;
    try {
      insts$2 = Curry._2(Globnames$ReactTemplate.Refmap[/* find */21], inst$1[/* is_class */0], instances[0]);
    }
    catch (exn$1){
      if (exn$1 === Caml_builtin_exceptions.not_found) {
        insts$2 = Globnames$ReactTemplate.Refmap[/* empty */0];
      } else {
        throw exn$1;
      }
    }
    var insts$3 = Curry._3(Globnames$ReactTemplate.Refmap[/* add */3], inst$1[/* is_impl */3], inst$1, insts$2);
    instances[0] = Curry._3(Globnames$ReactTemplate.Refmap[/* add */3], inst$1[/* is_class */0], insts$3, instances[0]);
    return /* () */0;
  }
}

function subst_instance(param) {
  var match = param[1];
  var inst = match[1];
  var subst = param[0];
  return /* tuple */[
          match[0],
          /* record */[
            /* is_class */Globnames$ReactTemplate.subst_global(subst, inst[/* is_class */0])[0],
            /* is_info */inst[/* is_info */1],
            /* is_global */inst[/* is_global */2],
            /* is_impl */Globnames$ReactTemplate.subst_global(subst, inst[/* is_impl */3])[0]
          ]
        ];
}

function discharge_instance(param) {
  var match = param[1];
  var inst = match[1];
  var match$1 = inst[/* is_global */2];
  if (match$1) {
    if (Globnames$ReactTemplate.isVarRef(inst[/* is_impl */3])) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "typeclasses.ml",
              360,
              4
            ]
          ];
    }
    return /* Some */[/* tuple */[
              match[0],
              /* record */[
                /* is_class */Lib$ReactTemplate.discharge_global(inst[/* is_class */0]),
                /* is_info */inst[/* is_info */1],
                /* is_global : Some */[match$1[0] - 1 | 0],
                /* is_impl */Lib$ReactTemplate.discharge_global(inst[/* is_impl */3])
              ]
            ]];
  } else {
    return /* None */0;
  }
}

function is_local_for_hint(i) {
  var match = i[/* is_global */2];
  if (match) {
    return +(match[0] !== 0);
  } else {
    return /* true */1;
  }
}

function add_instance(check, inst) {
  var poly = Global$ReactTemplate.is_polymorphic(inst[/* is_impl */3]);
  var local = is_local_for_hint(inst);
  Curry._4(add_instance_hint$1(/* IsGlobal */Block.__(0, [inst[/* is_impl */3]])), /* :: */[
        inst[/* is_impl */3],
        /* [] */0
      ], local, inst[/* is_info */1], poly);
  return Curry._2(Util$ReactTemplate.List[/* iter */9], (function (param) {
                return Curry._4(add_instance_hint$1(/* IsConstr */Block.__(1, [param[2]])), param[0], local, param[1], poly);
              }), build_subclasses(check && 1 - Globnames$ReactTemplate.isVarRef(inst[/* is_impl */3]), Global$ReactTemplate.env(/* () */0), Evd$ReactTemplate.from_env(Global$ReactTemplate.env(/* () */0)), inst[/* is_impl */3], inst[/* is_info */1]));
}

function rebuild_instance(param) {
  var inst = param[1];
  var action = param[0];
  if (!action) {
    add_instance(/* true */1, inst);
  }
  return /* tuple */[
          action,
          inst
        ];
}

function classify_instance(param) {
  var inst = param[1];
  if (inst[/* is_global */2]) {
    return /* Substitute */Block.__(0, [/* tuple */[
                param[0],
                inst
              ]]);
  } else {
    return /* Dispose */0;
  }
}

var init$1 = Libobject$ReactTemplate.default_object("type classes instances state");

var instance_input = Libobject$ReactTemplate.declare_object(/* record */[
      /* object_name */init$1[/* object_name */0],
      /* cache_function */cache_instance,
      /* load_function */(function (_, x) {
          return cache_instance(x);
        }),
      /* open_function */(function (_, x) {
          return cache_instance(x);
        }),
      /* classify_function */classify_instance,
      /* subst_function */subst_instance,
      /* discharge_function */discharge_instance,
      /* rebuild_function */rebuild_instance
    ]);

function add_instance$1(i) {
  Lib$ReactTemplate.add_anonymous_leaf(/* None */0, Curry._1(instance_input, /* tuple */[
            /* AddInstance */0,
            i
          ]));
  return add_instance(/* true */1, i);
}

function remove_instance(i) {
  Lib$ReactTemplate.add_anonymous_leaf(/* None */0, Curry._1(instance_input, /* tuple */[
            /* RemoveInstance */1,
            i
          ]));
  return remove_instance_hint$1(i[/* is_impl */3]);
}

function declare_instance(info, local, glob) {
  var match = Global$ReactTemplate.type_of_global_in_context(Global$ReactTemplate.env(/* () */0), glob);
  var info$1 = Option$ReactTemplate.$$default(/* record */[
        /* hint_priority : None */0,
        /* hint_pattern : None */0
      ], info);
  var match$1 = class_of_constr(Evd$ReactTemplate.empty, EConstr$ReactTemplate.of_constr(match[0]));
  if (match$1) {
    if (!(!Globnames$ReactTemplate.isVarRef(glob) || local)) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "typeclasses.ml",
              423,
              6
            ]
          ];
    }
    return add_instance$1(new_instance(match$1[0][1][0][0], info$1, 1 - local, glob));
  } else {
    return /* () */0;
  }
}

function add_class(cl) {
  Lib$ReactTemplate.add_anonymous_leaf(/* None */0, Curry._1(class_input, cl));
  return Curry._2(Util$ReactTemplate.List[/* iter */9], (function (param) {
                var body = param[2];
                var inst = param[1];
                if (inst) {
                  var match = inst[0];
                  if (match[0] !== 0) {
                    if (body) {
                      return declare_instance(/* Some */[match[1]], /* false */0, /* ConstRef */Block.__(1, [body[0]]));
                    } else {
                      return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("Non-definable projection can not be declared as a subinstance"));
                    }
                  } else {
                    return /* () */0;
                  }
                } else {
                  return /* () */0;
                }
              }), cl[/* cl_projs */4]);
}

function instance_constructor(param, args) {
  var u = param[1];
  var cl = param[0];
  var lenpars = Curry._2(Util$ReactTemplate.List[/* count */76], Context$ReactTemplate.Rel[/* Declaration */0][/* is_local_assum */5], cl[/* cl_context */2][1]);
  var pars = Curry._2(Util$ReactTemplate.List[/* chop */99], lenpars, args)[0];
  var match = cl[/* cl_impl */1];
  switch (match.tag | 0) {
    case 1 : 
        var cst_000 = match[0];
        var cst = /* tuple */[
          cst_000,
          u
        ];
        var term = args ? /* Some */[Curry._1(Util$ReactTemplate.List[/* last */105], args)] : /* None */0;
        return /* tuple */[
                term,
                EConstr$ReactTemplate.applist(/* tuple */[
                      EConstr$ReactTemplate.mkConstU(cst),
                      pars
                    ])
              ];
    case 2 : 
        var ind_000 = match[0];
        var ind = /* tuple */[
          ind_000,
          u
        ];
        return /* tuple */[
                /* Some */[EConstr$ReactTemplate.applist(/* tuple */[
                        EConstr$ReactTemplate.mkConstructUi(/* tuple */[
                              ind,
                              1
                            ]),
                        args
                      ])],
                EConstr$ReactTemplate.applist(/* tuple */[
                      EConstr$ReactTemplate.mkIndU(ind),
                      pars
                    ])
              ];
    case 0 : 
    case 3 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "typeclasses.ml",
                460,
                13
              ]
            ];
    
  }
}

function typeclasses() {
  return Curry._3(Globnames$ReactTemplate.Refmap[/* fold */10], (function (_, l, c) {
                return /* :: */[
                        l,
                        c
                      ];
              }), classes[0], /* [] */0);
}

function all_instances() {
  return Curry._3(Globnames$ReactTemplate.Refmap[/* fold */10], (function (_, v, acc) {
                return Curry._3(Globnames$ReactTemplate.Refmap[/* fold */10], (function (_, v, acc) {
                              return /* :: */[
                                      v,
                                      acc
                                    ];
                            }), v, acc);
              }), instances[0], /* [] */0);
}

function instances$1(r) {
  var c = class_info(r);
  try {
    var c$1 = Curry._2(Globnames$ReactTemplate.Refmap[/* find */21], c[/* cl_impl */1], instances[0]);
    return Curry._3(Globnames$ReactTemplate.Refmap[/* fold */10], (function (_, v, acc) {
                  return /* :: */[
                          v,
                          acc
                        ];
                }), c$1, /* [] */0);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* [] */0;
    } else {
      throw exn;
    }
  }
}

function is_class(gr) {
  return Curry._2(Globnames$ReactTemplate.Refmap[/* exists */12], (function (_, v) {
                return Globnames$ReactTemplate.eq_gr(v[/* cl_impl */1], gr);
              }), classes[0]);
}

function is_instance(param) {
  switch (param.tag | 0) {
    case 0 : 
        var match = Decls$ReactTemplate.variable_kind(param[0]);
        switch (match.tag | 0) {
          case 1 : 
              if (match[0] !== 10) {
                return /* false */0;
              } else {
                return /* true */1;
              }
          case 0 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 1 : 
        var match$1 = Decls$ReactTemplate.constant_kind(param[0]);
        switch (match$1.tag | 0) {
          case 1 : 
              if (match$1[0] !== 10) {
                return /* false */0;
              } else {
                return /* true */1;
              }
          case 0 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 2 : 
        return /* false */0;
    case 3 : 
        return is_class(/* IndRef */Block.__(2, [param[0][0]]));
    
  }
}

var resolvable = Proofview$ReactTemplate.Unsafe[/* typeclass_resolvable */15];

function set_resolvable(s, b) {
  if (b) {
    return Curry._2(Evd$ReactTemplate.Store[/* remove */3], s, resolvable);
  } else {
    return Curry._3(Evd$ReactTemplate.Store[/* set */1], s, resolvable, /* () */0);
  }
}

function is_resolvable(evi) {
  var match = evi[/* evar_body */2];
  if (!(
      match ? /* false */0 : /* true */1
    )) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "typeclasses.ml",
            509,
            2
          ]
        ];
  }
  return Option$ReactTemplate.is_empty(Curry._2(Evd$ReactTemplate.Store[/* get */2], evi[/* evar_extra */6], resolvable));
}

function mark_resolvability_undef(b, evi) {
  if (is_resolvable(evi) === b) {
    return evi;
  } else {
    var t = set_resolvable(evi[/* evar_extra */6], b);
    var newrecord = evi.slice();
    newrecord[/* evar_extra */6] = t;
    return newrecord;
  }
}

function mark_resolvability(b, evi) {
  var match = evi[/* evar_body */2];
  if (!(
      match ? /* false */0 : /* true */1
    )) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "typeclasses.ml",
            519,
            2
          ]
        ];
  }
  return mark_resolvability_undef(b, evi);
}

function mark_unresolvable(evi) {
  return mark_resolvability(/* false */0, evi);
}

function mark_resolvable(evi) {
  return mark_resolvability(/* true */1, evi);
}

function all_evars(_, _$1) {
  return /* true */1;
}

function all_goals(_, param) {
  if (typeof param === "number") {
    if (param === 1) {
      return /* true */1;
    } else {
      return /* false */0;
    }
  } else if (param.tag === 7) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function no_goals(ev, evi) {
  return 1 - all_goals(ev, evi);
}

function no_goals_or_obligations(_, param) {
  if (typeof param === "number") {
    if (param === 1) {
      return /* false */0;
    } else {
      return /* true */1;
    }
  } else {
    switch (param.tag | 0) {
      case 3 : 
      case 7 : 
          return /* false */0;
      default:
        return /* true */1;
    }
  }
}

function mark_resolvability$1(filter, b, sigma) {
  var map = function (ev, evi) {
    if (Curry._2(filter, ev, evi[/* evar_source */4][1])) {
      return mark_resolvability_undef(b, evi);
    } else {
      return evi;
    }
  };
  return Evd$ReactTemplate.raw_map_undefined(map, sigma);
}

function mark_unresolvables($staropt$star, sigma) {
  var filter = $staropt$star ? $staropt$star[0] : all_evars;
  return mark_resolvability$1(filter, /* false */0, sigma);
}

function mark_resolvables($staropt$star, sigma) {
  var filter = $staropt$star ? $staropt$star[0] : all_evars;
  return mark_resolvability$1(filter, /* true */1, sigma);
}

function has_typeclasses(filter, evd) {
  var check = function (ev, evi) {
    if (Curry._2(filter, ev, evi[/* evar_source */4][1]) && is_resolvable(evi)) {
      return is_class_evar(evd, evi);
    } else {
      return /* false */0;
    }
  };
  return Curry._2(Evar$ReactTemplate.$$Map[/* exists */12], check, Evd$ReactTemplate.undefined_map(evd));
}

var match$5 = Hook$ReactTemplate.make(/* None */0, /* () */0);

var get_solve_all_instances = match$5[0];

function resolve_typeclasses($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, env, evd) {
  var fast_path = $staropt$star ? $staropt$star[0] : /* true */1;
  var filter = $staropt$star$1 ? $staropt$star$1[0] : no_goals;
  var unique = $staropt$star$2 ? $staropt$star$2[0] : typeclasses_unique_solutions[0];
  var split = $staropt$star$3 ? $staropt$star$3[0] : /* true */1;
  var fail = $staropt$star$4 ? $staropt$star$4[0] : /* true */1;
  if (fast_path && !has_typeclasses(filter, evd)) {
    return evd;
  } else {
    var env$1 = env;
    var evd$1 = evd;
    var filter$1 = filter;
    var unique$1 = unique;
    var split$1 = split;
    var fail$1 = fail;
    return Curry._6(Hook$ReactTemplate.get(get_solve_all_instances), env$1, evd$1, filter$1, unique$1, split$1, fail$1);
  }
}

var set_typeclass_transparency_hook = match$2[1];

var classes_transparent_state_hook = match$3[1];

var add_instance_hint_hook = match[1];

var remove_instance_hint_hook = match$1[1];

var solve_all_instances_hook = match$5[1];

var solve_one_instance_hook = match$4[1];

exports.instances = instances$1;
exports.typeclasses = typeclasses;
exports.all_instances = all_instances;
exports.add_class = add_class;
exports.new_instance = new_instance;
exports.add_instance = add_instance$1;
exports.remove_instance = remove_instance;
exports.class_info = class_info;
exports.dest_class_app = dest_class_app;
exports.typeclass_univ_instance = typeclass_univ_instance;
exports.class_of_constr = class_of_constr;
exports.instance_impl = instance_impl;
exports.hint_priority = hint_priority;
exports.is_class = is_class;
exports.is_instance = is_instance;
exports.instance_constructor = instance_constructor;
exports.all_evars = all_evars;
exports.all_goals = all_goals;
exports.no_goals = no_goals;
exports.no_goals_or_obligations = no_goals_or_obligations;
exports.set_resolvable = set_resolvable;
exports.is_resolvable = is_resolvable;
exports.mark_unresolvable = mark_unresolvable;
exports.mark_unresolvables = mark_unresolvables;
exports.mark_resolvables = mark_resolvables;
exports.mark_resolvable = mark_resolvable;
exports.is_class_evar = is_class_evar;
exports.is_class_type = is_class_type;
exports.resolve_typeclasses = resolve_typeclasses;
exports.resolve_one_typeclass = resolve_one_typeclass;
exports.set_typeclass_transparency_hook = set_typeclass_transparency_hook;
exports.set_typeclass_transparency = set_typeclass_transparency$1;
exports.classes_transparent_state_hook = classes_transparent_state_hook;
exports.classes_transparent_state = classes_transparent_state$1;
exports.add_instance_hint_hook = add_instance_hint_hook;
exports.remove_instance_hint_hook = remove_instance_hint_hook;
exports.add_instance_hint = add_instance_hint$1;
exports.remove_instance_hint = remove_instance_hint$1;
exports.solve_all_instances_hook = solve_all_instances_hook;
exports.solve_one_instance_hook = solve_one_instance_hook;
exports.declare_instance = declare_instance;
exports.build_subclasses = build_subclasses;
/*  Not a pure module */
