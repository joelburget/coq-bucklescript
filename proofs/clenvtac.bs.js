// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Evd$ReactTemplate = require("../src/evd.bs.js");
var Evar$ReactTemplate = require("../src/evar.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Clenv$ReactTemplate = require("./clenv.bs.js");
var Logic$ReactTemplate = require("../src/logic.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var Typing$ReactTemplate = require("../src/typing.bs.js");
var CErrors$ReactTemplate = require("../src/cErrors.bs.js");
var EConstr$ReactTemplate = require("../src/eConstr.bs.js");
var Refiner$ReactTemplate = require("../src/refiner.bs.js");
var Tacmach$ReactTemplate = require("./tacmach.bs.js");
var Termops$ReactTemplate = require("../src/termops.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Proofview$ReactTemplate = require("../src/proofview.bs.js");
var Typeclasses$ReactTemplate = require("../src/typeclasses.bs.js");
var Unification$ReactTemplate = require("../pretyping/unification.bs.js");

function clenv_cast_meta(clenv) {
  var crec = function (u) {
    var match = EConstr$ReactTemplate.kind(clenv[/* evd */1], u);
    switch (match.tag | 0) {
      case 5 : 
          if (EConstr$ReactTemplate.isMeta(clenv[/* evd */1], match[0])) {
            return u;
          } else {
            return EConstr$ReactTemplate.map(clenv[/* evd */1], crec, u);
          }
      case 9 : 
      case 13 : 
          return crec_hd(u);
      case 16 : 
          return EConstr$ReactTemplate.mkProj(/* tuple */[
                      match[0],
                      crec_hd(match[1])
                    ]);
      default:
        return EConstr$ReactTemplate.map(clenv[/* evd */1], crec, u);
    }
  };
  var crec_hd = function (u) {
    var match = EConstr$ReactTemplate.kind(clenv[/* evd */1], Termops$ReactTemplate.strip_outer_cast(clenv[/* evd */1], u));
    switch (match.tag | 0) {
      case 2 : 
          var mv = match[0];
          try {
            var b = Typing$ReactTemplate.meta_type(clenv[/* evd */1], mv);
            if (Termops$ReactTemplate.occur_meta(clenv[/* evd */1], b)) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "clenvtac.ml",
                      42,
                      5
                    ]
                  ];
            }
            if (Termops$ReactTemplate.occur_meta(clenv[/* evd */1], b)) {
              return u;
            } else {
              return EConstr$ReactTemplate.mkCast(/* tuple */[
                          EConstr$ReactTemplate.mkMeta(mv),
                          /* DEFAULTcast */2,
                          b
                        ]);
            }
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              return u;
            } else {
              throw exn;
            }
          }
          break;
      case 9 : 
          return EConstr$ReactTemplate.mkApp(/* tuple */[
                      crec_hd(match[0]),
                      Util$ReactTemplate.$$Array[/* map */12](crec, match[1])
                    ]);
      case 13 : 
          return EConstr$ReactTemplate.mkCase(/* tuple */[
                      match[0],
                      crec_hd(match[1]),
                      crec_hd(match[2]),
                      Util$ReactTemplate.$$Array[/* map */12](crec, match[3])
                    ]);
      case 16 : 
          return EConstr$ReactTemplate.mkProj(/* tuple */[
                      match[0],
                      crec_hd(match[1])
                    ]);
      default:
        return u;
    }
  };
  return crec;
}

function clenv_value_cast_meta(clenv) {
  return clenv_cast_meta(clenv)(Clenv$ReactTemplate.clenv_value(clenv));
}

function clenv_pose_dependent_evars(with_evars, clenv) {
  var dep_mvs = Clenv$ReactTemplate.clenv_dependent(clenv);
  var env = clenv[/* env */0];
  var sigma = clenv[/* evd */1];
  if (!Curry._1(Util$ReactTemplate.List[/* is_empty */45], dep_mvs) && !with_evars) {
    var partial_arg = clenv[/* evd */1];
    throw [
          Logic$ReactTemplate.RefinerError,
          env,
          sigma,
          /* UnresolvedBindings */Block.__(1, [Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                      return Evd$ReactTemplate.meta_name(partial_arg, param);
                    }), dep_mvs)])
        ];
  }
  return Clenv$ReactTemplate.clenv_pose_metas_as_evars(clenv, dep_mvs);
}

function check_tc(evd) {
  var has_resolvable = [/* false */0];
  var check = function (_, evi) {
    var res = Typeclasses$ReactTemplate.is_resolvable(evi);
    if (res) {
      has_resolvable[0] = /* true */1;
      return Typeclasses$ReactTemplate.is_class_evar(evd, evi);
    } else {
      return /* false */0;
    }
  };
  var has_typeclass = Curry._2(Evar$ReactTemplate.$$Map[/* exists */12], check, Evd$ReactTemplate.undefined_map(evd));
  return /* tuple */[
          has_typeclass,
          has_resolvable[0]
        ];
}

function clenv_refine(with_evars, $staropt$star, clenv) {
  var with_classes = $staropt$star ? $staropt$star[0] : /* true */1;
  return Proofview$ReactTemplate.V82[/* tactic */0](/* None */0, (function (gl) {
                var clenv$1 = clenv_pose_dependent_evars(with_evars, clenv);
                var evd$prime;
                if (with_classes) {
                  var match = check_tc(clenv$1[/* evd */1]);
                  var evd$prime$1 = match[0] ? Typeclasses$ReactTemplate.resolve_typeclasses(/* Some */[/* false */0], /* Some */[Typeclasses$ReactTemplate.all_evars], /* None */0, /* None */0, /* Some */[1 - with_evars], clenv$1[/* env */0], clenv$1[/* evd */1]) : clenv$1[/* evd */1];
                  evd$prime = match[1] ? Typeclasses$ReactTemplate.mark_unresolvables(/* Some */[Typeclasses$ReactTemplate.all_goals], evd$prime$1) : evd$prime$1;
                } else {
                  evd$prime = clenv$1[/* evd */1];
                }
                var clenv_000 = /* env */clenv$1[/* env */0];
                var clenv_002 = /* templval */clenv$1[/* templval */2];
                var clenv_003 = /* templtyp */clenv$1[/* templtyp */3];
                var clenv$2 = /* record */[
                  clenv_000,
                  /* evd */evd$prime,
                  clenv_002,
                  clenv_003
                ];
                var partial_arg = Evd$ReactTemplate.clear_metas(evd$prime);
                var partial_arg$1 = clenv_cast_meta(clenv$2)(Clenv$ReactTemplate.clenv_value(clenv$2));
                return Refiner$ReactTemplate.tclTHEN((function (param) {
                                return Refiner$ReactTemplate.tclEVARS(partial_arg, param);
                              }), (function (param) {
                                return Tacmach$ReactTemplate.refine_no_check(partial_arg$1, param);
                              }))(gl);
              }));
}

function res_pf($staropt$star, $staropt$star$1, $staropt$star$2, clenv) {
  var with_evars = $staropt$star ? $staropt$star[0] : /* false */0;
  var with_classes = $staropt$star$1 ? $staropt$star$1[0] : /* true */1;
  var flags = $staropt$star$2 ? $staropt$star$2[0] : Unification$ReactTemplate.default_unify_flags(/* () */0);
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var clenv$1 = Clenv$ReactTemplate.clenv_unique_resolver(/* Some */[flags], clenv, gl);
                return clenv_refine(with_evars, /* Some */[with_classes], clenv$1);
              }));
}

var fail_quick_core_unif_flags_000 = /* modulo_conv_on_closed_terms : Some */[Names$ReactTemplate.full_transparent_state];

var fail_quick_core_unif_flags_008 = /* frozen_evars */Evar$ReactTemplate.$$Set[/* empty */0];

var fail_quick_core_unif_flags = /* record */[
  fail_quick_core_unif_flags_000,
  /* use_metas_eagerly_in_conv_on_closed_terms : false */0,
  /* use_evars_eagerly_in_conv_on_closed_terms : false */0,
  /* modulo_delta */Names$ReactTemplate.empty_transparent_state,
  /* modulo_delta_types */Names$ReactTemplate.full_transparent_state,
  /* check_applied_meta_types : false */0,
  /* use_pattern_unification : false */0,
  /* use_meta_bound_pattern_unification : true */1,
  fail_quick_core_unif_flags_008,
  /* restrict_conv_on_strict_subterms : false */0,
  /* modulo_betaiota : false */0,
  /* modulo_eta : true */1
];

var fail_quick_unif_flags = /* record */[
  /* core_unify_flags */fail_quick_core_unif_flags,
  /* merge_unify_flags */fail_quick_core_unif_flags,
  /* subterm_unify_flags */fail_quick_core_unif_flags,
  /* allow_K_in_toplevel_higher_order_unification : false */0,
  /* resolve_evars : false */0
];

function unify($staropt$star, m) {
  var flags = $staropt$star ? $staropt$star[0] : fail_quick_unif_flags;
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var env = Curry._1(Tacmach$ReactTemplate.New[/* pf_env */4], gl);
                var n = Curry._1(Tacmach$ReactTemplate.New[/* pf_concl */5], gl);
                var evd = Evd$ReactTemplate.clear_metas(Tacmach$ReactTemplate.New[/* project */3](gl));
                try {
                  return Proofview$ReactTemplate.Unsafe[/* tclEVARSADVANCE */1](Unification$ReactTemplate.w_unify(env, evd, /* CONV */0, /* Some */[flags], m, n));
                }
                catch (raw_e){
                  var e = Js_exn.internalToOCamlException(raw_e);
                  if (CErrors$ReactTemplate.noncritical(e)) {
                    return Proofview$ReactTemplate.tclZERO(/* None */0, e);
                  } else {
                    throw e;
                  }
                }
              }));
}

exports.unify = unify;
exports.clenv_refine = clenv_refine;
exports.res_pf = res_pf;
exports.clenv_pose_dependent_evars = clenv_pose_dependent_evars;
exports.clenv_value_cast_meta = clenv_value_cast_meta;
/* Evd-ReactTemplate Not a pure module */
