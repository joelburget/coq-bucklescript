// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Genarg$ReactTemplate = require("./genarg.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Geninterp$ReactTemplate = require("./geninterp.bs.js");

var ValMap = Curry._1(Geninterp$ReactTemplate.ValTMap, /* module */[]);

var print0_val_map = [ValMap[/* empty */0]];

function find_print_val_fun(tag) {
  try {
    return Curry._2(ValMap[/* find */3], tag, print0_val_map[0]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      var msg = function (s) {
        return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("print function not found for a value interpreted as "), Pp$ReactTemplate.str(s)), Pp$ReactTemplate.str("."));
      };
      return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, msg(Curry._1(Geninterp$ReactTemplate.Val[/* repr */2], tag)));
    } else {
      throw exn;
    }
  }
}

function generic_val_print(v) {
  return Curry._1(find_print_val_fun(v[0]), v[1]);
}

function register_val_print0(s, pr) {
  print0_val_map[0] = Curry._3(ValMap[/* add */1], s, pr, print0_val_map[0]);
  return /* () */0;
}

function combine_needs(pr_pair, pr1, param) {
  switch (param.tag | 0) {
    case 0 : 
        var pr2 = param[0];
        return /* TopPrinterNeedsContext */Block.__(1, [(function (env, sigma) {
                      return Curry._2(pr_pair, Curry._2(pr1, env, sigma), Curry._1(pr2, /* () */0));
                    })]);
    case 1 : 
        var pr2$1 = param[0];
        return /* TopPrinterNeedsContext */Block.__(1, [(function (env, sigma) {
                      return Curry._2(pr_pair, Curry._2(pr1, env, sigma), Curry._2(pr2$1, env, sigma));
                    })]);
    case 2 : 
        var match = param[0];
        var printer = match[/* printer */2];
        var default_ensure_surrounded = match[/* default_ensure_surrounded */1];
        return /* TopPrinterNeedsContext */Block.__(1, [(function (env, sigma) {
                      return Curry._2(pr_pair, Curry._2(pr1, env, sigma), Curry._3(printer, env, sigma, default_ensure_surrounded));
                    })]);
    
  }
}

function combine(pr_pair, pr1, v2) {
  switch (pr1.tag | 0) {
    case 0 : 
        var pr_pair$1 = pr_pair;
        var pr1$1 = pr1[0];
        var param = generic_val_print(v2);
        switch (param.tag | 0) {
          case 0 : 
              var pr2 = param[0];
              return /* TopPrinterBasic */Block.__(0, [(function () {
                            return Curry._2(pr_pair$1, Curry._1(pr1$1, /* () */0), Curry._1(pr2, /* () */0));
                          })]);
          case 1 : 
              var pr2$1 = param[0];
              return /* TopPrinterNeedsContext */Block.__(1, [(function (env, sigma) {
                            return Curry._2(pr_pair$1, Curry._1(pr1$1, /* () */0), Curry._2(pr2$1, env, sigma));
                          })]);
          case 2 : 
              var match = param[0];
              var printer = match[/* printer */2];
              var default_ensure_surrounded = match[/* default_ensure_surrounded */1];
              return /* TopPrinterNeedsContext */Block.__(1, [(function (env, sigma) {
                            return Curry._2(pr_pair$1, Curry._1(pr1$1, /* () */0), Curry._3(printer, env, sigma, default_ensure_surrounded));
                          })]);
          
        }
    case 1 : 
        return combine_needs(pr_pair, pr1[0], generic_val_print(v2));
    case 2 : 
        var match$1 = pr1[0];
        var printer$1 = match$1[/* printer */2];
        var default_ensure_surrounded$1 = match$1[/* default_ensure_surrounded */1];
        return combine_needs(pr_pair, (function (env, sigma) {
                      return Curry._3(printer$1, env, sigma, default_ensure_surrounded$1);
                    }), generic_val_print(v2));
    
  }
}

function pr_cons(a, b) {
  return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(a, Pp$ReactTemplate.spc(/* () */0)), b);
}

register_val_print0(Geninterp$ReactTemplate.Val[/* typ_list */4], (function (param) {
        if (param) {
          return List.fold_left((function (param, param$1) {
                        return combine(pr_cons, param, param$1);
                      }), generic_val_print(param[0]), param[1]);
        } else {
          return /* TopPrinterBasic */Block.__(0, [Pp$ReactTemplate.mt]);
        }
      }));

register_val_print0(Geninterp$ReactTemplate.Val[/* typ_opt */5], (function (param) {
        if (param) {
          return generic_val_print(param[0]);
        } else {
          return /* TopPrinterBasic */Block.__(0, [Pp$ReactTemplate.mt]);
        }
      }));

function pr_pair(a, b) {
  return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(a, Pp$ReactTemplate.spc(/* () */0)), b);
}

register_val_print0(Geninterp$ReactTemplate.Val[/* typ_pair */6], (function (param) {
        return combine(pr_pair, generic_val_print(param[0]), param[1]);
      }));

function $$default(wit) {
  if (wit.tag) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "genprint.ml",
            128,
            9
          ]
        ];
  } else {
    var name = Curry._1(Genarg$ReactTemplate.ArgT[/* repr */1], wit[0]);
    var printer_000 = function () {
      return /* PrinterBasic */Block.__(0, [(function () {
                    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("<genarg:"), Pp$ReactTemplate.str(name)), Pp$ReactTemplate.str(">"));
                  })]);
    };
    var printer_001 = function () {
      return /* PrinterBasic */Block.__(0, [(function () {
                    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("<genarg:"), Pp$ReactTemplate.str(name)), Pp$ReactTemplate.str(">"));
                  })]);
    };
    var printer_002 = function () {
      return /* TopPrinterBasic */Block.__(0, [(function () {
                    return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("<genarg:"), Pp$ReactTemplate.str(name)), Pp$ReactTemplate.str(">"));
                  })]);
    };
    var printer = /* record */[
      printer_000,
      printer_001,
      printer_002
    ];
    return /* Some */[printer];
  }
}

var PrintObj = /* module */[
  /* name */"printer",
  /* default */$$default
];

var Print = Genarg$ReactTemplate.Register(PrintObj);

function register_print0(wit, raw, glb, top) {
  var printer = /* record */[
    /* raw */raw,
    /* glb */glb,
    /* top */top
  ];
  Curry._2(Print[/* register0 */0], wit, printer);
  var match = Geninterp$ReactTemplate.val_tag(/* Topwit */Block.__(2, [wit]));
  if (match.tag) {
    return /* () */0;
  } else if (wit.tag) {
    return /* () */0;
  } else {
    var t = match[0];
    if (Curry._1(Geninterp$ReactTemplate.Val[/* repr */2], t) === Curry._1(Genarg$ReactTemplate.ArgT[/* repr */1], wit[0])) {
      return register_val_print0(t, top);
    } else {
      return /* () */0;
    }
  }
}

function register_vernac_print0(wit, raw) {
  var glb = function () {
    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("vernac argument needs not globwit printer."));
  };
  var top = function () {
    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("vernac argument needs not wit printer."));
  };
  var printer = /* record */[
    /* raw */raw,
    /* glb */glb,
    /* top */top
  ];
  return Curry._2(Print[/* register0 */0], wit, printer);
}

function raw_print(wit, v) {
  return Curry._1(Curry._1(Print[/* obj */1], wit)[/* raw */0], v);
}

function glb_print(wit, v) {
  return Curry._1(Curry._1(Print[/* obj */1], wit)[/* glb */1], v);
}

function top_print(wit, v) {
  return Curry._1(Curry._1(Print[/* obj */1], wit)[/* top */2], v);
}

function generic_raw_print(param) {
  return raw_print(param[0][0], param[1]);
}

function generic_glb_print(param) {
  return glb_print(param[0][0], param[1]);
}

function generic_top_print(param) {
  return top_print(param[0][0], param[1]);
}

exports.raw_print = raw_print;
exports.glb_print = glb_print;
exports.top_print = top_print;
exports.register_print0 = register_print0;
exports.register_val_print0 = register_val_print0;
exports.register_vernac_print0 = register_vernac_print0;
exports.generic_raw_print = generic_raw_print;
exports.generic_glb_print = generic_glb_print;
exports.generic_top_print = generic_top_print;
exports.generic_val_print = generic_val_print;
/* ValMap Not a pure module */
