// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Pp$ReactTemplate = require("../src/pp.bs.js");
var Evd$ReactTemplate = require("../src/evd.bs.js");
var Auto$ReactTemplate = require("./auto.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Clenv$ReactTemplate = require("../proofs/clenv.bs.js");
var Hints$ReactTemplate = require("./hints.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var CErrors$ReactTemplate = require("../src/cErrors.bs.js");
var EConstr$ReactTemplate = require("../src/eConstr.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Explore$ReactTemplate = require("../src/explore.bs.js");
var Refiner$ReactTemplate = require("../src/refiner.bs.js");
var Tacmach$ReactTemplate = require("../proofs/tacmach.bs.js");
var Tactics$ReactTemplate = require("../src/tactics.bs.js");
var Termops$ReactTemplate = require("../src/termops.bs.js");
var Clenvtac$ReactTemplate = require("../proofs/clenvtac.bs.js");
var Feedback$ReactTemplate = require("../src/feedback.bs.js");
var Goptions$ReactTemplate = require("../src/goptions.bs.js");
var Locusops$ReactTemplate = require("../src/locusops.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Proofview$ReactTemplate = require("../src/proofview.bs.js");
var Tacticals$ReactTemplate = require("./tacticals.bs.js");
var Universes$ReactTemplate = require("../src/universes.bs.js");
var Reductionops$ReactTemplate = require("../src/reductionops.bs.js");

var eauto_unif_flags = Auto$ReactTemplate.auto_flags_of_state(Names$ReactTemplate.full_transparent_state);

function e_give_exact($staropt$star, c) {
  var flags = $staropt$star ? $staropt$star[0] : eauto_unif_flags;
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var t1 = Tacmach$ReactTemplate.New[/* pf_unsafe_type_of */6](gl, c);
                var t2 = Curry._1(Tacmach$ReactTemplate.New[/* pf_concl */5], gl);
                var sigma = Tacmach$ReactTemplate.New[/* project */3](gl);
                if (Termops$ReactTemplate.occur_existential(sigma, t1) || Termops$ReactTemplate.occur_existential(sigma, t2)) {
                  return Tacticals$ReactTemplate.New[/* tclTHEN */2](Clenvtac$ReactTemplate.unify(/* Some */[flags], t1), Tactics$ReactTemplate.exact_no_check(c));
                } else {
                  return Tactics$ReactTemplate.exact_check(c);
                }
              }));
}

function assumption(id) {
  return e_give_exact(/* None */0, EConstr$ReactTemplate.mkVar(id));
}

var e_assumption = Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
        return Tacticals$ReactTemplate.New[/* tclFIRST */23](Curry._2(Util$ReactTemplate.List[/* map */10], assumption, Tacmach$ReactTemplate.New[/* pf_ids_of_hyps */11](gl)));
      }));

var registered_e_assumption = Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
        return Tacticals$ReactTemplate.New[/* tclFIRST */23](Curry._2(Util$ReactTemplate.List[/* map */10], (function (id) {
                          return e_give_exact(/* None */0, EConstr$ReactTemplate.mkVar(id));
                        }), Tacmach$ReactTemplate.New[/* pf_ids_of_hyps */11](gl)));
      }));

function first_goal(gls) {
  var gl = gls[/* it */0];
  var sig_0 = gls[/* sigma */1];
  if (Curry._1(Util$ReactTemplate.List[/* is_empty */45], gl)) {
    CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("first_goal"));
  }
  return /* record */[
          /* it */Curry._1(Util$ReactTemplate.List[/* hd */1], gl),
          /* sigma */sig_0
        ];
}

function apply_tac_list(tac, glls) {
  var match = Tacmach$ReactTemplate.unpackage(glls);
  var lg = match[1];
  var sigr = match[0];
  if (lg) {
    var gl = Tacmach$ReactTemplate.apply_sig_tac(sigr, tac, lg[0]);
    return Tacmach$ReactTemplate.repackage(sigr, Util$ReactTemplate.$at(gl, lg[1]));
  } else {
    return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("apply_tac_list"));
  }
}

function one_step(l, gl) {
  var partial_arg = Proofview$ReactTemplate.V82[/* of_tactic */7];
  return Util$ReactTemplate.$at(/* :: */[
              (function (param) {
                  return partial_arg(Tactics$ReactTemplate.intro, param);
                }),
              /* [] */0
            ], Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (c) {
                        var partial_arg = Tactics$ReactTemplate.Simple[/* eapply */2](c);
                        var partial_arg$1 = Proofview$ReactTemplate.V82[/* of_tactic */7];
                        return (function (param) {
                            return partial_arg$1(partial_arg, param);
                          });
                      }), Curry._2(Util$ReactTemplate.List[/* map */10], EConstr$ReactTemplate.mkVar, Tacmach$ReactTemplate.pf_ids_of_hyps(gl))), Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* map */10], (function (c) {
                            var partial_arg = Tactics$ReactTemplate.Simple[/* eapply */2](c);
                            var partial_arg$1 = Proofview$ReactTemplate.V82[/* of_tactic */7];
                            return (function (param) {
                                return partial_arg$1(partial_arg, param);
                              });
                          }), l), Curry._2(Util$ReactTemplate.List[/* map */10], (function (c) {
                            var partial_arg = e_give_exact(/* None */0, EConstr$ReactTemplate.mkVar(c));
                            var partial_arg$1 = Proofview$ReactTemplate.V82[/* of_tactic */7];
                            return (function (param) {
                                return partial_arg$1(partial_arg, param);
                              });
                          }), Tacmach$ReactTemplate.pf_ids_of_hyps(gl)))));
}

function prolog(l, n, gl) {
  if (n <= 0) {
    CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("prolog - failure"));
  }
  var partial_arg = n - 1 | 0;
  var prol = function (param) {
    return prolog(l, partial_arg, param);
  };
  return Curry._1(Tacticals$ReactTemplate.tclFIRST(Curry._2(Util$ReactTemplate.List[/* map */10], (function (t) {
                        return Tacticals$ReactTemplate.tclTHEN(t, prol);
                      }), one_step(l, gl))), gl);
}

function prolog_tac(l, n) {
  return Proofview$ReactTemplate.V82[/* tactic */0](/* None */0, (function (gl) {
                var map = function (c) {
                  var match = Curry._2(c, Tacmach$ReactTemplate.pf_env(gl), Tacmach$ReactTemplate.project(gl));
                  var partial_arg = /* tuple */[
                    /* false */0,
                    /* true */1
                  ];
                  var c$1 = Curry._1(Tacmach$ReactTemplate.pf_apply((function (param, param$1, param$2) {
                              return Hints$ReactTemplate.prepare_hint(/* false */0, partial_arg, param, param$1, param$2);
                            }), gl), /* tuple */[
                        match[0],
                        match[1]
                      ]);
                  var env = Tacmach$ReactTemplate.pf_env(gl);
                  var param = c$1;
                  if (param.tag) {
                    return param[0];
                  } else {
                    return EConstr$ReactTemplate.of_constr(Universes$ReactTemplate.fresh_global_instance(/* None */0, env, param[0])[0]);
                  }
                };
                var l$1 = Curry._2(Util$ReactTemplate.List[/* map */10], map, l);
                try {
                  return prolog(l$1, n, gl);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === CErrors$ReactTemplate.UserError) {
                    var match = exn[1];
                    if (match) {
                      if (match[0] === "Refiner.tclFIRST") {
                        return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Prolog.prolog"], Pp$ReactTemplate.str("Prolog failed."));
                      } else {
                        throw exn;
                      }
                    } else {
                      throw exn;
                    }
                  } else {
                    throw exn;
                  }
                }
              }));
}

function unify_e_resolve(poly, flags, param) {
  var clenv = param[1];
  var c = param[0];
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var match = Auto$ReactTemplate.connect_hint_clenv(poly, c, clenv, gl);
                var clenv$prime = Clenv$ReactTemplate.clenv_unique_resolver(/* Some */[flags], match[0], gl);
                return Curry._2(Proofview$ReactTemplate.tclTHEN, Proofview$ReactTemplate.Unsafe[/* tclEVARUNIVCONTEXT */10](Evd$ReactTemplate.evar_universe_context(clenv$prime[/* evd */1])), Tactics$ReactTemplate.Simple[/* eapply */2](match[1]));
              }));
}

function hintmap_of(sigma, secvars, hdc, concl) {
  if (hdc) {
    var hdc$1 = hdc[0];
    if (Termops$ReactTemplate.occur_existential(sigma, concl)) {
      return (function (db) {
          return Hints$ReactTemplate.Hint_db[/* map_existential */4](sigma, secvars, hdc$1, concl, db);
        });
    } else {
      return (function (db) {
          return Hints$ReactTemplate.Hint_db[/* map_auto */6](sigma, secvars, hdc$1, concl, db);
        });
    }
  } else {
    return (function (db) {
        return Hints$ReactTemplate.Hint_db[/* map_none */2](secvars, db);
      });
  }
}

function e_trivial_fail_db(db_list, local_db) {
  var next = Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
          var d = Tacmach$ReactTemplate.New[/* pf_last_hyp */16](gl);
          var hintl = Hints$ReactTemplate.make_resolve_hyp(Curry._1(Tacmach$ReactTemplate.New[/* pf_env */4], gl), Tacmach$ReactTemplate.New[/* project */3](gl), d);
          return e_trivial_fail_db(db_list, Hints$ReactTemplate.Hint_db[/* add_list */8](Curry._1(Tacmach$ReactTemplate.New[/* pf_env */4], gl), Tacmach$ReactTemplate.New[/* project */3](gl), hintl, local_db));
        }));
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var secvars = Auto$ReactTemplate.compute_secvars(gl);
                var tacl_001 = /* :: */[
                  Tacticals$ReactTemplate.New[/* tclTHEN */2](Tactics$ReactTemplate.intro, next),
                  Curry._2(Util$ReactTemplate.List[/* map */10], (function (prim) {
                          return prim[0];
                        }), e_trivial_resolve(Curry._1(Tacmach$ReactTemplate.New[/* pf_env */4], gl), Tacmach$ReactTemplate.New[/* project */3](gl), db_list, local_db, secvars, Curry._1(Tacmach$ReactTemplate.New[/* pf_concl */5], gl)))
                ];
                var tacl = /* :: */[
                  registered_e_assumption,
                  tacl_001
                ];
                return Tacticals$ReactTemplate.New[/* tclFIRST */23](Curry._2(Util$ReactTemplate.List[/* map */10], Tacticals$ReactTemplate.New[/* tclCOMPLETE */31], tacl));
              }));
}

function e_my_find_search(env, sigma, db_list, local_db, secvars, hdc, concl) {
  var hint_of_db = hintmap_of(sigma, secvars, hdc, concl);
  var hintl = Curry._2(Util$ReactTemplate.List[/* map_append */113], (function (db) {
          var flags = Auto$ReactTemplate.auto_flags_of_state(Hints$ReactTemplate.Hint_db[/* transparent_state */13](db));
          return Curry._2(Util$ReactTemplate.List[/* map */10], (function (x) {
                        return /* tuple */[
                                flags,
                                x
                              ];
                      }), Curry._1(hint_of_db, db));
        }), /* :: */[
        local_db,
        db_list
      ]);
  var tac_of_hint = function (param) {
    var match = param[1];
    var t = match[/* code */6];
    var p = match[/* pat */2];
    var poly = match[/* poly */1];
    var st = param[0];
    var match$1 = Hints$ReactTemplate.repr_hint(t);
    var b;
    b = match$1.tag === 4 ? 1 : match[/* pri */0];
    var tac = function (param) {
      switch (param.tag | 0) {
        case 0 : 
            var match = param[0];
            return Auto$ReactTemplate.unify_resolve(poly, st, /* tuple */[
                        match[0],
                        match[1]
                      ]);
        case 1 : 
            var match$1 = param[0];
            return unify_e_resolve(poly, st, /* tuple */[
                        match$1[0],
                        match$1[1]
                      ]);
        case 2 : 
            var match$2 = param[0];
            var poly$1 = poly;
            var param$1 = /* tuple */[
              match$2[0],
              match$2[1]
            ];
            var clenv = param$1[1];
            var c = param$1[0];
            return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                          var match = Auto$ReactTemplate.connect_hint_clenv(poly$1, c, clenv, gl);
                          return Tacticals$ReactTemplate.New[/* tclTHEN */2](Proofview$ReactTemplate.Unsafe[/* tclEVARUNIVCONTEXT */10](Evd$ReactTemplate.evar_universe_context(match[0][/* evd */1])), e_give_exact(/* None */0, match[1]));
                        }));
        case 3 : 
            var match$3 = param[0];
            return Tacticals$ReactTemplate.New[/* tclTHEN */2](unify_e_resolve(poly, st, /* tuple */[
                            match$3[0],
                            match$3[1]
                          ]), e_trivial_fail_db(db_list, local_db));
        case 4 : 
            return Tactics$ReactTemplate.reduce(/* Unfold */Block.__(5, [/* :: */[
                            /* tuple */[
                              /* AllOccurrences */0,
                              param[0]
                            ],
                            /* [] */0
                          ]]), Locusops$ReactTemplate.onConcl);
        case 5 : 
            return Auto$ReactTemplate.conclPattern(concl, p, param[0]);
        
      }
    };
    var tac$1 = Hints$ReactTemplate.run_hint(t, tac);
    return /* tuple */[
            b,
            /* tuple */[
              tac$1,
              Block.__(246, [(function () {
                      return Hints$ReactTemplate.pr_hint(env, sigma, t);
                    })])
            ]
          ];
  };
  return Curry._2(Util$ReactTemplate.List[/* map */10], tac_of_hint, hintl);
}

function e_trivial_resolve(env, sigma, db_list, local_db, secvars, gl) {
  var hd;
  try {
    hd = /* Some */[Hints$ReactTemplate.decompose_app_bound(sigma, gl)];
  }
  catch (exn){
    if (exn === Hints$ReactTemplate.Bound) {
      hd = /* None */0;
    } else {
      throw exn;
    }
  }
  try {
    var l = e_my_find_search(env, sigma, db_list, local_db, secvars, hd, gl);
    return Curry._2(Util$ReactTemplate.List[/* map */10], (function (prim) {
                  return prim[1];
                }), Curry._2(Util$ReactTemplate.List[/* filter */27], (function (param) {
                      return +(param[0] === 0);
                    }), l));
  }
  catch (exn$1){
    if (exn$1 === Caml_builtin_exceptions.not_found) {
      return /* [] */0;
    } else {
      throw exn$1;
    }
  }
}

function e_possible_resolve(env, sigma, db_list, local_db, secvars, gl) {
  var hd;
  try {
    hd = /* Some */[Hints$ReactTemplate.decompose_app_bound(sigma, gl)];
  }
  catch (exn){
    if (exn === Hints$ReactTemplate.Bound) {
      hd = /* None */0;
    } else {
      throw exn;
    }
  }
  try {
    return Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                  var match = param[1];
                  return /* tuple */[
                          match[0],
                          param[0],
                          match[1]
                        ];
                }), e_my_find_search(env, sigma, db_list, local_db, secvars, hd, gl));
  }
  catch (exn$1){
    if (exn$1 === Caml_builtin_exceptions.not_found) {
      return /* [] */0;
    } else {
      throw exn$1;
    }
  }
}

function find_first_goal(gls) {
  try {
    return first_goal(gls);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === CErrors$ReactTemplate.UserError) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "eauto.ml",
              199,
              41
            ]
          ];
    } else {
      throw exn;
    }
  }
}

function success(s) {
  return Curry._1(Util$ReactTemplate.List[/* is_empty */45], Evd$ReactTemplate.sig_it(s[/* tacres */2]));
}

function filter_tactics(glls, l) {
  var aux = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var tacl = param[1];
        var match = param[0];
        var tac = match[0];
        try {
          var partial_arg = Proofview$ReactTemplate.V82[/* of_tactic */7];
          var lgls = apply_tac_list((function(tac,partial_arg){
              return function (param) {
                return partial_arg(tac, param);
              }
              }(tac,partial_arg)), glls);
          return /* :: */[
                  /* tuple */[
                    lgls,
                    match[1],
                    match[2]
                  ],
                  aux(tacl)
                ];
        }
        catch (raw_e){
          var e = Js_exn.internalToOCamlException(raw_e);
          if (CErrors$ReactTemplate.noncritical(e)) {
            var e$1 = CErrors$ReactTemplate.push(e);
            Refiner$ReactTemplate.catch_failerror(e$1);
            _param = tacl;
            continue ;
            
          } else {
            throw e;
          }
        }
      } else {
        return /* [] */0;
      }
    };
  };
  return aux(l);
}

function compare(s, s$prime) {
  var d = s$prime[/* depth */1] - s[/* depth */1] | 0;
  var d$prime = Caml_primitive.caml_int_compare(s[/* priority */0], s$prime[/* priority */0]);
  var nbgoals = function (s) {
    return Curry._1(Util$ReactTemplate.List[/* length */0], Evd$ReactTemplate.sig_it(s[/* tacres */2]));
  };
  if (d !== 0) {
    return d;
  } else if (d$prime !== 0) {
    return d$prime;
  } else {
    return Caml_primitive.caml_int_compare(nbgoals(s), nbgoals(s$prime));
  }
}

function branching(s) {
  if (s[/* depth */1]) {
    var ps = s[/* prev */6] ? /* State */[s] : /* Unknown */0;
    var lg = s[/* tacres */2];
    var nbgl = Curry._1(Util$ReactTemplate.List[/* length */0], Evd$ReactTemplate.sig_it(lg));
    if (nbgl <= 0) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "eauto.ml",
              262,
              6
            ]
          ];
    }
    var g = find_first_goal(lg);
    var hyps = Tacmach$ReactTemplate.pf_ids_of_hyps(g);
    var secvars = Hints$ReactTemplate.secvars_of_hyps(Tacmach$ReactTemplate.pf_hyps(g));
    var map_assum = function (id) {
      return /* tuple */[
              e_give_exact(/* None */0, EConstr$ReactTemplate.mkVar(id)),
              -1,
              Block.__(246, [(function () {
                      return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("exact"), Pp$ReactTemplate.spc(/* () */0)), Names$ReactTemplate.Id[/* print */8](id));
                    })])
            ];
    };
    var tacs = Curry._2(Util$ReactTemplate.List[/* map */10], map_assum, hyps);
    var l = filter_tactics(s[/* tacres */2], tacs);
    var assumption_tacs = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            return /* record */[
                    /* priority */param[1],
                    /* depth */s[/* depth */1],
                    /* tacres */param[0],
                    /* last_tactic */param[2],
                    /* dblist */s[/* dblist */4],
                    /* localdb */Curry._1(Util$ReactTemplate.List[/* tl */2], s[/* localdb */5]),
                    /* prev */ps,
                    /* local_lemmas */s[/* local_lemmas */7]
                  ];
          }), l);
    var l$1 = filter_tactics(s[/* tacres */2], /* :: */[
          /* tuple */[
            Tactics$ReactTemplate.intro,
            -1,
            Block.__(246, [(function () {
                    return Pp$ReactTemplate.str("intro");
                  })])
          ],
          /* [] */0
        ]);
    var intro_tac = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            var lgls = param[0];
            var g$prime = first_goal(lgls);
            var hintl = Hints$ReactTemplate.make_resolve_hyp(Tacmach$ReactTemplate.pf_env(g$prime), Tacmach$ReactTemplate.project(g$prime), Tacmach$ReactTemplate.pf_last_hyp(g$prime));
            var ldb = Hints$ReactTemplate.Hint_db[/* add_list */8](Tacmach$ReactTemplate.pf_env(g$prime), Tacmach$ReactTemplate.project(g$prime), hintl, Curry._1(Util$ReactTemplate.List[/* hd */1], s[/* localdb */5]));
            return /* record */[
                    /* priority */param[1],
                    /* depth */s[/* depth */1],
                    /* tacres */lgls,
                    /* last_tactic */param[2],
                    /* dblist */s[/* dblist */4],
                    /* localdb : :: */[
                      ldb,
                      Curry._1(Util$ReactTemplate.List[/* tl */2], s[/* localdb */5])
                    ],
                    /* prev */ps,
                    /* local_lemmas */s[/* local_lemmas */7]
                  ];
          }), l$1);
    var concl = Reductionops$ReactTemplate.nf_evar(Tacmach$ReactTemplate.project(g), Tacmach$ReactTemplate.pf_concl(g));
    var l$2 = filter_tactics(s[/* tacres */2], e_possible_resolve(Tacmach$ReactTemplate.pf_env(g), Tacmach$ReactTemplate.project(g), s[/* dblist */4], Curry._1(Util$ReactTemplate.List[/* hd */1], s[/* localdb */5]), secvars, concl));
    var rec_tacs = Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
            var pp = param[2];
            var cost = param[1];
            var lgls = param[0];
            var nbgl$prime = Curry._1(Util$ReactTemplate.List[/* length */0], Evd$ReactTemplate.sig_it(lgls));
            if (nbgl$prime < nbgl) {
              return /* record */[
                      /* priority */cost,
                      /* depth */s[/* depth */1],
                      /* tacres */lgls,
                      /* last_tactic */pp,
                      /* dblist */s[/* dblist */4],
                      /* localdb */Curry._1(Util$ReactTemplate.List[/* tl */2], s[/* localdb */5]),
                      /* prev */ps,
                      /* local_lemmas */s[/* local_lemmas */7]
                    ];
            } else {
              var hyps = Tacmach$ReactTemplate.pf_hyps(g);
              var newlocal = Curry._2(Util$ReactTemplate.List[/* map */10], (function (gl) {
                      var gls_001 = /* sigma */lgls[/* sigma */1];
                      var gls = /* record */[
                        /* it */gl,
                        gls_001
                      ];
                      var hyps$prime = Tacmach$ReactTemplate.pf_hyps(gls);
                      if (hyps$prime === hyps) {
                        return Curry._1(Util$ReactTemplate.List[/* hd */1], s[/* localdb */5]);
                      } else {
                        return Hints$ReactTemplate.make_local_hint_db(Tacmach$ReactTemplate.pf_env(gls), Tacmach$ReactTemplate.project(gls), /* Some */[Names$ReactTemplate.full_transparent_state], /* true */1, s[/* local_lemmas */7]);
                      }
                    }), Curry._2(Util$ReactTemplate.List[/* firstn */104], (nbgl$prime - nbgl | 0) + 1 | 0, Evd$ReactTemplate.sig_it(lgls)));
              return /* record */[
                      /* priority */cost,
                      /* depth */s[/* depth */1] - 1 | 0,
                      /* tacres */lgls,
                      /* last_tactic */pp,
                      /* dblist */s[/* dblist */4],
                      /* localdb */Util$ReactTemplate.$at(newlocal, Curry._1(Util$ReactTemplate.List[/* tl */2], s[/* localdb */5])),
                      /* prev */ps,
                      /* local_lemmas */s[/* local_lemmas */7]
                    ];
            }
          }), l$2);
    return Curry._2(Util$ReactTemplate.List[/* sort */38], compare, Util$ReactTemplate.$at(assumption_tacs, Util$ReactTemplate.$at(intro_tac, rec_tacs)));
  } else {
    return /* [] */0;
  }
}

function pp(s) {
  var lzarg = s[/* last_tactic */3];
  var tag = lzarg.tag | 0;
  return Pp$ReactTemplate.hov(0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str(" depth="), Pp$ReactTemplate.$$int(s[/* depth */1])), Pp$ReactTemplate.spc(/* () */0)), tag === 250 ? lzarg[0] : (
                    tag === 246 ? CamlinternalLazy.force_lazy_block(lzarg) : lzarg
                  )));
}

var Search = Explore$ReactTemplate.Make([
      branching,
      success,
      pp
    ]);

var global_debug_eauto = [/* false */0];

var global_info_eauto = [/* false */0];

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"Debug Eauto",
      /* optkey : :: */[
        "Debug",
        /* :: */[
          "Eauto",
          /* [] */0
        ]
      ],
      /* optread */(function () {
          return global_debug_eauto[0];
        }),
      /* optwrite */(function (param) {
          global_debug_eauto[0] = param;
          return /* () */0;
        })
    ]);

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"Info Eauto",
      /* optkey : :: */[
        "Info",
        /* :: */[
          "Eauto",
          /* [] */0
        ]
      ],
      /* optread */(function () {
          return global_info_eauto[0];
        }),
      /* optwrite */(function (param) {
          global_info_eauto[0] = param;
          return /* () */0;
        })
    ]);

function mk_eauto_dbg(d) {
  if (d === /* Debug */0 || global_debug_eauto[0]) {
    return /* Debug */0;
  } else if (d === /* Info */1 || global_info_eauto[0]) {
    return /* Info */1;
  } else {
    return /* Off */2;
  }
}

function pr_info_nop(param) {
  if (param !== 1) {
    return /* () */0;
  } else {
    return Feedback$ReactTemplate.msg_info(/* None */0, Pp$ReactTemplate.str("idtac."));
  }
}

function pr_dbg_header(param) {
  switch (param) {
    case 0 : 
        return Feedback$ReactTemplate.msg_debug(/* None */0, Pp$ReactTemplate.str("(* debug eauto: *)"));
    case 1 : 
        return Feedback$ReactTemplate.msg_info(/* None */0, Pp$ReactTemplate.str("(* info eauto: *)"));
    case 2 : 
        return /* () */0;
    
  }
}

function pr_info(dbg, s) {
  if (dbg !== /* Info */1) {
    return /* () */0;
  } else {
    var loop = function (s) {
      var match = s[/* prev */6];
      if (typeof match === "number") {
        return s[/* depth */1];
      } else {
        var sp = match[0];
        var mindepth = loop(sp);
        var indent = Curry._2(Util$ReactTemplate.$$String[/* make */0], mindepth - sp[/* depth */1] | 0, /* " " */32);
        var lzarg = s[/* last_tactic */3];
        var tag = lzarg.tag | 0;
        Feedback$ReactTemplate.msg_info(/* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str(indent), tag === 250 ? lzarg[0] : (
                        tag === 246 ? CamlinternalLazy.force_lazy_block(lzarg) : lzarg
                      )), Pp$ReactTemplate.str(".")));
        return mindepth;
      }
    };
    loop(s);
    return /* () */0;
  }
}

function make_initial_state(dbg, n, gl, dblist, localdb, lems) {
  return /* record */[
          /* priority */0,
          /* depth */n,
          /* tacres */Tacticals$ReactTemplate.tclIDTAC(gl),
          /* last_tactic */Block.__(246, [(function () {
                  return Pp$ReactTemplate.mt(/* () */0);
                })]),
          /* dblist */dblist,
          /* localdb : :: */[
            localdb,
            /* [] */0
          ],
          /* prev */dbg === /* Info */1 ? /* Init */1 : /* Unknown */0,
          /* local_lemmas */lems
        ];
}

function e_search_auto(debug, param, lems, db_list, gl) {
  var local_db = Hints$ReactTemplate.make_local_hint_db(Tacmach$ReactTemplate.pf_env(gl), Tacmach$ReactTemplate.project(gl), /* Some */[Names$ReactTemplate.full_transparent_state], /* true */1, lems);
  var d = mk_eauto_dbg(debug);
  var tac = param[0] !== 0 ? (
      d !== 0 ? Search[/* depth_first */0] : Search[/* debug_depth_first */1]
    ) : (
      d !== 0 ? Search[/* breadth_first */2] : Search[/* debug_breadth_first */3]
    );
  try {
    pr_dbg_header(d);
    var s = Curry._1(tac, make_initial_state(d, param[1], gl, db_list, local_db, lems));
    pr_info(d, s);
    return s[/* tacres */2];
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      pr_info_nop(d);
      return CErrors$ReactTemplate.user_err(/* None */0, /* None */0, Pp$ReactTemplate.str("eauto: search failed"));
    } else {
      throw exn;
    }
  }
}

function eauto_with_bases($staropt$star, np, lems, db_list) {
  var debug = $staropt$star ? $staropt$star[0] : /* Off */2;
  return Tacticals$ReactTemplate.tclTRY((function (param) {
                return e_search_auto(debug, np, lems, db_list, param);
              }));
}

function eauto($staropt$star, np, lems, dbnames) {
  var debug = $staropt$star ? $staropt$star[0] : /* Off */2;
  var db_list = Hints$ReactTemplate.make_db_list(dbnames);
  return Tacticals$ReactTemplate.tclTRY((function (param) {
                return e_search_auto(debug, np, lems, db_list, param);
              }));
}

function gen_eauto($staropt$star, np, lems, param) {
  var debug = $staropt$star ? $staropt$star[0] : /* Off */2;
  if (param) {
    return Proofview$ReactTemplate.V82[/* tactic */0](/* None */0, eauto(/* Some */[debug], np, lems, param[0]));
  } else {
    var partial_arg = /* Some */[debug];
    return Proofview$ReactTemplate.V82[/* tactic */0](/* None */0, (function (param) {
                  var $staropt$star = partial_arg;
                  var n = np;
                  var lems$1 = lems;
                  var gl = param;
                  var debug = $staropt$star ? $staropt$star[0] : /* Off */2;
                  var db_list = Hints$ReactTemplate.current_pure_db(/* () */0);
                  return Tacticals$ReactTemplate.tclTRY((function (param) {
                                  return e_search_auto(debug, n, lems$1, db_list, param);
                                }))(gl);
                }));
  }
}

function make_depth(param) {
  if (param) {
    return param[0];
  } else {
    return Auto$ReactTemplate.default_search_depth[0];
  }
}

function make_dimension(n, param) {
  if (param) {
    return /* tuple */[
            /* false */0,
            param[0]
          ];
  } else {
    return /* tuple */[
            /* true */1,
            make_depth(n)
          ];
  }
}

function autounfold(db, cls) {
  return Proofview$ReactTemplate.V82[/* tactic */0](/* None */0, (function (gl) {
                var cls$1 = Locusops$ReactTemplate.concrete_clause_of((function () {
                        return Tacmach$ReactTemplate.pf_ids_of_hyps(gl);
                      }), cls);
                var tac = function (param, param$1, param$2) {
                  var db$1 = db;
                  var cls = param$1;
                  var gl = param$2;
                  var unfolds = Curry._1(Util$ReactTemplate.List[/* concat */7], Curry._2(Util$ReactTemplate.List[/* map */10], (function (dbname) {
                              var db;
                              try {
                                db = Hints$ReactTemplate.searchtable_map(dbname);
                              }
                              catch (exn){
                                if (exn === Caml_builtin_exceptions.not_found) {
                                  db = CErrors$ReactTemplate.user_err(/* None */0, /* Some */["autounfold"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Unknown database "), Pp$ReactTemplate.str(dbname)));
                                } else {
                                  throw exn;
                                }
                              }
                              var match = Hints$ReactTemplate.Hint_db[/* unfolds */17](db);
                              var hyps = Tacmach$ReactTemplate.pf_ids_of_hyps(gl);
                              var ids = Curry._2(Names$ReactTemplate.Id[/* Set */9][/* filter */16], (function (id) {
                                      return Curry._2(Util$ReactTemplate.List[/* mem */24], id, hyps);
                                    }), match[0]);
                              return Curry._3(Names$ReactTemplate.Cset[/* fold */13], (function (cst) {
                                            var partial_arg_001 = /* EvalConstRef */Block.__(1, [cst]);
                                            var partial_arg = /* tuple */[
                                              /* AllOccurrences */0,
                                              partial_arg_001
                                            ];
                                            return (function (param) {
                                                return /* :: */[
                                                        partial_arg,
                                                        param
                                                      ];
                                              });
                                          }), match[1], Curry._3(Names$ReactTemplate.Id[/* Set */9][/* fold */13], (function (id) {
                                                var partial_arg_001 = /* EvalVarRef */Block.__(0, [id]);
                                                var partial_arg = /* tuple */[
                                                  /* AllOccurrences */0,
                                                  partial_arg_001
                                                ];
                                                return (function (param) {
                                                    return /* :: */[
                                                            partial_arg,
                                                            param
                                                          ];
                                                  });
                                              }), ids, /* [] */0));
                            }), db$1));
                  return Proofview$ReactTemplate.V82[/* of_tactic */7](Tactics$ReactTemplate.unfold_option(unfolds)(cls), gl);
                };
                return Curry._1(Tacticals$ReactTemplate.tclMAP((function (param) {
                                  if (param.tag) {
                                    var occs = param[0];
                                    return (function (param) {
                                        return tac(occs, /* None */0, param);
                                      });
                                  } else {
                                    var occs$1 = param[1];
                                    var partial_arg = /* Some */[/* tuple */[
                                        param[0],
                                        param[2]
                                      ]];
                                    return (function (param) {
                                        return tac(occs$1, partial_arg, param);
                                      });
                                  }
                                }), cls$1), gl);
              }));
}

function autounfold_tac(db, cls) {
  return Curry._2(Proofview$ReactTemplate.Notations[/* >>= */0], Curry._1(Proofview$ReactTemplate.tclUNIT, /* () */0), (function () {
                var dbs;
                if (db) {
                  var l = db[0];
                  dbs = l ? l : /* :: */[
                      "core",
                      /* [] */0
                    ];
                } else {
                  dbs = Curry._1(Util$ReactTemplate.$$String[/* Set */38][/* elements */19], Hints$ReactTemplate.current_db_names(/* () */0));
                }
                return autounfold(dbs, cls);
              }));
}

function unfold_head(env, sigma, param, c) {
  var csts = param[1];
  var ids = param[0];
  var aux = function (c) {
    var match = EConstr$ReactTemplate.kind(sigma, c);
    var exit = 0;
    switch (match.tag | 0) {
      case 1 : 
          var id = match[0];
          if (Curry._2(Names$ReactTemplate.Id[/* Set */9][/* mem */2], id, ids)) {
            var match$1 = Environ$ReactTemplate.named_body(id, env);
            if (match$1) {
              return /* tuple */[
                      /* true */1,
                      EConstr$ReactTemplate.of_constr(match$1[0])
                    ];
            } else {
              return /* tuple */[
                      /* false */0,
                      c
                    ];
            }
          } else {
            exit = 1;
          }
          break;
      case 9 : 
          var args = match[1];
          var f = match[0];
          var match$2 = aux(f);
          if (match$2[0] !== 0) {
            return /* tuple */[
                    /* true */1,
                    Reductionops$ReactTemplate.whd_betaiota(sigma, EConstr$ReactTemplate.mkApp(/* tuple */[
                              match$2[1],
                              args
                            ]))
                  ];
          } else {
            var match$3 = Util$ReactTemplate.$$Array[/* fold_left_i */38]((function (_, param, arg) {
                    var acc = param[1];
                    var done_ = param[0];
                    if (done_) {
                      return /* tuple */[
                              done_,
                              /* :: */[
                                arg,
                                acc
                              ]
                            ];
                    } else {
                      var match = aux(arg);
                      if (match[0] !== 0) {
                        return /* tuple */[
                                /* true */1,
                                /* :: */[
                                  match[1],
                                  acc
                                ]
                              ];
                      } else {
                        return /* tuple */[
                                /* false */0,
                                /* :: */[
                                  arg,
                                  acc
                                ]
                              ];
                      }
                    }
                  }), /* tuple */[
                  /* false */0,
                  /* [] */0
                ], args);
            if (match$3[0]) {
              return /* tuple */[
                      /* true */1,
                      EConstr$ReactTemplate.mkApp(/* tuple */[
                            f,
                            Util$ReactTemplate.$$Array[/* of_list */10](Curry._1(Util$ReactTemplate.List[/* rev */4], match$3[1]))
                          ])
                    ];
            } else {
              return /* tuple */[
                      /* false */0,
                      c
                    ];
            }
          }
          break;
      case 10 : 
          var match$4 = match[0];
          var cst = match$4[0];
          if (Curry._2(Names$ReactTemplate.Cset[/* mem */2], cst, csts)) {
            var u = EConstr$ReactTemplate.EInstance[/* kind */1](sigma, match$4[1]);
            return /* tuple */[
                    /* true */1,
                    EConstr$ReactTemplate.of_constr(Environ$ReactTemplate.constant_value_in(env, /* tuple */[
                              cst,
                              u
                            ]))
                  ];
          } else {
            exit = 1;
          }
          break;
      default:
        exit = 1;
    }
    if (exit === 1) {
      var done_ = [/* false */0];
      var c$prime = EConstr$ReactTemplate.map(sigma, (function (c) {
              if (done_[0]) {
                return c;
              } else {
                var match = aux(c);
                done_[0] = match[0];
                return match[1];
              }
            }), c);
      return /* tuple */[
              done_[0],
              c$prime
            ];
    }
    
  };
  return aux(c);
}

function autounfold_one(db, cl) {
  return Proofview$ReactTemplate.Goal[/* enter */9]((function (gl) {
                var env = Proofview$ReactTemplate.Goal[/* env */4](gl);
                var sigma = Tacmach$ReactTemplate.New[/* project */3](gl);
                var concl = Proofview$ReactTemplate.Goal[/* concl */2](gl);
                var st = Curry._3(Util$ReactTemplate.List[/* fold_left */13], (function (param, dbname) {
                        var db;
                        try {
                          db = Hints$ReactTemplate.searchtable_map(dbname);
                        }
                        catch (exn){
                          if (exn === Caml_builtin_exceptions.not_found) {
                            db = CErrors$ReactTemplate.user_err(/* None */0, /* Some */["autounfold"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Unknown database "), Pp$ReactTemplate.str(dbname)));
                          } else {
                            throw exn;
                          }
                        }
                        var match = Hints$ReactTemplate.Hint_db[/* unfolds */17](db);
                        return /* tuple */[
                                Curry._2(Names$ReactTemplate.Id[/* Set */9][/* union */6], match[0], param[0]),
                                Curry._2(Names$ReactTemplate.Cset[/* union */6], match[1], param[1])
                              ];
                      }), /* tuple */[
                      Names$ReactTemplate.Id[/* Set */9][/* empty */0],
                      Names$ReactTemplate.Cset[/* empty */0]
                    ], db);
                var match = unfold_head(env, sigma, st, cl ? Tacmach$ReactTemplate.New[/* pf_get_hyp_typ */15](cl[0][0], gl) : concl);
                var c$prime = match[1];
                if (match[0]) {
                  if (cl) {
                    return Tactics$ReactTemplate.change_in_hyp(/* None */0, (function (param, param$1) {
                                  return Tactics$ReactTemplate.make_change_arg(c$prime, param, param$1);
                                }), cl[0]);
                  } else {
                    return Tactics$ReactTemplate.convert_concl_no_check(c$prime, /* DEFAULTcast */2);
                  }
                } else {
                  return Tacticals$ReactTemplate.New[/* tclFAIL */3](0, Pp$ReactTemplate.str("Nothing to unfold"));
                }
              }));
}

exports.e_assumption = e_assumption;
exports.registered_e_assumption = registered_e_assumption;
exports.e_give_exact = e_give_exact;
exports.prolog_tac = prolog_tac;
exports.gen_eauto = gen_eauto;
exports.eauto_with_bases = eauto_with_bases;
exports.autounfold = autounfold;
exports.autounfold_tac = autounfold_tac;
exports.autounfold_one = autounfold_one;
exports.make_dimension = make_dimension;
/* eauto_unif_flags Not a pure module */
