// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Util$ReactTemplate = require("./util.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Range$ReactTemplate = require("./range.bs.js");
var UGraph$ReactTemplate = require("./uGraph.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var CEphemeron$ReactTemplate = require("./cEphemeron.bs.js");
var Declareops$ReactTemplate = require("./declareops.bs.js");
var Conv_oracle$ReactTemplate = require("./conv_oracle.bs.js");
var Opaqueproof$ReactTemplate = require("./opaqueproof.bs.js");
var Retroknowledge$ReactTemplate = require("./retroknowledge.bs.js");

function force_lazy_val(vk) {
  var match = vk[0];
  if (match) {
    try {
      return /* Some */[CEphemeron$ReactTemplate.get(match[0])];
    }
    catch (exn){
      if (exn === CEphemeron$ReactTemplate.InvalidKey) {
        return /* None */0;
      } else {
        throw exn;
      }
    }
  } else {
    return /* None */0;
  }
}

function dummy_lazy_val() {
  return [/* VKnone */0];
}

function build_lazy_val(vk, key) {
  vk[0] = /* VKvalue */[CEphemeron$ReactTemplate.create(key)];
  return /* () */0;
}

var empty_named_context_val_001 = /* env_named_map */Names$ReactTemplate.Id[/* Map */10][/* empty */0];

var empty_named_context_val = /* record */[
  /* env_named_ctx : [] */0,
  empty_named_context_val_001
];

var empty_rel_context_val = /* record */[
  /* env_rel_ctx : [] */0,
  /* env_rel_map */Range$ReactTemplate.empty
];

var empty_env_000 = /* env_globals : record */[
  /* env_constants */Names$ReactTemplate.Cmap_env[/* empty */0],
  /* env_inductives */Names$ReactTemplate.Mindmap_env[/* empty */0],
  /* env_modules */Names$ReactTemplate.MPmap[/* empty */0],
  /* env_modtypes */Names$ReactTemplate.MPmap[/* empty */0]
];

var empty_env_004 = /* env_stratification : record */[
  /* env_universes */UGraph$ReactTemplate.initial_universes,
  /* env_engagement : PredicativeSet */1
];

var empty_env_005 = /* env_typing_flags */Declareops$ReactTemplate.safe_flags(Conv_oracle$ReactTemplate.empty);

var empty_env = /* record */[
  empty_env_000,
  /* env_named_context */empty_named_context_val,
  /* env_rel_context */empty_rel_context_val,
  /* env_nb_rel */0,
  empty_env_004,
  empty_env_005,
  /* retroknowledge */Retroknowledge$ReactTemplate.initial_retroknowledge,
  /* indirect_pterms */Opaqueproof$ReactTemplate.empty_opaquetab
];

function nb_rel(env) {
  return env[/* env_nb_rel */3];
}

function push_rel_context_val(d, ctx) {
  return /* record */[
          /* env_rel_ctx */Context$ReactTemplate.Rel[/* add */2](d, ctx[/* env_rel_ctx */0]),
          /* env_rel_map */Range$ReactTemplate.cons(/* tuple */[
                d,
                [/* VKnone */0]
              ], ctx[/* env_rel_map */1])
        ];
}

function match_rel_context_val(ctx) {
  var match = ctx[/* env_rel_ctx */0];
  if (match) {
    var match$1 = Range$ReactTemplate.hd(ctx[/* env_rel_map */1]);
    var ctx_000 = /* env_rel_ctx */match[1];
    var ctx_001 = /* env_rel_map */Range$ReactTemplate.tl(ctx[/* env_rel_map */1]);
    var ctx$1 = /* record */[
      ctx_000,
      ctx_001
    ];
    return /* Some */[/* tuple */[
              match[0],
              match$1[1],
              ctx$1
            ]];
  } else {
    return /* None */0;
  }
}

function push_rel(d, env) {
  var newrecord = env.slice();
  newrecord[/* env_rel_context */2] = push_rel_context_val(d, env[/* env_rel_context */2]);
  newrecord[/* env_nb_rel */3] = env[/* env_nb_rel */3] + 1 | 0;
  return newrecord;
}

function lookup_rel(n, env) {
  try {
    return Range$ReactTemplate.get(env[/* env_rel_context */2][/* env_rel_map */1], n - 1 | 0)[0];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      throw Caml_builtin_exceptions.not_found;
    } else {
      throw exn;
    }
  }
}

function lookup_rel_val(n, env) {
  try {
    return Range$ReactTemplate.get(env[/* env_rel_context */2][/* env_rel_map */1], n - 1 | 0)[1];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      throw Caml_builtin_exceptions.not_found;
    } else {
      throw exn;
    }
  }
}

function rel_skipn(n, ctx) {
  return /* record */[
          /* env_rel_ctx */Curry._2(Util$ReactTemplate.List[/* skipn */107], n, ctx[/* env_rel_ctx */0]),
          /* env_rel_map */Range$ReactTemplate.skipn(n, ctx[/* env_rel_map */1])
        ];
}

function env_of_rel(n, env) {
  var newrecord = env.slice();
  newrecord[/* env_rel_context */2] = rel_skipn(n, env[/* env_rel_context */2]);
  newrecord[/* env_nb_rel */3] = env[/* env_nb_rel */3] - n | 0;
  return newrecord;
}

function push_named_context_val_val(d, rval, ctxt) {
  return /* record */[
          /* env_named_ctx */Context$ReactTemplate.Named[/* add */2](d, ctxt[/* env_named_ctx */0]),
          /* env_named_map */Curry._3(Names$ReactTemplate.Id[/* Map */10][/* add */3], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d), /* tuple */[
                d,
                rval
              ], ctxt[/* env_named_map */1])
        ];
}

function push_named_context_val(d, ctxt) {
  return push_named_context_val_val(d, [/* VKnone */0], ctxt);
}

function match_named_context_val(c) {
  var match = c[/* env_named_ctx */0];
  if (match) {
    var decl = match[0];
    var match$1 = Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl), c[/* env_named_map */1]);
    var map = Curry._2(Names$ReactTemplate.Id[/* Map */10][/* remove */5], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], decl), c[/* env_named_map */1]);
    var cval_000 = /* env_named_ctx */match[1];
    var cval = /* record */[
      cval_000,
      /* env_named_map */map
    ];
    return /* Some */[/* tuple */[
              decl,
              match$1[1],
              cval
            ]];
  } else {
    return /* None */0;
  }
}

function map_named_val(f, ctxt) {
  var fold = function (accu, d) {
    var d$prime = Curry._2(Context$ReactTemplate.Named[/* Declaration */0][/* map_constr */13], f, d);
    var accu$1 = d === d$prime ? accu : Curry._3(Names$ReactTemplate.Id[/* Map */10][/* modify */26], Curry._1(Context$ReactTemplate.Named[/* Declaration */0][/* get_id */0], d), (function (_, param) {
              return /* tuple */[
                      d$prime,
                      param[1]
                    ];
            }), accu);
    return /* tuple */[
            accu$1,
            d$prime
          ];
  };
  var match = Curry._3(Util$ReactTemplate.List[/* fold_left_map */116], fold, ctxt[/* env_named_map */1], ctxt[/* env_named_ctx */0]);
  var map = match[0];
  if (map === ctxt[/* env_named_map */1]) {
    return ctxt;
  } else {
    return /* record */[
            /* env_named_ctx */match[1],
            /* env_named_map */map
          ];
  }
}

function push_named(d, env) {
  var newrecord = env.slice();
  newrecord[/* env_named_context */1] = push_named_context_val(d, env[/* env_named_context */1]);
  return newrecord;
}

function lookup_named(id, env) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, env[/* env_named_context */1][/* env_named_map */1])[0];
}

function lookup_named_val(id, env) {
  return Curry._2(Names$ReactTemplate.Id[/* Map */10][/* find */21], id, env[/* env_named_context */1][/* env_named_map */1])[1];
}

function env_of_named(_, env) {
  return env;
}

function lookup_constant_key(kn, env) {
  return Curry._2(Names$ReactTemplate.Cmap_env[/* find */21], kn, env[/* env_globals */0][/* env_constants */0]);
}

function lookup_constant(kn, env) {
  return Curry._2(Names$ReactTemplate.Cmap_env[/* find */21], kn, env[/* env_globals */0][/* env_constants */0])[0];
}

function lookup_mind(kn, env) {
  return Curry._2(Names$ReactTemplate.Mindmap_env[/* find */21], kn, env[/* env_globals */0][/* env_inductives */1])[0];
}

function lookup_mind_key(kn, env) {
  return Curry._2(Names$ReactTemplate.Mindmap_env[/* find */21], kn, env[/* env_globals */0][/* env_inductives */1]);
}

exports.force_lazy_val = force_lazy_val;
exports.dummy_lazy_val = dummy_lazy_val;
exports.build_lazy_val = build_lazy_val;
exports.empty_named_context_val = empty_named_context_val;
exports.empty_env = empty_env;
exports.empty_rel_context_val = empty_rel_context_val;
exports.push_rel_context_val = push_rel_context_val;
exports.match_rel_context_val = match_rel_context_val;
exports.nb_rel = nb_rel;
exports.push_rel = push_rel;
exports.lookup_rel = lookup_rel;
exports.lookup_rel_val = lookup_rel_val;
exports.env_of_rel = env_of_rel;
exports.push_named_context_val = push_named_context_val;
exports.push_named_context_val_val = push_named_context_val_val;
exports.match_named_context_val = match_named_context_val;
exports.map_named_val = map_named_val;
exports.push_named = push_named;
exports.lookup_named = lookup_named;
exports.lookup_named_val = lookup_named_val;
exports.env_of_named = env_of_named;
exports.lookup_constant_key = lookup_constant_key;
exports.lookup_constant = lookup_constant;
exports.lookup_mind_key = lookup_mind_key;
exports.lookup_mind = lookup_mind;
/* empty_env Not a pure module */
