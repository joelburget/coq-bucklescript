// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Int$ReactTemplate = require("./int.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function mk_rec_calls(i) {
  return Util$ReactTemplate.$$Array[/* init */0](i, (function (j) {
                return /* Param */Block.__(0, [
                          0,
                          j
                        ]);
              }));
}

function mk_node(lab, sons) {
  return /* Node */Block.__(1, [
            lab,
            sons
          ]);
}

function lift_rtree_rec(depth, n, t) {
  switch (t.tag | 0) {
    case 0 : 
        var i = t[0];
        if (i < depth) {
          return t;
        } else {
          return /* Param */Block.__(0, [
                    i + n | 0,
                    t[1]
                  ]);
        }
    case 1 : 
        return /* Node */Block.__(1, [
                  t[0],
                  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
                          return lift_rtree_rec(depth, n, param);
                        }), t[1])
                ]);
    case 2 : 
        var partial_arg = depth + 1 | 0;
        return /* Rec */Block.__(2, [
                  t[0],
                  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
                          return lift_rtree_rec(partial_arg, n, param);
                        }), t[1])
                ]);
    
  }
}

function lift(n, t) {
  if (n) {
    return lift_rtree_rec(0, n, t);
  } else {
    return t;
  }
}

function subst_rtree_rec(depth, sub, t) {
  switch (t.tag | 0) {
    case 0 : 
        var i = t[0];
        if (i < depth) {
          return t;
        } else {
          var j = t[1];
          if (i === depth) {
            return lift(depth, /* Rec */Block.__(2, [
                          j,
                          sub
                        ]));
          } else {
            return /* Param */Block.__(0, [
                      i - 1 | 0,
                      j
                    ]);
          }
        }
        break;
    case 1 : 
        return /* Node */Block.__(1, [
                  t[0],
                  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
                          return subst_rtree_rec(depth, sub, param);
                        }), t[1])
                ]);
    case 2 : 
        var partial_arg = depth + 1 | 0;
        return /* Rec */Block.__(2, [
                  t[0],
                  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
                          return subst_rtree_rec(partial_arg, sub, param);
                        }), t[1])
                ]);
    
  }
}

function expand(_t) {
  while(true) {
    var t = _t;
    switch (t.tag | 0) {
      case 0 : 
      case 1 : 
          return t;
      case 2 : 
          var defs = t[1];
          _t = subst_rtree_rec(0, defs, Caml_array.caml_array_get(defs, t[0]));
          continue ;
          
    }
  };
}

function mk_rec(defs) {
  var check = function (_histo, _d) {
    while(true) {
      var d = _d;
      var histo = _histo;
      var match = expand(d);
      switch (match.tag | 0) {
        case 0 : 
            if (match[0] !== 0) {
              return /* () */0;
            } else {
              var j = match[1];
              if (Curry._2(Int$ReactTemplate.$$Set[/* mem */2], j, histo)) {
                return Pervasives.failwith("invalid rec call");
              } else {
                _d = Caml_array.caml_array_get(defs, j);
                _histo = Curry._2(Int$ReactTemplate.$$Set[/* add */3], j, histo);
                continue ;
                
              }
            }
            break;
        case 1 : 
        case 2 : 
            return /* () */0;
        
      }
    };
  };
  return Util$ReactTemplate.$$Array[/* mapi */14]((function (i, d) {
                check(Curry._1(Int$ReactTemplate.$$Set[/* singleton */4], i), d);
                return /* Rec */Block.__(2, [
                          i,
                          defs
                        ]);
              }), defs);
}

function dest_param(t) {
  var match = expand(t);
  switch (match.tag | 0) {
    case 0 : 
        return /* tuple */[
                match[0],
                match[1]
              ];
    case 1 : 
    case 2 : 
        return Pervasives.failwith("Rtree.dest_param");
    
  }
}

function dest_node(t) {
  var match = expand(t);
  switch (match.tag | 0) {
    case 1 : 
        return /* tuple */[
                match[0],
                match[1]
              ];
    case 0 : 
    case 2 : 
        return Pervasives.failwith("Rtree.dest_node");
    
  }
}

function is_node(t) {
  var match = expand(t);
  switch (match.tag | 0) {
    case 1 : 
        return /* true */1;
    case 0 : 
    case 2 : 
        return /* false */0;
    
  }
}

function map(f, t) {
  switch (t.tag | 0) {
    case 0 : 
        return /* Param */Block.__(0, [
                  t[0],
                  t[1]
                ]);
    case 1 : 
        return /* Node */Block.__(1, [
                  Curry._1(f, t[0]),
                  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
                          return map(f, param);
                        }), t[1])
                ]);
    case 2 : 
        return /* Rec */Block.__(2, [
                  t[0],
                  Util$ReactTemplate.$$Array[/* map */12]((function (param) {
                          return map(f, param);
                        }), t[1])
                ]);
    
  }
}

function smartmap(f, t) {
  switch (t.tag | 0) {
    case 0 : 
        return t;
    case 1 : 
        var sons = t[1];
        var a = t[0];
        var a$prime = Curry._1(f, a);
        var sons$prime = Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                return map(f, param);
              }), sons);
        if (a$prime === a && sons$prime === sons) {
          return t;
        } else {
          return /* Node */Block.__(1, [
                    a$prime,
                    sons$prime
                  ]);
        }
    case 2 : 
        var defs = t[1];
        var defs$prime = Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                return map(f, param);
              }), defs);
        if (defs$prime === defs) {
          return t;
        } else {
          return /* Rec */Block.__(2, [
                    t[0],
                    defs$prime
                  ]);
        }
    
  }
}

function raw_eq(cmp, t, t$prime) {
  switch (t.tag | 0) {
    case 0 : 
        switch (t$prime.tag | 0) {
          case 0 : 
              if (t[0] === t$prime[0]) {
                return +(t[1] === t$prime[1]);
              } else {
                return /* false */0;
              }
          case 1 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 1 : 
        switch (t$prime.tag | 0) {
          case 1 : 
              if (Curry._2(cmp, t[0], t$prime[0])) {
                return Util$ReactTemplate.$$Array[/* equal */21]((function (param, param$1) {
                              return raw_eq(cmp, param, param$1);
                            }), t[1], t$prime[1]);
              } else {
                return /* false */0;
              }
          case 0 : 
          case 2 : 
              return /* false */0;
          
        }
        break;
    case 2 : 
        switch (t$prime.tag | 0) {
          case 0 : 
          case 1 : 
              return /* false */0;
          case 2 : 
              if (t[0] === t$prime[0]) {
                return Util$ReactTemplate.$$Array[/* equal */21]((function (param, param$1) {
                              return raw_eq(cmp, param, param$1);
                            }), t[1], t$prime[1]);
              } else {
                return /* false */0;
              }
          
        }
        break;
    
  }
}

function raw_eq2(cmp, param, param$1) {
  if (raw_eq(cmp, param[0], param$1[0])) {
    return raw_eq(cmp, param[1], param$1[1]);
  } else {
    return /* false */0;
  }
}

function equiv(cmp, cmp$prime) {
  var compare = function (histo, t, t$prime) {
    if (Curry._3(Util$ReactTemplate.List[/* mem_f */47], (function (param, param$1) {
              return raw_eq2(cmp, param, param$1);
            }), /* tuple */[
            t,
            t$prime
          ], histo)) {
      return /* true */1;
    } else {
      var match = expand(t);
      var match$1 = expand(t$prime);
      switch (match.tag | 0) {
        case 1 : 
            var v = match[1];
            switch (match$1.tag | 0) {
              case 1 : 
                  var v$prime = match$1[1];
                  if (Curry._2(cmp$prime, match[0], match$1[0])) {
                    if (v.length === v$prime.length) {
                      var partial_arg_000 = /* tuple */[
                        t,
                        t$prime
                      ];
                      var partial_arg = /* :: */[
                        partial_arg_000,
                        histo
                      ];
                      return Util$ReactTemplate.$$Array[/* for_all2 */27]((function (param, param$1) {
                                    return compare(partial_arg, param, param$1);
                                  }), v, v$prime);
                    } else {
                      return /* false */0;
                    }
                  } else {
                    return /* false */0;
                  }
                  break;
              case 0 : 
              case 2 : 
                  return /* false */0;
              
            }
            break;
        case 0 : 
        case 2 : 
            return /* false */0;
        
      }
    }
  };
  return (function (param, param$1) {
      return compare(/* [] */0, param, param$1);
    });
}

function equal(cmp, t, t$prime) {
  if (t === t$prime || raw_eq(cmp, t, t$prime)) {
    return /* true */1;
  } else {
    return equiv(cmp, cmp)(t, t$prime);
  }
}

function inter(cmp, interlbl, def, n, histo, _t, _t$prime) {
  while(true) {
    var t$prime = _t$prime;
    var t = _t;
    try {
      var match = Curry._3(Util$ReactTemplate.List[/* assoc_f */125], (function (param, param$1) {
              return raw_eq2(cmp, param, param$1);
            }), /* tuple */[
            t,
            t$prime
          ], histo);
      return /* Param */Block.__(0, [
                (n - match[0] | 0) - 1 | 0,
                match[1]
              ]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        var exit = 0;
        switch (t.tag | 0) {
          case 0 : 
              switch (t$prime.tag | 0) {
                case 0 : 
                    if (!(t[0] === t$prime[0] && t[1] === t$prime[1])) {
                      throw [
                            Caml_builtin_exceptions.assert_failure,
                            [
                              "rtree.ml",
                              157,
                              6
                            ]
                          ];
                    }
                    return t;
                case 1 : 
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          [
                            "rtree.ml",
                            173,
                            9
                          ]
                        ];
                case 2 : 
                    exit = 1;
                    break;
                
              }
              break;
          case 1 : 
              switch (t$prime.tag | 0) {
                case 0 : 
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          [
                            "rtree.ml",
                            173,
                            9
                          ]
                        ];
                case 1 : 
                    var match$1 = Curry._2(interlbl, t[0], t$prime[0]);
                    if (match$1) {
                      return /* Node */Block.__(1, [
                                match$1[0],
                                Util$ReactTemplate.$$Array[/* map2 */49]((function (param, param$1) {
                                        return inter(cmp, interlbl, def, n, histo, param, param$1);
                                      }), t[1], t$prime[1])
                              ]);
                    } else {
                      return /* Node */Block.__(1, [
                                def,
                                /* array */[]
                              ]);
                    }
                case 2 : 
                    exit = 1;
                    break;
                
              }
              break;
          case 2 : 
              var v = t[1];
              var i = t[0];
              var exit$1 = 0;
              switch (t$prime.tag | 0) {
                case 0 : 
                case 1 : 
                    exit$1 = 2;
                    break;
                case 2 : 
                    var v$prime = t$prime[1];
                    if (i === t$prime[0] && v.length === v$prime.length) {
                      var histo_000 = /* tuple */[
                        /* tuple */[
                          t,
                          t$prime
                        ],
                        /* tuple */[
                          n,
                          i
                        ]
                      ];
                      var histo$1 = /* :: */[
                        histo_000,
                        histo
                      ];
                      var partial_arg = n + 1 | 0;
                      return /* Rec */Block.__(2, [
                                i,
                                Util$ReactTemplate.$$Array[/* map2 */49]((function(histo$1,partial_arg){
                                    return function (param, param$1) {
                                      return inter(cmp, interlbl, def, partial_arg, histo$1, param, param$1);
                                    }
                                    }(histo$1,partial_arg)), v, v$prime)
                              ]);
                    } else {
                      var histo_000$1 = /* tuple */[
                        /* tuple */[
                          t,
                          t$prime
                        ],
                        /* tuple */[
                          n,
                          0
                        ]
                      ];
                      var histo$2 = /* :: */[
                        histo_000$1,
                        histo
                      ];
                      return /* Rec */Block.__(2, [
                                0,
                                /* array */[inter(cmp, interlbl, def, n + 1 | 0, histo$2, expand(t), expand(t$prime))]
                              ]);
                    }
                    break;
                
              }
              if (exit$1 === 2) {
                _t = expand(t);
                continue ;
                
              }
              break;
          
        }
        if (exit === 1) {
          _t$prime = expand(t$prime);
          continue ;
          
        }
        
      } else {
        throw exn;
      }
    }
  };
}

function inter$1(cmp, interlbl, def, t, t$prime) {
  return inter(cmp, interlbl, def, 0, /* [] */0, t, t$prime);
}

function incl(cmp, interlbl, def, t, t$prime) {
  return equal(cmp, t, inter$1(cmp, interlbl, def, t, t$prime));
}

function is_infinite(cmp, t) {
  var is_inf = function (histo, t) {
    if (Curry._3(Util$ReactTemplate.List[/* mem_f */47], (function (param, param$1) {
              return raw_eq(cmp, param, param$1);
            }), t, histo)) {
      return /* true */1;
    } else {
      var match = expand(t);
      switch (match.tag | 0) {
        case 1 : 
            var partial_arg = /* :: */[
              t,
              histo
            ];
            return Util$ReactTemplate.$$Array[/* exists */24]((function (param) {
                          return is_inf(partial_arg, param);
                        }), match[1]);
        case 0 : 
        case 2 : 
            return /* false */0;
        
      }
    }
  };
  return is_inf(/* [] */0, t);
}

function pp_tree(prl, t) {
  switch (t.tag | 0) {
    case 0 : 
        return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("#"), Pp$ReactTemplate.$$int(t[0])), Pp$ReactTemplate.str(",")), Pp$ReactTemplate.$$int(t[1]));
    case 1 : 
        var v = t[1];
        var lab = t[0];
        if (v.length !== 0) {
          return Pp$ReactTemplate.hov(2, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("("), Curry._1(prl, lab)), Pp$ReactTemplate.str(",")), Pp$ReactTemplate.brk(/* tuple */[
                                      1,
                                      0
                                    ])), Pp$ReactTemplate.prvect_with_sep(Pp$ReactTemplate.pr_comma, (function (param) {
                                    return pp_tree(prl, param);
                                  }), v)), Pp$ReactTemplate.str(")")));
        } else {
          return Pp$ReactTemplate.hov(2, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("("), Curry._1(prl, lab)), Pp$ReactTemplate.str(")")));
        }
    case 2 : 
        var v$1 = t[1];
        if (v$1.length) {
          if (v$1.length === 1) {
            return Pp$ReactTemplate.hov(2, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Rec{"), pp_tree(prl, Caml_array.caml_array_get(v$1, 0))), Pp$ReactTemplate.str("}")));
          } else {
            return Pp$ReactTemplate.hov(2, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Rec{"), Pp$ReactTemplate.$$int(t[0])), Pp$ReactTemplate.str(",")), Pp$ReactTemplate.brk(/* tuple */[
                                        1,
                                        0
                                      ])), Pp$ReactTemplate.prvect_with_sep(Pp$ReactTemplate.pr_comma, (function (param) {
                                      return pp_tree(prl, param);
                                    }), v$1)), Pp$ReactTemplate.str("}")));
          }
        } else {
          return Pp$ReactTemplate.str("Rec{}");
        }
    
  }
}

var eq_rtree = equal;

exports.mk_node = mk_node;
exports.mk_rec_calls = mk_rec_calls;
exports.mk_rec = mk_rec;
exports.lift = lift;
exports.is_node = is_node;
exports.dest_node = dest_node;
exports.dest_param = dest_param;
exports.is_infinite = is_infinite;
exports.equiv = equiv;
exports.equal = equal;
exports.inter = inter$1;
exports.incl = incl;
exports.map = map;
exports.smartmap = smartmap;
exports.pp_tree = pp_tree;
exports.eq_rtree = eq_rtree;
/* Pp-ReactTemplate Not a pure module */
