// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Vm$ReactTemplate = require("./vm.bs.js");
var Univ$ReactTemplate = require("../src/univ.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var Constr$ReactTemplate = require("../src/constr.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Vmvalues$ReactTemplate = require("../src/vmvalues.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Csymtable$ReactTemplate = require("./csymtable.bs.js");
var Reduction$ReactTemplate = require("../src/reduction.bs.js");
var Coq_config$ReactTemplate = require("../shims/coq_config.bs.js");

function val_of_constr(env, c) {
  return Csymtable$ReactTemplate.val_of_constr(Environ$ReactTemplate.pre_env(env), c);
}

function compare_zipper(z1, z2) {
  switch (z1.tag | 0) {
    case 0 : 
        if (z2.tag) {
          return /* false */0;
        } else {
          return +(Vmvalues$ReactTemplate.nargs(z1[0]) === Vmvalues$ReactTemplate.nargs(z2[0]));
        }
        break;
    case 1 : 
        if (z2.tag === 1) {
          return +(Vmvalues$ReactTemplate.nargs(z1[1]) === Vmvalues$ReactTemplate.nargs(z2[1]));
        } else {
          return /* false */0;
        }
        break;
    case 2 : 
        if (z2.tag === 2) {
          return /* true */1;
        } else {
          return /* false */0;
        }
        break;
    case 3 : 
        if (z2.tag === 3) {
          return /* true */1;
        } else {
          return /* false */0;
        }
        break;
    
  }
}

function compare_stack(_stk1, _stk2) {
  while(true) {
    var stk2 = _stk2;
    var stk1 = _stk1;
    if (stk1) {
      if (stk2) {
        if (compare_zipper(stk1[0], stk2[0])) {
          _stk2 = stk2[1];
          _stk1 = stk1[1];
          continue ;
          
        } else {
          return /* false */0;
        }
      } else {
        return /* false */0;
      }
    } else if (stk2) {
      return /* false */0;
    } else {
      return /* true */1;
    }
  };
}

function conv_vect(fconv, vect1, vect2, cu) {
  var n = vect1.length;
  if (n === vect2.length) {
    var rcu = cu;
    for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
      rcu = Curry._3(fconv, Caml_array.caml_array_get(vect1, i), Caml_array.caml_array_get(vect2, i), rcu);
    }
    return rcu;
  } else {
    throw Reduction$ReactTemplate.NotConvertible;
  }
}

function conv_val(env, pb, k, v1, v2, cu) {
  if (v1 === v2) {
    return cu;
  } else {
    var env$1 = env;
    var pb$1 = pb;
    var k$1 = k;
    var whd1 = Vmvalues$ReactTemplate.whd_val(v1);
    var whd2 = Vmvalues$ReactTemplate.whd_val(v2);
    var cu$1 = cu;
    var exit = 0;
    var exit$1 = 0;
    switch (whd1.tag | 0) {
      case 0 : 
          var p1 = whd1[0];
          switch (whd2.tag | 0) {
            case 0 : 
                var p2 = whd2[0];
                var cu$2 = conv_val(env$1, /* CONV */0, k$1, Vmvalues$ReactTemplate.dom(p1), Vmvalues$ReactTemplate.dom(p2), cu$1);
                return conv_fun(env$1, pb$1, k$1, Vmvalues$ReactTemplate.codom(p1), Vmvalues$ReactTemplate.codom(p2), cu$2);
            case 1 : 
            case 7 : 
                exit$1 = 2;
                break;
            default:
              exit$1 = 3;
          }
          break;
      case 1 : 
          switch (whd2.tag | 0) {
            case 1 : 
                return conv_fun(env$1, /* CONV */0, k$1, whd1[0], whd2[0], cu$1);
            case 7 : 
                exit$1 = 2;
                break;
            default:
              exit$1 = 3;
          }
          break;
      case 2 : 
          var match = whd1[1];
          var f1 = whd1[0];
          if (match) {
            var args1 = match[0];
            switch (whd2.tag | 0) {
              case 2 : 
                  var match$1 = whd2[1];
                  if (match$1) {
                    var args2 = match$1[0];
                    if (Vmvalues$ReactTemplate.nargs(args1) !== Vmvalues$ReactTemplate.nargs(args2)) {
                      throw Reduction$ReactTemplate.NotConvertible;
                    } else {
                      return conv_arguments(env$1, /* None */0, k$1, args1, args2, conv_fix(env$1, k$1, f1, whd2[0], cu$1));
                    }
                  } else {
                    exit$1 = 3;
                  }
                  break;
              case 1 : 
              case 7 : 
                  exit$1 = 2;
                  break;
              default:
                exit$1 = 3;
            }
          } else {
            switch (whd2.tag | 0) {
              case 2 : 
                  if (whd2[1]) {
                    exit$1 = 3;
                  } else {
                    return conv_fix(env$1, k$1, f1, whd2[0], cu$1);
                  }
                  break;
              case 1 : 
              case 7 : 
                  exit$1 = 2;
                  break;
              default:
                exit$1 = 3;
            }
          }
          break;
      case 3 : 
          var match$2 = whd1[2];
          var cf1 = whd1[0];
          if (match$2) {
            var args1$1 = match$2[0];
            switch (whd2.tag | 0) {
              case 3 : 
                  var match$3 = whd2[2];
                  if (match$3) {
                    var args2$1 = match$3[0];
                    if (Vmvalues$ReactTemplate.nargs(args1$1) !== Vmvalues$ReactTemplate.nargs(args2$1)) {
                      throw Reduction$ReactTemplate.NotConvertible;
                    } else {
                      return conv_arguments(env$1, /* None */0, k$1, args1$1, args2$1, conv_cofix(env$1, k$1, cf1, whd2[0], cu$1));
                    }
                  } else {
                    exit$1 = 3;
                  }
                  break;
              case 1 : 
              case 7 : 
                  exit$1 = 2;
                  break;
              default:
                exit$1 = 3;
            }
          } else {
            switch (whd2.tag | 0) {
              case 3 : 
                  if (whd2[2]) {
                    exit$1 = 3;
                  } else {
                    return conv_cofix(env$1, k$1, cf1, whd2[0], cu$1);
                  }
                  break;
              case 1 : 
              case 7 : 
                  exit$1 = 2;
                  break;
              default:
                exit$1 = 3;
            }
          }
          break;
      case 4 : 
          switch (whd2.tag | 0) {
            case 4 : 
                if (whd1[0] === whd2[0]) {
                  return cu$1;
                } else {
                  throw Reduction$ReactTemplate.NotConvertible;
                }
                break;
            case 1 : 
            case 7 : 
                exit$1 = 2;
                break;
            default:
              exit$1 = 3;
          }
          break;
      case 5 : 
          var b1 = whd1[0];
          switch (whd2.tag | 0) {
            case 5 : 
                var b2 = whd2[0];
                var tag1 = Vmvalues$ReactTemplate.btag(b1);
                var tag2 = Vmvalues$ReactTemplate.btag(b2);
                var sz = Vmvalues$ReactTemplate.bsize(b1);
                if (tag1 === tag2 && sz === Vmvalues$ReactTemplate.bsize(b2)) {
                  var rcu = cu$1;
                  for(var i = 0 ,i_finish = sz - 1 | 0; i <= i_finish; ++i){
                    rcu = conv_val(env$1, /* CONV */0, k$1, Vmvalues$ReactTemplate.bfield(b1, i), Vmvalues$ReactTemplate.bfield(b2, i), rcu);
                  }
                  return rcu;
                } else {
                  throw Reduction$ReactTemplate.NotConvertible;
                }
                break;
            case 1 : 
            case 7 : 
                exit$1 = 2;
                break;
            default:
              exit$1 = 3;
          }
          break;
      case 6 : 
          switch (whd2.tag | 0) {
            case 6 : 
                var env$2 = env$1;
                var pb$2 = pb$1;
                var k$2 = k$1;
                var a1 = whd1[0];
                var stk1 = whd1[1];
                var a2 = whd2[0];
                var stk2 = whd2[1];
                var cu$3 = cu$1;
                switch (a1.tag | 0) {
                  case 0 : 
                      switch (a2.tag | 0) {
                        case 0 : 
                            if (Vmvalues$ReactTemplate.eq_id_key(a1[0], a2[0]) && compare_stack(stk1, stk2)) {
                              return conv_stack(env$2, k$2, stk1, stk2, cu$3);
                            } else {
                              throw Reduction$ReactTemplate.NotConvertible;
                            }
                            break;
                        case 1 : 
                        case 2 : 
                            throw Reduction$ReactTemplate.NotConvertible;
                        
                      }
                      break;
                  case 1 : 
                      var ind1 = a1[0];
                      switch (a2.tag | 0) {
                        case 1 : 
                            if (Names$ReactTemplate.eq_ind(ind1, a2[0]) && compare_stack(stk1, stk2)) {
                              if (Environ$ReactTemplate.polymorphic_ind(ind1, env$2)) {
                                var mib = Environ$ReactTemplate.lookup_mind(ind1[0], env$2);
                                var match$4 = mib[/* mind_universes */8];
                                var ulen;
                                switch (match$4.tag | 0) {
                                  case 0 : 
                                      ulen = Univ$ReactTemplate.ContextSet[/* size */17](match$4[0]);
                                      break;
                                  case 1 : 
                                      ulen = Univ$ReactTemplate.AUContext[/* size */4](match$4[0]);
                                      break;
                                  case 2 : 
                                      ulen = Univ$ReactTemplate.AUContext[/* size */4](Univ$ReactTemplate.ACumulativityInfo[/* univ_context */0](match$4[0]));
                                      break;
                                  
                                }
                                var exit$2 = 0;
                                if (stk1) {
                                  var match$5 = stk1[0];
                                  if (match$5.tag) {
                                    exit$2 = 1;
                                  } else if (stk2) {
                                    var match$6 = stk2[0];
                                    if (match$6.tag) {
                                      exit$2 = 1;
                                    } else {
                                      var args2$2 = match$6[0];
                                      var args1$2 = match$5[0];
                                      if (ulen > Vmvalues$ReactTemplate.nargs(args1$2)) {
                                        throw [
                                              Caml_builtin_exceptions.assert_failure,
                                              [
                                                "vconv.ml",
                                                104,
                                                10
                                              ]
                                            ];
                                      }
                                      if (ulen > Vmvalues$ReactTemplate.nargs(args2$2)) {
                                        throw [
                                              Caml_builtin_exceptions.assert_failure,
                                              [
                                                "vconv.ml",
                                                105,
                                                10
                                              ]
                                            ];
                                      }
                                      var u1 = Util$ReactTemplate.$$Array[/* init */0](ulen, (function (i) {
                                              return Vmvalues$ReactTemplate.uni_lvl_val(Vmvalues$ReactTemplate.arg(args1$2, i));
                                            }));
                                      var u2 = Util$ReactTemplate.$$Array[/* init */0](ulen, (function (i) {
                                              return Vmvalues$ReactTemplate.uni_lvl_val(Vmvalues$ReactTemplate.arg(args2$2, i));
                                            }));
                                      var u1$1 = Univ$ReactTemplate.Instance[/* of_array */2](u1);
                                      var u2$1 = Univ$ReactTemplate.Instance[/* of_array */2](u2);
                                      var cu$4 = Reduction$ReactTemplate.convert_instances(/* false */0, u1$1, u2$1, cu$3);
                                      return conv_arguments(env$2, /* Some */[ulen], k$2, args1$2, args2$2, conv_stack(env$2, k$2, stk1[1], stk2[1], cu$4));
                                    }
                                  } else {
                                    exit$2 = 1;
                                  }
                                } else if (stk2) {
                                  exit$2 = 1;
                                } else {
                                  if (ulen !== 0) {
                                    throw [
                                          Caml_builtin_exceptions.assert_failure,
                                          [
                                            "vconv.ml",
                                            102,
                                            13
                                          ]
                                        ];
                                  }
                                  return cu$3;
                                }
                                if (exit$2 === 1) {
                                  throw [
                                        Caml_builtin_exceptions.assert_failure,
                                        [
                                          "vconv.ml",
                                          113,
                                          18
                                        ]
                                      ];
                                }
                                
                              } else {
                                return conv_stack(env$2, k$2, stk1, stk2, cu$3);
                              }
                            } else {
                              throw Reduction$ReactTemplate.NotConvertible;
                            }
                            break;
                        case 0 : 
                        case 2 : 
                            throw Reduction$ReactTemplate.NotConvertible;
                        
                      }
                      break;
                  case 2 : 
                      switch (a2.tag | 0) {
                        case 0 : 
                        case 1 : 
                            throw Reduction$ReactTemplate.NotConvertible;
                        case 2 : 
                            return Reduction$ReactTemplate.sort_cmp_universes(env$2, pb$2, a1[0], a2[0], cu$3);
                        
                      }
                      break;
                  
                }
            case 1 : 
            case 7 : 
                exit$1 = 2;
                break;
            default:
              exit$1 = 3;
          }
          break;
      case 7 : 
          throw [
                Caml_builtin_exceptions.assert_failure,
                [
                  "vconv.ml",
                  52,
                  4
                ]
              ];
      
    }
    switch (exit$1) {
      case 2 : 
          if (whd2.tag === 1) {
            exit = 1;
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "vconv.ml",
                    52,
                    4
                  ]
                ];
          }
          break;
      case 3 : 
          if (whd1.tag === 1) {
            exit = 1;
          } else {
            throw Reduction$ReactTemplate.NotConvertible;
          }
          break;
      
    }
    if (exit === 1) {
      return conv_val(env$1, /* CONV */0, k$1 + 1 | 0, Vm$ReactTemplate.apply_whd(k$1, whd1), Vm$ReactTemplate.apply_whd(k$1, whd2), cu$1);
    }
    
  }
}

function conv_stack(env, k, _stk1, _stk2, _cu) {
  while(true) {
    var cu = _cu;
    var stk2 = _stk2;
    var stk1 = _stk1;
    if (stk1) {
      var match = stk1[0];
      switch (match.tag | 0) {
        case 0 : 
            if (stk2) {
              var match$1 = stk2[0];
              if (match$1.tag) {
                throw Reduction$ReactTemplate.NotConvertible;
              } else {
                _cu = conv_arguments(env, /* None */0, k, match[0], match$1[0], cu);
                _stk2 = stk2[1];
                _stk1 = stk1[1];
                continue ;
                
              }
            } else {
              throw Reduction$ReactTemplate.NotConvertible;
            }
            break;
        case 1 : 
            if (stk2) {
              var match$2 = stk2[0];
              if (match$2.tag === 1) {
                _cu = conv_arguments(env, /* None */0, k, match[1], match$2[1], conv_fix(env, k, match[0], match$2[0], cu));
                _stk2 = stk2[1];
                _stk1 = stk1[1];
                continue ;
                
              } else {
                throw Reduction$ReactTemplate.NotConvertible;
              }
            } else {
              throw Reduction$ReactTemplate.NotConvertible;
            }
            break;
        case 2 : 
            var sw1 = match[0];
            if (stk2) {
              var match$3 = stk2[0];
              if (match$3.tag === 2) {
                var sw2 = match$3[0];
                if (Vmvalues$ReactTemplate.check_switch(sw1, sw2)) {
                  var vt1 = Vm$ReactTemplate.type_of_switch(sw1);
                  var vt2 = Vm$ReactTemplate.type_of_switch(sw2);
                  var rcu = conv_val(env, /* CONV */0, k, vt1, vt2, cu);
                  var b1 = Vm$ReactTemplate.branch_of_switch(k, sw1);
                  var b2 = Vm$ReactTemplate.branch_of_switch(k, sw2);
                  for(var i = 0 ,i_finish = b1.length - 1 | 0; i <= i_finish; ++i){
                    rcu = conv_val(env, /* CONV */0, k + Caml_array.caml_array_get(b1, i)[0] | 0, Caml_array.caml_array_get(b1, i)[1], Caml_array.caml_array_get(b2, i)[1], rcu);
                  }
                  _cu = rcu;
                  _stk2 = stk2[1];
                  _stk1 = stk1[1];
                  continue ;
                  
                } else {
                  throw Reduction$ReactTemplate.NotConvertible;
                }
              } else {
                throw Reduction$ReactTemplate.NotConvertible;
              }
            } else {
              throw Reduction$ReactTemplate.NotConvertible;
            }
            break;
        case 3 : 
            if (stk2) {
              var match$4 = stk2[0];
              if (match$4.tag === 3) {
                if (Names$ReactTemplate.Constant[/* equal */12](match[0], match$4[0])) {
                  _stk2 = stk2[1];
                  _stk1 = stk1[1];
                  continue ;
                  
                } else {
                  throw Reduction$ReactTemplate.NotConvertible;
                }
              } else {
                throw Reduction$ReactTemplate.NotConvertible;
              }
            } else {
              throw Reduction$ReactTemplate.NotConvertible;
            }
            break;
        
      }
    } else if (stk2) {
      throw Reduction$ReactTemplate.NotConvertible;
    } else {
      return cu;
    }
  };
}

function conv_fun(env, pb, k, f1, f2, cu) {
  if (f1 === f2) {
    return cu;
  } else {
    var match = Vm$ReactTemplate.decompose_vfun2(k, f1, f2);
    return conv_val(env, pb, k + match[0] | 0, match[1], match[2], cu);
  }
}

function conv_fix(env, k, f1, f2, cu) {
  if (f1 === f2) {
    return cu;
  } else if (Vmvalues$ReactTemplate.check_fix(f1, f2)) {
    var match = Vm$ReactTemplate.reduce_fix(k, f1);
    var tf1 = match[1];
    var match$1 = Vm$ReactTemplate.reduce_fix(k, f2);
    var cu$1 = conv_vect((function (param, param$1, param$2) {
            return conv_val(env, /* CONV */0, k, param, param$1, param$2);
          }), tf1, match$1[1], cu);
    var partial_arg = k + tf1.length | 0;
    return conv_vect((function (param, param$1, param$2) {
                  return conv_fun(env, /* CONV */0, partial_arg, param, param$1, param$2);
                }), match[0], match$1[0], cu$1);
  } else {
    throw Reduction$ReactTemplate.NotConvertible;
  }
}

function conv_cofix(env, k, cf1, cf2, cu) {
  if (cf1 === cf2) {
    return cu;
  } else if (Vmvalues$ReactTemplate.check_cofix(cf1, cf2)) {
    var match = Vm$ReactTemplate.reduce_cofix(k, cf1);
    var tcf1 = match[1];
    var match$1 = Vm$ReactTemplate.reduce_cofix(k, cf2);
    var cu$1 = conv_vect((function (param, param$1, param$2) {
            return conv_val(env, /* CONV */0, k, param, param$1, param$2);
          }), tcf1, match$1[1], cu);
    var partial_arg = k + tcf1.length | 0;
    return conv_vect((function (param, param$1, param$2) {
                  return conv_val(env, /* CONV */0, partial_arg, param, param$1, param$2);
                }), match[0], match$1[0], cu$1);
  } else {
    throw Reduction$ReactTemplate.NotConvertible;
  }
}

function conv_arguments(env, $staropt$star, k, args1, args2, cu) {
  var from = $staropt$star ? $staropt$star[0] : 0;
  if (args1 === args2) {
    return cu;
  } else {
    var n = Vmvalues$ReactTemplate.nargs(args1);
    if (n === Vmvalues$ReactTemplate.nargs(args2)) {
      var rcu = cu;
      for(var i = from ,i_finish = n - 1 | 0; i <= i_finish; ++i){
        rcu = conv_val(env, /* CONV */0, k, Vmvalues$ReactTemplate.arg(args1, i), Vmvalues$ReactTemplate.arg(args2, i), rcu);
      }
      return rcu;
    } else {
      throw Reduction$ReactTemplate.NotConvertible;
    }
  }
}

function vm_conv_gen(cv_pb, env, univs, t1, t2) {
  try {
    var v1 = Csymtable$ReactTemplate.val_of_constr(Environ$ReactTemplate.pre_env(env), t1);
    var v2 = Csymtable$ReactTemplate.val_of_constr(Environ$ReactTemplate.pre_env(env), t2);
    return conv_val(env, cv_pb, Environ$ReactTemplate.nb_rel(env), v1, v2, univs)[0];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    var exit = 0;
    if (exn === Caml_builtin_exceptions.not_found) {
      exit = 1;
    } else if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      exit = 1;
    } else {
      throw exn;
    }
    if (exit === 1) {
      Reduction$ReactTemplate.warn_bytecode_compiler_failed(/* None */0, /* () */0);
      return Reduction$ReactTemplate.generic_conv(cv_pb, /* false */0, (function () {
                    return /* None */0;
                  }), Names$ReactTemplate.full_transparent_state, env, univs, t1, t2);
    }
    
  }
}

function vm_conv(cv_pb, env, t1, t2) {
  var univs = Environ$ReactTemplate.universes(env);
  var b = cv_pb === /* CUMUL */1 ? Constr$ReactTemplate.leq_constr_univs(univs, t1, t2) : Constr$ReactTemplate.eq_constr_univs(univs, t1, t2);
  if (b) {
    return 0;
  } else {
    var univs$1 = /* tuple */[
      univs,
      Reduction$ReactTemplate.checked_universes
    ];
    vm_conv_gen(cv_pb, env, univs$1, t1, t2);
    return /* () */0;
  }
}

if (Coq_config$ReactTemplate.bytecode_compiler) {
  Reduction$ReactTemplate.set_vm_conv(vm_conv);
}

exports.vm_conv = vm_conv;
exports.vm_conv_gen = vm_conv_gen;
exports.val_of_constr = val_of_constr;
/*  Not a pure module */
