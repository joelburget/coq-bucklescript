// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Hook$ReactTemplate = require("./hook.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var Proactive = $$Map.Make(/* module */[/* compare */compare]);

var EntryOrd = /* module */[/* compare */Constr$ReactTemplate.compare];

var Reactive = $$Map.Make(EntryOrd);

var initial_proactive = Proactive[/* empty */0];

var initial_reactive = Reactive[/* empty */0];

var initial_retroknowledge_000 = /* flags : record */[/* fastcomputation : true */1];

var initial_retroknowledge = /* record */[
  initial_retroknowledge_000,
  /* proactive */initial_proactive,
  /* reactive */initial_reactive
];

function add_field(knowledge, field, entry) {
  return /* record */[
          /* flags */knowledge[/* flags */0],
          /* proactive */Curry._3(Proactive[/* add */3], field, entry, knowledge[/* proactive */1]),
          /* reactive */Curry._3(Reactive[/* add */3], entry, field, knowledge[/* reactive */2])
        ];
}

function mem(knowledge, field) {
  return Curry._2(Proactive[/* mem */2], field, knowledge[/* proactive */1]);
}

function find(knowledge, field) {
  return Curry._2(Proactive[/* find */21], field, knowledge[/* proactive */1]);
}

var match = Hook$ReactTemplate.make(/* None */0, /* () */0);

var dispatch = match[0];

function dispatch_reactive(entry, retroknowledge) {
  return Curry._3(Hook$ReactTemplate.get(dispatch), retroknowledge, entry, Curry._2(Reactive[/* find */21], entry, retroknowledge[/* reactive */2]));
}

function get_vm_compiling_info(knowledge, key) {
  var match = dispatch_reactive(key, knowledge)[/* vm_compiling */0];
  if (match) {
    return Curry._1(match[0], knowledge[/* flags */0][/* fastcomputation */0]);
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function get_vm_constant_static_info(knowledge, key) {
  var match = dispatch_reactive(key, knowledge)[/* vm_constant_static */1];
  if (match) {
    return Curry._1(match[0], knowledge[/* flags */0][/* fastcomputation */0]);
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function get_vm_constant_dynamic_info(knowledge, key) {
  var match = dispatch_reactive(key, knowledge)[/* vm_constant_dynamic */2];
  if (match) {
    return Curry._1(match[0], knowledge[/* flags */0][/* fastcomputation */0]);
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function get_vm_before_match_info(knowledge, key) {
  var match = dispatch_reactive(key, knowledge)[/* vm_before_match */3];
  if (match) {
    return Curry._1(match[0], knowledge[/* flags */0][/* fastcomputation */0]);
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function get_vm_decompile_constant_info(knowledge, key) {
  var match = dispatch_reactive(key, knowledge)[/* vm_decompile_const */4];
  if (match) {
    return match[0];
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

var empty_reactive_info = /* record */[
  /* vm_compiling : None */0,
  /* vm_constant_static : None */0,
  /* vm_constant_dynamic : None */0,
  /* vm_before_match : None */0,
  /* vm_decompile_const : None */0
];

var dispatch_hook = match[1];

exports.initial_retroknowledge = initial_retroknowledge;
exports.get_vm_compiling_info = get_vm_compiling_info;
exports.get_vm_constant_static_info = get_vm_constant_static_info;
exports.get_vm_constant_dynamic_info = get_vm_constant_dynamic_info;
exports.get_vm_before_match_info = get_vm_before_match_info;
exports.get_vm_decompile_constant_info = get_vm_decompile_constant_info;
exports.add_field = add_field;
exports.mem = mem;
exports.find = find;
exports.empty_reactive_info = empty_reactive_info;
exports.dispatch_hook = dispatch_hook;
/* Proactive Not a pure module */
