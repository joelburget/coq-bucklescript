// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Pp$ReactTemplate = require("../src/pp.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Flags$ReactTemplate = require("../src/flags.bs.js");
var CErrors$ReactTemplate = require("../src/cErrors.bs.js");
var Egramml$ReactTemplate = require("../src/egramml.bs.js");
var Feedback$ReactTemplate = require("../src/feedback.bs.js");
var CWarnings$ReactTemplate = require("../src/cWarnings.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var vernac_tab = Hashtbl.create(/* None */0, 211);

function vinterp_add(depr, s, f) {
  try {
    return Hashtbl.add(vernac_tab, s, /* tuple */[
                depr,
                f
              ]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["vinterp_add"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Cannot add the vernac command "), Pp$ReactTemplate.str(s[0])), Pp$ReactTemplate.str(" twice.")));
    } else {
      throw exn;
    }
  }
}

function overwriting_vinterp_add(s, f) {
  try {
    Hashtbl.find(vernac_tab, s);
    Hashtbl.remove(vernac_tab, s);
  }
  catch (exn){
    if (exn !== Caml_builtin_exceptions.not_found) {
      throw exn;
    }
    
  }
  return Hashtbl.add(vernac_tab, s, /* tuple */[
              /* false */0,
              f
            ]);
}

function vinterp_map(s) {
  try {
    return Hashtbl.find(vernac_tab, s);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    var exit = 0;
    if (exn[0] === Caml_builtin_exceptions.failure) {
      exit = 1;
    } else if (exn === Caml_builtin_exceptions.not_found) {
      exit = 1;
    } else {
      throw exn;
    }
    if (exit === 1) {
      return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Vernac Interpreter"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Cannot find vernac command "), Pp$ReactTemplate.str(s[0])), Pp$ReactTemplate.str(".")));
    }
    
  }
}

function vinterp_init() {
  return Hashtbl.clear(vernac_tab);
}

var warn_deprecated_command = CWarnings$ReactTemplate.create("deprecated-command", "deprecated", /* None */0, (function (pr) {
        return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Deprecated vernacular command: "), pr);
      }));

function call(opn, converted_args, atts, st) {
  var phase = "Looking up command";
  try {
    var match = vinterp_map(opn);
    if (match[0]) {
      var rules = Egramml$ReactTemplate.get_extend_vernac_rule(opn);
      var pr_gram = function (param) {
        if (param.tag) {
          return Pp$ReactTemplate.str("_");
        } else {
          return Pp$ReactTemplate.str(param[0]);
        }
      };
      var pr = Pp$ReactTemplate.pr_sequence(pr_gram, rules);
      Curry._2(warn_deprecated_command, /* None */0, pr);
    }
    phase = "Checking arguments";
    var hunk = Curry._1(match[1], converted_args);
    phase = "Executing command";
    return Curry._2(hunk, atts, st);
  }
  catch (raw_reraise){
    var reraise = Js_exn.internalToOCamlException(raw_reraise);
    if (reraise === CErrors$ReactTemplate.Drop) {
      throw CErrors$ReactTemplate.Drop;
    } else {
      var reraise$1 = CErrors$ReactTemplate.push(reraise);
      if (Flags$ReactTemplate.debug[0]) {
        Feedback$ReactTemplate.msg_debug(/* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Vernac Interpreter "), Pp$ReactTemplate.str(phase)));
      }
      return Util$ReactTemplate.iraise(reraise$1);
    }
  }
}

exports.vinterp_init = vinterp_init;
exports.vinterp_add = vinterp_add;
exports.overwriting_vinterp_add = overwriting_vinterp_add;
exports.call = call;
/* vernac_tab Not a pure module */
