// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Buffer = require("bs-platform/lib/js/buffer.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Segmenttree$ReactTemplate = require("./segmenttree.bs.js");
var Unicodetable$ReactTemplate = require("./unicodetable.bs.js");

var table = Caml_array.caml_make_vect(131072, 0);

function mask(i, param) {
  switch (param) {
    case 0 : 
        return (1 << Caml_int32.imul(i & 7, 3));
    case 1 : 
        return (2 << Caml_int32.imul(i & 7, 3));
    case 2 : 
        return (3 << Caml_int32.imul(i & 7, 3));
    case 3 : 
        return (4 << Caml_int32.imul(i & 7, 3));
    case 4 : 
        return (0 << Caml_int32.imul(i & 7, 3));
    
  }
}

function reset_mask(i) {
  return Pervasives.lnot((7 << Caml_int32.imul(i & 7, 3)));
}

function mk_lookup_table_from_unicode_tables_for(status, tables) {
  return List.iter((function (param) {
                return List.iter((function (param) {
                              for(var i = param[0] ,i_finish = param[1]; i <= i_finish; ++i){
                                Caml_array.caml_array_set(table, (i >>> 3), Caml_array.caml_array_get(table, (i >>> 3)) & reset_mask(i) | mask(i, status));
                              }
                              return /* () */0;
                            }), param);
              }), tables);
}

function lookup(x) {
  var v = (Caml_array.caml_array_get(table, (x >>> 3)) >>> Caml_int32.imul(x & 7, 3)) & 7;
  if (v === 1) {
    return /* Letter */0;
  } else if (v === 2) {
    return /* IdentPart */1;
  } else if (v === 3) {
    return /* Symbol */2;
  } else if (v === 4) {
    return /* IdentSep */3;
  } else {
    return /* Unknown */4;
  }
}

mk_lookup_table_from_unicode_tables_for(/* Symbol */2, /* :: */[
      Unicodetable$ReactTemplate.sm,
      /* :: */[
        Unicodetable$ReactTemplate.sc,
        /* :: */[
          Unicodetable$ReactTemplate.so,
          /* :: */[
            Unicodetable$ReactTemplate.pd,
            /* :: */[
              Unicodetable$ReactTemplate.pc,
              /* :: */[
                Unicodetable$ReactTemplate.pe,
                /* :: */[
                  Unicodetable$ReactTemplate.ps,
                  /* :: */[
                    Unicodetable$ReactTemplate.pi,
                    /* :: */[
                      Unicodetable$ReactTemplate.pf,
                      /* :: */[
                        Unicodetable$ReactTemplate.po,
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

mk_lookup_table_from_unicode_tables_for(/* Letter */0, /* :: */[
      Unicodetable$ReactTemplate.lu,
      /* :: */[
        Unicodetable$ReactTemplate.ll,
        /* :: */[
          Unicodetable$ReactTemplate.lt,
          /* :: */[
            Unicodetable$ReactTemplate.lo,
            /* [] */0
          ]
        ]
      ]
    ]);

mk_lookup_table_from_unicode_tables_for(/* IdentPart */1, /* :: */[
      Unicodetable$ReactTemplate.nd,
      /* :: */[
        Unicodetable$ReactTemplate.nl,
        /* :: */[
          Unicodetable$ReactTemplate.no,
          /* [] */0
        ]
      ]
    ]);

mk_lookup_table_from_unicode_tables_for(/* Letter */0, /* :: */[
      /* :: */[
        /* tuple */[
          7424,
          7551
        ],
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          /* tuple */[
            7552,
            7615
          ],
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            /* tuple */[
              7616,
              7679
            ],
            /* [] */0
          ],
          /* [] */0
        ]
      ]
    ]);

mk_lookup_table_from_unicode_tables_for(/* Symbol */2, /* :: */[
      /* :: */[
        /* tuple */[
          178,
          179
        ],
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          /* tuple */[
            185,
            185
          ],
          /* [] */0
        ],
        /* :: */[
          /* :: */[
            /* tuple */[
              8304,
              8304
            ],
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              /* tuple */[
                8308,
                8313
              ],
              /* [] */0
            ],
            /* :: */[
              /* :: */[
                /* tuple */[
                  46,
                  46
                ],
                /* [] */0
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

mk_lookup_table_from_unicode_tables_for(/* IdentSep */3, /* :: */[
      /* :: */[
        /* tuple */[
          95,
          95
        ],
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          /* tuple */[
            160,
            160
          ],
          /* [] */0
        ],
        /* [] */0
      ]
    ]);

mk_lookup_table_from_unicode_tables_for(/* IdentPart */1, /* :: */[
      /* :: */[
        /* tuple */[
          39,
          39
        ],
        /* [] */0
      ],
      /* [] */0
    ]);

var End_of_input = Caml_exceptions.create("Unicode-ReactTemplate.End_of_input");

function next_utf8(s, i) {
  var l = s.length - i | 0;
  if (l) {
    var a = Caml_string.get(s, i);
    if (a <= 127) {
      return /* tuple */[
              1,
              a
            ];
    } else if ((a & 64) === 0 || l === 1) {
      return Pervasives.invalid_arg("utf8");
    } else {
      var b = Caml_string.get(s, i + 1 | 0);
      if ((b & 192) !== 128) {
        return Pervasives.invalid_arg("utf8");
      } else if (a & 32) {
        if (l === 2) {
          return Pervasives.invalid_arg("utf8");
        } else {
          var c = Caml_string.get(s, i + 2 | 0);
          if ((c & 192) !== 128) {
            return Pervasives.invalid_arg("utf8");
          } else if (a & 16) {
            if (l === 3) {
              return Pervasives.invalid_arg("utf8");
            } else {
              var d = Caml_string.get(s, i + 3 | 0);
              if ((d & 192) !== 128 || a & 8) {
                return Pervasives.invalid_arg("utf8");
              } else {
                return /* tuple */[
                        4,
                        ((((a & 7) << 18) + ((b & 63) << 12) | 0) + ((c & 63) << 6) | 0) + (d & 63) | 0
                      ];
              }
            }
          } else {
            return /* tuple */[
                    3,
                    (((a & 15) << 12) + ((b & 63) << 6) | 0) + (c & 63) | 0
                  ];
          }
        }
      } else {
        return /* tuple */[
                2,
                ((a & 31) << 6) + (b & 63) | 0
              ];
      }
    }
  } else {
    throw End_of_input;
  }
}

function is_utf8(s) {
  try {
    var _i = 0;
    while(true) {
      var i = _i;
      var match = next_utf8(s, i);
      _i = i + match[0] | 0;
      continue ;
      
    };
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn === End_of_input) {
      return /* true */1;
    } else if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

function escaped_non_utf8(s) {
  var mk_escape = function (x) {
    return Curry._1(Printf.sprintf(/* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "%" */37,
                        /* Int */Block.__(4, [
                            /* Int_X */8,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "%%%X"
                  ]), x);
  };
  var buff = Buffer.create(Caml_int32.imul(s.length, 3));
  var process_trailing_aux = function (_i, j) {
    while(true) {
      var i = _i;
      if (i === j) {
        return i;
      } else {
        var match = s.charCodeAt(i);
        if (match > 191 || match < 128) {
          return i;
        } else {
          _i = i + 1 | 0;
          continue ;
          
        }
      }
    };
  };
  var process_trailing = function (i, n) {
    var j = ((i + n | 0) - 1 | 0) >= s.length ? i + 1 | 0 : process_trailing_aux(i + 1 | 0, i + n | 0);
    if (j === (i + n | 0)) {
      Buffer.add_string(buff, $$String.sub(s, i, n));
    } else {
      var v = $$Array.init(j - i | 0, (function (k) {
              return mk_escape(Caml_string.get(s, i + k | 0));
            }));
      Buffer.add_string(buff, $$String.concat("", $$Array.to_list(v)));
    }
    return j;
  };
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= s.length) {
      return Buffer.contents(buff);
    } else {
      var c = s.charCodeAt(i);
      var exit = 0;
      if (c >= 192) {
        if (c >= 240) {
          if (c >= 248) {
            exit = 1;
          } else {
            _i = process_trailing(i, 4);
            continue ;
            
          }
        } else if (c >= 224) {
          _i = process_trailing(i, 3);
          continue ;
          
        } else {
          _i = process_trailing(i, 2);
          continue ;
          
        }
      } else if (c >= 128) {
        exit = 1;
      } else {
        Buffer.add_char(buff, c);
        _i = i + 1 | 0;
        continue ;
        
      }
      if (exit === 1) {
        Buffer.add_string(buff, mk_escape(c));
        _i = i + 1 | 0;
        continue ;
        
      }
      
    }
  };
}

function escaped_if_non_utf8(s) {
  if (is_utf8(s)) {
    return s;
  } else {
    return escaped_non_utf8(s);
  }
}

function is_valid_ident_initial(param) {
  if (param !== 3 && param !== 0) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function initial_refutation(j, n, s) {
  if (is_valid_ident_initial(lookup(n))) {
    return /* None */0;
  } else {
    var c = $$String.sub(s, 0, j);
    return /* Some */[/* tuple */[
              /* false */0,
              "Invalid character '" + (c + ("' at beginning of identifier \"" + (s + "\".")))
            ]];
  }
}

function is_valid_ident_trailing(param) {
  if (param !== 2 && param < 4) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function trailing_refutation(i, j, n, s) {
  if (is_valid_ident_trailing(lookup(n))) {
    return /* None */0;
  } else {
    var c = $$String.sub(s, i, j);
    return /* Some */[/* tuple */[
              /* false */0,
              "Invalid character '" + (c + ("' in identifier \"" + (s + "\".")))
            ]];
  }
}

function is_unknown(param) {
  if (param >= 4) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function is_ident_part(param) {
  if (param !== 1) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function is_ident_sep(param) {
  if (param !== 3) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function ident_refutation(s) {
  if (s === "..") {
    return /* None */0;
  } else {
    try {
      var match = next_utf8(s, 0);
      var j = match[0];
      var x = initial_refutation(j, match[1], s);
      if (x) {
        return x;
      } else {
        try {
          var _i = j;
          while(true) {
            var i = _i;
            var match$1 = next_utf8(s, i);
            var j$1 = match$1[0];
            var x$1 = trailing_refutation(i, j$1, match$1[1], s);
            if (x$1) {
              return x$1;
            } else {
              _i = i + j$1 | 0;
              continue ;
              
            }
          };
        }
        catch (exn){
          if (exn === End_of_input) {
            return /* None */0;
          } else {
            throw exn;
          }
        }
      }
    }
    catch (raw_exn){
      var exn$1 = Js_exn.internalToOCamlException(raw_exn);
      if (exn$1 === End_of_input) {
        return /* Some */[/* tuple */[
                  /* true */1,
                  "The empty string is not an identifier."
                ]];
      } else if (exn$1[0] === Caml_builtin_exceptions.invalid_argument) {
        return /* Some */[/* tuple */[
                  /* true */1,
                  escaped_non_utf8(s) + ": invalid utf8 sequence."
                ]];
      } else {
        throw exn$1;
      }
    }
  }
}

var tree = Segmenttree$ReactTemplate.make(Unicodetable$ReactTemplate.to_lower);

function lowercase_unicode(unicode) {
  try {
    var match = Segmenttree$ReactTemplate.lookup(unicode, tree);
    if (match[0] >= 3254354) {
      return match[1];
    } else {
      return unicode + match[1] | 0;
    }
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return unicode;
    } else {
      throw exn;
    }
  }
}

function lowercase_first_char(s) {
  if (s === "") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "unicode.ml",
            269,
            2
          ]
        ];
  }
  var match = next_utf8(s, 0);
  var n = lowercase_unicode(match[1]);
  if (n < 128) {
    return $$String.make(1, Char.chr(n));
  } else {
    var match$1 = n < 2048 ? /* tuple */[
        2,
        192
      ] : (
        n < 65536 ? /* tuple */[
            3,
            224
          ] : /* tuple */[
            4,
            240
          ]
      );
    var s$1 = match$1[1];
    var m = match$1[0];
    return $$String.init(m, (function (i) {
                  var j = (n >>> Caml_int32.imul((m - 1 | 0) - i | 0, 6)) & 63;
                  return Char.chr(j + (
                              i ? 128 : s$1
                            ) | 0);
                }));
  }
}

function split_at_first_letter(s) {
  var match = next_utf8(s, 0);
  var n = match[0];
  if (n === 1 && Caml_string.get(s, 0) !== /* "_" */95 || !is_ident_sep(lookup(match[1]))) {
    return /* None */0;
  } else {
    var n$1 = n;
    var p = 0;
    while((function () {
            var match = next_utf8(s, n$1);
            var n$prime = match[0];
            p = n$prime;
            var st = lookup(match[1]);
            return +(n$1 < s.length) && (+(n$prime === 1 && (Caml_string.get(s, n$1) === /* "_" */95 || Caml_string.get(s, n$1) === /* "'" */39)) || is_ident_sep(st) || is_ident_part(st));
          })()) {
      n$1 = n$1 + p | 0;
    };
    var s1 = $$String.sub(s, 0, n$1);
    var s2 = $$String.sub(s, n$1, s.length - n$1 | 0);
    return /* Some */[/* tuple */[
              s1,
              s2
            ]];
  }
}

function is_basic_ascii(s) {
  var ok = [/* true */1];
  $$String.iter((function (c) {
          if (c >= 128) {
            ok[0] = /* false */0;
            return /* () */0;
          } else {
            return 0;
          }
        }), s);
  return ok[0];
}

function ascii_of_ident(s) {
  var len = s.length;
  var has_UU = function (i) {
    if ((i + 2 | 0) < len && Caml_string.get(s, i) === /* "_" */95 && Caml_string.get(s, i + 1 | 0) === /* "U" */85) {
      return +(Caml_string.get(s, i + 2 | 0) === /* "U" */85);
    } else {
      return /* false */0;
    }
  };
  var i = 0;
  while(i < len && Caml_string.get(s, i) < 128 && !has_UU(i)) {
    i = i + 1 | 0;
  };
  if (i === len) {
    return s;
  } else {
    var out = Buffer.create((len << 1));
    Buffer.add_substring(out, s, 0, i);
    while(i < len) {
      var match = next_utf8(s, i);
      var n = match[1];
      if (n >= 128) {
        Curry._1(Printf.bprintf(out, /* Format */[
                  /* String_literal */Block.__(11, [
                      "_UU",
                      /* Int */Block.__(4, [
                          /* Int_x */6,
                          /* Lit_padding */Block.__(0, [
                              /* Zeros */2,
                              4
                            ]),
                          /* No_precision */0,
                          /* Char_literal */Block.__(12, [
                              /* "_" */95,
                              /* End_of_format */0
                            ])
                        ])
                    ]),
                  "_UU%04x_"
                ]), n);
        i = i + match[0] | 0;
      } else if (has_UU(i)) {
        Buffer.add_string(out, "_UUU");
        i = i + 3 | 0;
      } else {
        Buffer.add_char(out, Caml_string.get(s, i));
        i = i + 1 | 0;
      }
    };
    return Buffer.contents(out);
  }
}

function utf8_length(s) {
  var len = s.length;
  var cnt = 0;
  var nc = 0;
  var p = 0;
  while(p < len) {
    var match = Caml_string.get(s, p);
    nc = match >= 192 ? (
        match >= 240 ? (
            match >= 248 ? 0 : 3
          ) : (
            match >= 224 ? 2 : 1
          )
      ) : 0;
    p = p + 1 | 0;
    while(p < len && nc > 0) {
      var match$1 = Caml_string.get(s, p);
      if (match$1 > 191 || match$1 < 128) {
        nc = 0;
      } else {
        p = p + 1 | 0;
        nc = nc - 1 | 0;
      }
    };
    cnt = cnt + 1 | 0;
  };
  return cnt;
}

function utf8_sub(s, start_u, len_u) {
  var len_b = s.length;
  var end_u = start_u + len_u | 0;
  var cnt = 0;
  var nc = 0;
  var p = 0;
  var start_b = len_b;
  while(p < len_b && cnt < end_u) {
    if (cnt <= start_u) {
      start_b = p;
    }
    var match = Caml_string.get(s, p);
    nc = match >= 192 ? (
        match >= 240 ? (
            match >= 248 ? 0 : 3
          ) : (
            match >= 224 ? 2 : 1
          )
      ) : 0;
    p = p + 1 | 0;
    while(p < len_b && nc > 0) {
      var match$1 = Caml_string.get(s, p);
      if (match$1 > 191 || match$1 < 128) {
        nc = 0;
      } else {
        p = p + 1 | 0;
        nc = nc - 1 | 0;
      }
    };
    cnt = cnt + 1 | 0;
  };
  var end_b = p;
  return $$String.sub(s, start_b, end_b - start_b | 0);
}

var classify = lookup;

exports.classify = classify;
exports.ident_refutation = ident_refutation;
exports.is_valid_ident_initial = is_valid_ident_initial;
exports.is_valid_ident_trailing = is_valid_ident_trailing;
exports.is_unknown = is_unknown;
exports.lowercase_first_char = lowercase_first_char;
exports.split_at_first_letter = split_at_first_letter;
exports.is_basic_ascii = is_basic_ascii;
exports.ascii_of_ident = ascii_of_ident;
exports.is_utf8 = is_utf8;
exports.utf8_length = utf8_length;
exports.utf8_sub = utf8_sub;
exports.escaped_if_non_utf8 = escaped_if_non_utf8;
/*  Not a pure module */
