// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Feedback$ReactTemplate = require("./feedback.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Make(funarg) {
  var msg_with_position = function (p, pp) {
    var pp_rec = function (param) {
      if (param) {
        var l = param[1];
        var i = param[0];
        if (l) {
          return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(pp_rec(l), Pp$ReactTemplate.str(".")), Pp$ReactTemplate.$$int(i));
        } else {
          return Pp$ReactTemplate.$$int(i);
        }
      } else {
        return Pp$ReactTemplate.mt(/* () */0);
      }
    };
    return Feedback$ReactTemplate.msg_debug(/* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.h(0, pp_rec(p)), pp));
  };
  var depth_first = function (s) {
    if (Curry._1(funarg[/* success */1], s)) {
      return s;
    } else {
      var _param = Curry._1(funarg[/* branching */0], s);
      while(true) {
        var param = _param;
        if (param) {
          var l = param[1];
          var s$1 = param[0];
          if (l) {
            try {
              return depth_first(s$1);
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                _param = l;
                continue ;
                
              } else {
                throw exn;
              }
            }
          } else {
            return depth_first(s$1);
          }
        } else {
          throw Caml_builtin_exceptions.not_found;
        }
      };
    }
  };
  var debug_depth_first = function (s) {
    var explore = function (p, s) {
      msg_with_position(p, Curry._1(funarg[/* pp */2], s));
      if (Curry._1(funarg[/* success */1], s)) {
        return s;
      } else {
        var _i = 1;
        var p$1 = p;
        var _param = Curry._1(funarg[/* branching */0], s);
        while(true) {
          var param = _param;
          var i = _i;
          if (param) {
            var l = param[1];
            var s$1 = param[0];
            if (l) {
              try {
                return explore(/* :: */[
                            i,
                            p$1
                          ], s$1);
              }
              catch (exn){
                if (exn === Caml_builtin_exceptions.not_found) {
                  _param = l;
                  _i = i + 1 | 0;
                  continue ;
                  
                } else {
                  throw exn;
                }
              }
            } else {
              return explore(/* :: */[
                          i,
                          p$1
                        ], s$1);
            }
          } else {
            throw Caml_builtin_exceptions.not_found;
          }
        };
      }
    };
    return explore(/* :: */[
                1,
                /* [] */0
              ], s);
  };
  var Empty = Caml_exceptions.create("Explore-ReactTemplate.Make(S).Empty");
  var empty = /* tuple */[
    /* [] */0,
    /* [] */0
  ];
  var push = function (x, param) {
    return /* tuple */[
            /* :: */[
              x,
              param[0]
            ],
            param[1]
          ];
  };
  var pop = function (param) {
    var match = param[1];
    var h = param[0];
    if (match) {
      return /* tuple */[
              match[0],
              /* tuple */[
                h,
                match[1]
              ]
            ];
    } else {
      var match$1 = List.rev(h);
      if (match$1) {
        return /* tuple */[
                match$1[0],
                /* tuple */[
                  /* [] */0,
                  match$1[1]
                ]
              ];
      } else {
        throw Empty;
      }
    }
  };
  var breadth_first = function (s) {
    var enqueue = function (_q, _param) {
      while(true) {
        var param = _param;
        var q = _q;
        if (param) {
          var s = param[0];
          if (Curry._1(funarg[/* success */1], s)) {
            return s;
          } else {
            _param = param[1];
            _q = push(s, q);
            continue ;
            
          }
        } else {
          var q$1 = q;
          var match;
          try {
            match = pop(q$1);
          }
          catch (exn){
            if (exn === Empty) {
              throw Caml_builtin_exceptions.not_found;
            } else {
              throw exn;
            }
          }
          return enqueue(match[1], Curry._1(funarg[/* branching */0], match[0]));
        }
      };
    };
    return enqueue(empty, /* :: */[
                s,
                /* [] */0
              ]);
  };
  var debug_breadth_first = function (s) {
    var enqueue = function (_i, p, _q, _param) {
      while(true) {
        var param = _param;
        var q = _q;
        var i = _i;
        if (param) {
          var s = param[0];
          var ps = /* :: */[
            i,
            p
          ];
          msg_with_position(ps, Curry._1(funarg[/* pp */2], s));
          if (Curry._1(funarg[/* success */1], s)) {
            return s;
          } else {
            _param = param[1];
            _q = push(/* tuple */[
                  ps,
                  s
                ], q);
            _i = i + 1 | 0;
            continue ;
            
          }
        } else {
          var q$1 = q;
          var match;
          try {
            match = pop(q$1);
          }
          catch (exn){
            if (exn === Empty) {
              throw Caml_builtin_exceptions.not_found;
            } else {
              throw exn;
            }
          }
          var match$1 = match[0];
          return enqueue(1, match$1[0], match[1], Curry._1(funarg[/* branching */0], match$1[1]));
        }
      };
    };
    return enqueue(1, /* [] */0, empty, /* :: */[
                s,
                /* [] */0
              ]);
  };
  return [
          depth_first,
          debug_depth_first,
          breadth_first,
          debug_breadth_first
        ];
}

exports.Make = Make;
/* Pp-ReactTemplate Not a pure module */
