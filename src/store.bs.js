// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Make() {
  var count = [0];
  var empty = /* array */[];
  var set = function (s, i, v) {
    var len = s.length;
    var nlen = i < len ? len : i + 1 | 0;
    if (0 > i) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "store.ml",
              53,
              11
            ]
          ];
    }
    var ans = Caml_array.caml_make_vect(nlen, /* None */0);
    $$Array.blit(s, 0, ans, 0, len);
    ans[i] = /* Some */[v];
    return ans;
  };
  var get = function (s, i) {
    var len = s.length;
    if (len <= i) {
      return /* None */0;
    } else {
      return s[i];
    }
  };
  var remove = function (s, i) {
    var len = s.length;
    if (0 > i) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "store.ml",
              66,
              11
            ]
          ];
    }
    var ans = Caml_array.caml_make_vect(len, /* None */0);
    $$Array.blit(s, 0, ans, 0, len);
    if (i < len) {
      ans[i] = /* None */0;
    }
    return ans;
  };
  var merge = function (s1, s2) {
    var len1 = s1.length;
    var len2 = s2.length;
    var nlen = len1 < len2 ? len2 : len1;
    var ans = Caml_array.caml_make_vect(nlen, /* None */0);
    $$Array.blit(s2, 0, ans, 0, len2);
    for(var i = 0 ,i_finish = len1 - 1 | 0; i <= i_finish; ++i){
      var v = s1[i];
      if (v) {
        ans[i] = v;
      }
      
    }
    return ans;
  };
  var field = function () {
    var n = count[0];
    count[0] = count[0] + 1 | 0;
    return n;
  };
  return /* module */[
          /* empty */empty,
          /* set */set,
          /* get */get,
          /* remove */remove,
          /* merge */merge,
          /* field */field
        ];
}

exports.Make = Make;
/* No side effect */
