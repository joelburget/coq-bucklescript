// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pp$ReactTemplate = require("../src/pp.bs.js");
var Lib$ReactTemplate = require("../src/lib.bs.js");
var Util$ReactTemplate = require("../src/util.bs.js");
var Names$ReactTemplate = require("../src/names.bs.js");
var Vnorm$ReactTemplate = require("../pretyping/vnorm.bs.js");
var Global$ReactTemplate = require("../src/global.bs.js");
var Tacred$ReactTemplate = require("../src/tacred.bs.js");
var CErrors$ReactTemplate = require("../src/cErrors.bs.js");
var EConstr$ReactTemplate = require("../src/eConstr.bs.js");
var Environ$ReactTemplate = require("../src/environ.bs.js");
var Miscops$ReactTemplate = require("../src/miscops.bs.js");
var Nametab$ReactTemplate = require("../src/nametab.bs.js");
var Summary$ReactTemplate = require("../src/summary.bs.js");
var CClosure$ReactTemplate = require("../src/cClosure.bs.js");
var Goptions$ReactTemplate = require("../src/goptions.bs.js");
var Locusops$ReactTemplate = require("../src/locusops.bs.js");
var Retyping$ReactTemplate = require("../src/retyping.bs.js");
var CWarnings$ReactTemplate = require("../src/cWarnings.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Csymtable$ReactTemplate = require("../kernel/csymtable.bs.js");
var Libobject$ReactTemplate = require("../src/libobject.bs.js");
var Mod_subst$ReactTemplate = require("../src/mod_subst.bs.js");
var Coq_config$ReactTemplate = require("../shims/coq_config.bs.js");
var Patternops$ReactTemplate = require("../src/patternops.bs.js");
var Conv_oracle$ReactTemplate = require("../src/conv_oracle.bs.js");
var Reductionops$ReactTemplate = require("../src/reductionops.bs.js");

function cbv_vm(env, sigma, c) {
  if (Coq_config$ReactTemplate.bytecode_compiler) {
    var ctyp = Retyping$ReactTemplate.get_type_of(/* None */0, /* None */0, env, sigma, c);
    return Vnorm$ReactTemplate.cbv_vm(env, sigma, c, ctyp);
  } else {
    return Tacred$ReactTemplate.compute(env, sigma)(c);
  }
}

function whd_cbn(flags, env, sigma, t) {
  var match = Reductionops$ReactTemplate.whd_state_gen(/* None */0, /* true */1, /* true */1, flags, env, sigma)(/* tuple */[
        t,
        Reductionops$ReactTemplate.Stack[/* empty */2]
      ]);
  return Reductionops$ReactTemplate.Stack[/* zip */21](/* Some */[/* true */1], sigma, match[0]);
}

var simplIsCbn = [/* false */0];

Goptions$ReactTemplate.declare_bool_option(/* None */0, /* record */[
      /* optdepr : false */0,
      /* optname */"Plug the simpl tactic to the new cbn mechanism",
      /* optkey : :: */[
        "SimplIsCbn",
        /* [] */0
      ],
      /* optread */(function () {
          return simplIsCbn[0];
        }),
      /* optwrite */(function (a) {
          simplIsCbn[0] = a;
          return /* () */0;
        })
    ]);

function cache_strategy(param) {
  return Curry._2(Util$ReactTemplate.List[/* iter */9], (function (param) {
                var lev = param[0];
                return Curry._2(Util$ReactTemplate.List[/* iter */9], (function (q) {
                              var ref = q;
                              var l = lev;
                              var k;
                              k = ref.tag ? /* ConstKey */Block.__(0, [ref[0]]) : /* VarKey */Block.__(1, [ref[0]]);
                              Global$ReactTemplate.set_strategy(k, l);
                              switch (k.tag | 0) {
                                case 0 : 
                                    var sp = k[0];
                                    var exit = 0;
                                    if (typeof l === "number") {
                                      if (l !== 0) {
                                        return Csymtable$ReactTemplate.set_opaque_const(sp);
                                      } else {
                                        exit = 1;
                                      }
                                    } else {
                                      exit = 1;
                                    }
                                    if (exit === 1) {
                                      var cb = Global$ReactTemplate.lookup_constant(sp);
                                      var match = cb[/* const_body */1];
                                      switch (match.tag | 0) {
                                        case 0 : 
                                        case 1 : 
                                            return Csymtable$ReactTemplate.set_transparent_const(sp);
                                        case 2 : 
                                            return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["set_transparent_const"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Cannot make"), Pp$ReactTemplate.spc(/* () */0)), Nametab$ReactTemplate.pr_global_env(Names$ReactTemplate.Id[/* Set */9][/* empty */0], /* ConstRef */Block.__(1, [sp]))), Pp$ReactTemplate.spc(/* () */0)), Pp$ReactTemplate.str("transparent because it was declared opaque.")));
                                        
                                      }
                                    }
                                    break;
                                case 1 : 
                                case 2 : 
                                    return /* () */0;
                                
                              }
                            }), param[1]);
              }), param[1]);
}

function subst_strategy(param) {
  var match = param[1];
  var subs = param[0];
  return /* tuple */[
          match[0],
          Curry._2(Util$ReactTemplate.List[/* smartmap */65], (function (entry) {
                  var ql = entry[1];
                  var ql$prime = Curry._2(Util$ReactTemplate.List[/* smartmap */65], (function (param) {
                          return Mod_subst$ReactTemplate.subst_evaluable_reference(subs, param);
                        }), ql);
                  if (ql === ql$prime) {
                    return entry;
                  } else {
                    return /* tuple */[
                            entry[0],
                            ql$prime
                          ];
                  }
                }), match[1])
        ];
}

function classify_strategy(obj) {
  if (obj[0]) {
    return /* Dispose */0;
  } else {
    return /* Substitute */Block.__(0, [obj]);
  }
}

function disch_ref(ref) {
  if (ref.tag) {
    var c = ref[0];
    var c$prime = Lib$ReactTemplate.discharge_con(c);
    if (c === c$prime) {
      return /* Some */[ref];
    } else {
      return /* Some */[/* EvalConstRef */Block.__(1, [c$prime])];
    }
  } else if (Lib$ReactTemplate.is_in_section(/* VarRef */Block.__(0, [ref[0]]))) {
    return /* None */0;
  } else {
    return /* Some */[ref];
  }
}

function discharge_strategy(param) {
  var match = param[1];
  if (match[0]) {
    return /* None */0;
  } else {
    var f = disch_ref;
    var l = match[1];
    var l$prime = Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (param, str) {
            var ql$prime = Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (q, ql) {
                    var match = Curry._1(f, q);
                    if (match) {
                      return /* :: */[
                              match[0],
                              ql
                            ];
                    } else {
                      return ql;
                    }
                  }), param[1], /* [] */0);
            if (Curry._1(Util$ReactTemplate.List[/* is_empty */45], ql$prime)) {
              return str;
            } else {
              return /* :: */[
                      /* tuple */[
                        param[0],
                        ql$prime
                      ],
                      str
                    ];
            }
          }), l, /* [] */0);
    if (Curry._1(Util$ReactTemplate.List[/* is_empty */45], l$prime)) {
      return /* None */0;
    } else {
      return /* Some */[/* tuple */[
                /* false */0,
                l$prime
              ]];
    }
  }
}

var init = Libobject$ReactTemplate.default_object("STRATEGY");

var inStrategy = Libobject$ReactTemplate.declare_object(/* record */[
      /* object_name */init[/* object_name */0],
      /* cache_function */(function (param) {
          return cache_strategy(param[1]);
        }),
      /* load_function */(function (_, param) {
          return cache_strategy(param[1]);
        }),
      /* open_function */init[/* open_function */3],
      /* classify_function */classify_strategy,
      /* subst_function */subst_strategy,
      /* discharge_function */discharge_strategy,
      /* rebuild_function */init[/* rebuild_function */7]
    ]);

function set_strategy(local, str) {
  return Lib$ReactTemplate.add_anonymous_leaf(/* None */0, Curry._1(inStrategy, /* tuple */[
                  local,
                  str
                ]));
}

function make_flag_constant(param) {
  if (param.tag) {
    return CClosure$ReactTemplate.RedFlags[/* fCONST */7](param[0]);
  } else {
    return CClosure$ReactTemplate.RedFlags[/* fVAR */8](param[0]);
  }
}

function make_flag(env, f) {
  var red = CClosure$ReactTemplate.RedFlags[/* no_red */9];
  var red$1 = f[/* rBeta */0] ? CClosure$ReactTemplate.RedFlags[/* red_add */10](red, CClosure$ReactTemplate.RedFlags[/* fBETA */0]) : red;
  var red$2 = f[/* rMatch */1] ? CClosure$ReactTemplate.RedFlags[/* red_add */10](red$1, CClosure$ReactTemplate.RedFlags[/* fMATCH */3]) : red$1;
  var red$3 = f[/* rFix */2] ? CClosure$ReactTemplate.RedFlags[/* red_add */10](red$2, CClosure$ReactTemplate.RedFlags[/* fFIX */4]) : red$2;
  var red$4 = f[/* rCofix */3] ? CClosure$ReactTemplate.RedFlags[/* red_add */10](red$3, CClosure$ReactTemplate.RedFlags[/* fCOFIX */5]) : red$3;
  var red$5 = f[/* rZeta */4] ? CClosure$ReactTemplate.RedFlags[/* red_add */10](red$4, CClosure$ReactTemplate.RedFlags[/* fZETA */6]) : red$4;
  if (f[/* rDelta */5]) {
    var red$6 = CClosure$ReactTemplate.RedFlags[/* red_add */10](red$5, CClosure$ReactTemplate.RedFlags[/* fDELTA */1]);
    var red$7 = CClosure$ReactTemplate.RedFlags[/* red_add_transparent */12](red$6, Conv_oracle$ReactTemplate.get_transp_state(Environ$ReactTemplate.oracle(env)));
    return Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (v, red) {
                  return CClosure$ReactTemplate.RedFlags[/* red_sub */11](red, make_flag_constant(v));
                }), f[/* rConst */6], red$7);
  } else {
    var red$8 = CClosure$ReactTemplate.RedFlags[/* red_add_transparent */12](CClosure$ReactTemplate.RedFlags[/* red_add */10](red$5, CClosure$ReactTemplate.RedFlags[/* fDELTA */1]), CClosure$ReactTemplate.all_opaque);
    return Curry._3(Util$ReactTemplate.List[/* fold_right */14], (function (v, red) {
                  return CClosure$ReactTemplate.RedFlags[/* red_add */10](red, make_flag_constant(v));
                }), f[/* rConst */6], red$8);
  }
}

var reduction_tab = [Util$ReactTemplate.$$String[/* Map */39][/* empty */0]];

var red_expr_tab = Summary$ReactTemplate.ref(/* None */0, "Declare Reduction", Util$ReactTemplate.$$String[/* Map */39][/* empty */0]);

function declare_reduction(s, f) {
  if (Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], s, reduction_tab[0]) || Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], s, red_expr_tab[0])) {
    return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Redexpr.declare_reduction"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("There is already a reduction expression of name "), Pp$ReactTemplate.str(s)));
  } else {
    reduction_tab[0] = Curry._3(Util$ReactTemplate.$$String[/* Map */39][/* add */3], s, f, reduction_tab[0]);
    return /* () */0;
  }
}

function check_custom(param) {
  if (typeof param === "number") {
    return /* () */0;
  } else if (param.tag === 8) {
    var s = param[0];
    if (Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], s, reduction_tab[0]) || Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], s, red_expr_tab[0])) {
      return 0;
    } else {
      return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Redexpr.check_custom"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("Reference to undefined reduction expression "), Pp$ReactTemplate.str(s)));
    }
  } else {
    return /* () */0;
  }
}

function decl_red_expr(s, e) {
  if (Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], s, reduction_tab[0]) || Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* mem */2], s, red_expr_tab[0])) {
    return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Redexpr.decl_red_expr"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("There is already a reduction expression of name "), Pp$ReactTemplate.str(s)));
  } else {
    check_custom(e);
    red_expr_tab[0] = Curry._3(Util$ReactTemplate.$$String[/* Map */39][/* add */3], s, e, red_expr_tab[0]);
    return /* () */0;
  }
}

function out_arg(param) {
  if (param.tag) {
    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Unevaluated or_var variable."));
  } else {
    return param[0];
  }
}

function out_with_occurrences(param) {
  return /* tuple */[
          Locusops$ReactTemplate.occurrences_map(Curry._1(Util$ReactTemplate.List[/* map */10], out_arg), param[0]),
          param[1]
        ];
}

function e_red(f, env, evm, c) {
  return /* tuple */[
          evm,
          Curry._3(f, env, evm, c)
        ];
}

function contextualize(f, g, param) {
  if (param) {
    var match = param[0];
    var c = match[1];
    var l = Locusops$ReactTemplate.occurrences_map(Curry._1(Util$ReactTemplate.List[/* map */10], out_arg), match[0]);
    var match$1;
    match$1 = c.tag ? /* tuple */[
        /* false */0,
        c[0],
        f
      ] : /* tuple */[
        /* true */1,
        /* PRef */Block.__(0, [Tacred$ReactTemplate.global_of_evaluable_reference(c[0])]),
        f
      ];
    var h = match$1[2];
    var b = match$1[0];
    var partial_arg_001 = match$1[1];
    var partial_arg = /* tuple */[
      l,
      partial_arg_001
    ];
    var partial_arg$1 = function (param, param$1, param$2) {
      return Tacred$ReactTemplate.contextually(b, partial_arg, (function () {
                    return h;
                  }), param, param$1, param$2);
    };
    return (function (param, param$1, param$2) {
        return e_red(partial_arg$1, param, param$1, param$2);
      });
  } else {
    return (function (param, param$1, param$2) {
        return e_red(g, param, param$1, param$2);
      });
  }
}

var warn_simpl_unfolding_modifiers = CWarnings$ReactTemplate.create("simpl-unfolding-modifiers", "tactics", /* None */0, (function () {
        return Pp$ReactTemplate.strbrk("The legacy simpl ignores constant unfolding modifiers.");
      }));

function reduction_of_red_expr(env) {
  var reduction_of_red_expr$1 = function (param) {
    if (typeof param === "number") {
      return /* tuple */[
              (function (param, param$1, param$2) {
                  return e_red(Tacred$ReactTemplate.hnf_constr, param, param$1, param$2);
                }),
              /* DEFAULTcast */2
            ];
    } else {
      switch (param.tag | 0) {
        case 0 : 
            if (param[0]) {
              return /* tuple */[
                      (function (param, param$1, param$2) {
                          return e_red(Tacred$ReactTemplate.try_red_product, param, param$1, param$2);
                        }),
                      /* DEFAULTcast */2
                    ];
            } else {
              return /* tuple */[
                      (function (param, param$1, param$2) {
                          return e_red(Tacred$ReactTemplate.red_product, param, param$1, param$2);
                        }),
                      /* DEFAULTcast */2
                    ];
            }
        case 1 : 
            var f = param[0];
            var whd_am;
            if (simplIsCbn[0]) {
              var partial_arg = make_flag(env, f);
              whd_am = (function (param, param$1, param$2) {
                  return whd_cbn(partial_arg, param, param$1, param$2);
                });
            } else {
              whd_am = Tacred$ReactTemplate.whd_simpl;
            }
            var am;
            if (simplIsCbn[0]) {
              var flags = make_flag(env, f);
              am = (function (param, param$1, param$2) {
                  return Reductionops$ReactTemplate.strong((function (param, param$1, param$2) {
                                return whd_cbn(flags, param, param$1, param$2);
                              }), param, param$1, param$2);
                });
            } else {
              am = Tacred$ReactTemplate.simpl;
            }
            if (!(simplIsCbn[0] || Curry._1(Util$ReactTemplate.List[/* is_empty */45], f[/* rConst */6]))) {
              Curry._2(warn_simpl_unfolding_modifiers, /* None */0, /* () */0);
            }
            return /* tuple */[
                    contextualize(am, am, param[1]),
                    /* DEFAULTcast */2
                  ];
        case 2 : 
            var partial_arg$1 = make_flag(env, param[0]);
            var partial_arg$2 = function (param, param$1, param$2) {
              return Tacred$ReactTemplate.cbv_norm_flags(partial_arg$1, param, param$1, param$2);
            };
            return /* tuple */[
                    (function (param, param$1, param$2) {
                        return e_red(partial_arg$2, param, param$1, param$2);
                      }),
                    /* DEFAULTcast */2
                  ];
        case 3 : 
            var flags$1 = make_flag(env, param[0]);
            var partial_arg$3 = function (param, param$1, param$2) {
              return Reductionops$ReactTemplate.strong((function (param, param$1, param$2) {
                            return whd_cbn(flags$1, param, param$1, param$2);
                          }), param, param$1, param$2);
            };
            return /* tuple */[
                    (function (param, param$1, param$2) {
                        return e_red(partial_arg$3, param, param$1, param$2);
                      }),
                    /* DEFAULTcast */2
                  ];
        case 4 : 
            var partial_arg$4 = make_flag(env, param[0]);
            var partial_arg$5 = function (param, param$1, param$2) {
              return Reductionops$ReactTemplate.clos_norm_flags(partial_arg$4, param, param$1, param$2);
            };
            return /* tuple */[
                    (function (param, param$1, param$2) {
                        return e_red(partial_arg$5, param, param$1, param$2);
                      }),
                    /* DEFAULTcast */2
                  ];
        case 5 : 
            var partial_arg$6 = Curry._2(Util$ReactTemplate.List[/* map */10], out_with_occurrences, param[0]);
            var partial_arg$7 = function (param, param$1, param$2) {
              return Tacred$ReactTemplate.unfoldn(partial_arg$6, param, param$1, param$2);
            };
            return /* tuple */[
                    (function (param, param$1, param$2) {
                        return e_red(partial_arg$7, param, param$1, param$2);
                      }),
                    /* DEFAULTcast */2
                  ];
        case 6 : 
            var cl = param[0];
            return /* tuple */[
                    (function (param, param$1, param$2) {
                        return e_red((function (param, param$1, param$2) {
                                      return Tacred$ReactTemplate.fold_commands(cl, param, param$1, param$2);
                                    }), param, param$1, param$2);
                      }),
                    /* DEFAULTcast */2
                  ];
        case 7 : 
            var partial_arg$8 = Curry._2(Util$ReactTemplate.List[/* map */10], out_with_occurrences, param[0]);
            return /* tuple */[
                    (function (param, param$1, param$2) {
                        return Tacred$ReactTemplate.pattern_occs(partial_arg$8, param, param$1, param$2);
                      }),
                    /* DEFAULTcast */2
                  ];
        case 8 : 
            var s = param[0];
            try {
              var partial_arg$9 = Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* find */21], s, reduction_tab[0]);
              return /* tuple */[
                      (function (param, param$1, param$2) {
                          return e_red(partial_arg$9, param, param$1, param$2);
                        }),
                      /* DEFAULTcast */2
                    ];
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                try {
                  return reduction_of_red_expr$1(Curry._2(Util$ReactTemplate.$$String[/* Map */39][/* find */21], s, red_expr_tab[0]));
                }
                catch (exn$1){
                  if (exn$1 === Caml_builtin_exceptions.not_found) {
                    return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Redexpr.reduction_of_red_expr"], Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("unknown user-defined reduction \""), Pp$ReactTemplate.str(s)), Pp$ReactTemplate.str("\"")));
                  } else {
                    throw exn$1;
                  }
                }
              } else {
                throw exn;
              }
            }
            break;
        case 9 : 
            return /* tuple */[
                    contextualize(cbv_vm, cbv_vm, param[0]),
                    /* VMcast */0
                  ];
        
      }
    }
  };
  return reduction_of_red_expr$1;
}

function subst_red_expr(subs) {
  return (function (param) {
      return Miscops$ReactTemplate.map_red_expr_gen((function (param) {
                    var subst = subs;
                    var c = param;
                    return EConstr$ReactTemplate.of_constr(Mod_subst$ReactTemplate.subst_mps(subst, EConstr$ReactTemplate.Unsafe[/* to_constr */0](c)));
                  }), (function (param) {
                    return Mod_subst$ReactTemplate.subst_evaluable_reference(subs, param);
                  }), (function (param) {
                    return Patternops$ReactTemplate.subst_pattern(subs, param);
                  }), param);
    });
}

var init$1 = Libobject$ReactTemplate.default_object("REDUCTION");

var inReduction = Libobject$ReactTemplate.declare_object(/* record */[
      /* object_name */init$1[/* object_name */0],
      /* cache_function */(function (param) {
          var match = param[1];
          return decl_red_expr(match[1], match[2]);
        }),
      /* load_function */(function (_, param) {
          var match = param[1];
          return decl_red_expr(match[1], match[2]);
        }),
      /* open_function */init$1[/* open_function */3],
      /* classify_function */(function (obj) {
          if (obj[0]) {
            return /* Dispose */0;
          } else {
            return /* Substitute */Block.__(0, [obj]);
          }
        }),
      /* subst_function */(function (param) {
          var match = param[1];
          return /* tuple */[
                  match[0],
                  match[1],
                  subst_red_expr(param[0])(match[2])
                ];
        }),
      /* discharge_function */init$1[/* discharge_function */6],
      /* rebuild_function */init$1[/* rebuild_function */7]
    ]);

function declare_red_expr(locality, s, expr) {
  return Lib$ReactTemplate.add_anonymous_leaf(/* None */0, Curry._1(inReduction, /* tuple */[
                  locality,
                  s,
                  expr
                ]));
}

exports.out_with_occurrences = out_with_occurrences;
exports.reduction_of_red_expr = reduction_of_red_expr;
exports.declare_reduction = declare_reduction;
exports.declare_red_expr = declare_red_expr;
exports.set_strategy = set_strategy;
exports.cbv_vm = cbv_vm;
/*  Not a pure module */
