// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Lib$ReactTemplate = require("./lib.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Vars$ReactTemplate = require("./vars.bs.js");
var Decls$ReactTemplate = require("./decls.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Global$ReactTemplate = require("./global.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Summary$ReactTemplate = require("./summary.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Globnames$ReactTemplate = require("./globnames.bs.js");
var Libobject$ReactTemplate = require("./libobject.bs.js");
var Mod_subst$ReactTemplate = require("./mod_subst.bs.js");
var Reduction$ReactTemplate = require("./reduction.bs.js");

function compare(gr1, gr2) {
  if (gr1.tag) {
    if (gr2.tag) {
      return Curry._2(Names$ReactTemplate.Constant[/* CanOrd */9][/* compare */0], gr1[0], gr2[0]);
    } else {
      return 1;
    }
  } else if (gr2.tag) {
    return -1;
  } else {
    return Curry._2(Names$ReactTemplate.Id[/* compare */1], gr1[0], gr2[0]);
  }
}

var Evalreford = /* module */[/* compare */compare];

var Evalrefmap = Curry._1(Util$ReactTemplate.$$Map[/* Make */0], Evalreford);

var head_map = Summary$ReactTemplate.ref(/* None */0, "Head_decl", Evalrefmap[/* empty */0]);

function variable_head(id) {
  return Curry._2(Evalrefmap[/* find */21], /* EvalVarRef */Block.__(0, [id]), head_map[0]);
}

function constant_head(cst) {
  return Curry._2(Evalrefmap[/* find */21], /* EvalConstRef */Block.__(1, [cst]), head_map[0]);
}

function kind_of_head(env, t) {
  var aux = function (_k, _l, _t, _b) {
    while(true) {
      var b = _b;
      var t = _t;
      var l = _l;
      var k = _k;
      var match = Constr$ReactTemplate.kind(Reduction$ReactTemplate.whd_betaiotazeta(env, t));
      switch (match.tag | 0) {
        case 0 : 
            var n = match[0];
            if (n > k) {
              return /* NotImmediatelyComputableHead */1;
            } else {
              return /* FlexibleHead */Block.__(1, [
                        k,
                        (k + 1 | 0) - n | 0,
                        Curry._1(Util$ReactTemplate.List[/* length */0], l),
                        b
                      ]);
            }
        case 1 : 
            var id = match[0];
            try {
              return on_subterm(k, l, b, variable_head(id));
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                var match$1 = Environ$ReactTemplate.lookup_named(id, env);
                if (match$1.tag) {
                  _t = match$1[1];
                  continue ;
                  
                } else {
                  return /* NotImmediatelyComputableHead */1;
                }
              } else {
                throw exn;
              }
            }
            break;
        case 2 : 
        case 3 : 
            return /* NotImmediatelyComputableHead */1;
        case 5 : 
            _t = match[0];
            continue ;
            case 7 : 
            var c = match[2];
            if (l) {
              _t = Vars$ReactTemplate.subst1(l[0], c);
              _l = l[1];
              continue ;
              
            } else {
              if (b) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "heads.ml",
                        86,
                        15
                      ]
                    ];
              }
              _t = c;
              _l = /* [] */0;
              _k = k + 1 | 0;
              continue ;
              
            }
            break;
        case 8 : 
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "heads.ml",
                    90,
                    15
                  ]
                ];
        case 9 : 
            _t = match[0];
            _l = Util$ReactTemplate.$at(Util$ReactTemplate.$$Array[/* to_list */9](match[1]), l);
            continue ;
            case 10 : 
            var cst = match[0][0];
            try {
              return on_subterm(k, l, b, constant_head(cst));
            }
            catch (exn$1){
              if (exn$1 === Caml_builtin_exceptions.not_found) {
                return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("constant not found in kind_of_head: "), Names$ReactTemplate.Constant[/* print */16](cst)), Pp$ReactTemplate.str(".")));
              } else {
                throw exn$1;
              }
            }
            break;
        case 13 : 
            _b = /* true */1;
            _t = match[2];
            _l = /* [] */0;
            continue ;
            case 14 : 
            var match$2 = match[0][0];
            var n$1 = Caml_array.caml_array_get(match$2[0], match$2[1]);
            try {
              return aux(k, /* [] */0, Curry._2(Util$ReactTemplate.List[/* nth */3], l, n$1), /* true */1);
            }
            catch (raw_exn){
              var exn$2 = Js_exn.internalToOCamlException(raw_exn);
              if (exn$2[0] === Caml_builtin_exceptions.failure) {
                return /* FlexibleHead */Block.__(1, [
                          (k + n$1 | 0) + 1 | 0,
                          (k + n$1 | 0) + 1 | 0,
                          0,
                          /* true */1
                        ]);
              } else {
                throw exn$2;
              }
            }
            break;
        case 12 : 
        case 15 : 
            if (b) {
              return /* NotImmediatelyComputableHead */1;
            } else {
              return /* ConstructorHead */0;
            }
        case 16 : 
            try {
              return on_subterm(k, /* :: */[
                          match[1],
                          l
                        ], b, constant_head(Names$ReactTemplate.Projection[/* constant */2](match[0])));
            }
            catch (exn$3){
              if (exn$3 === Caml_builtin_exceptions.not_found) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "heads.ml",
                        95,
                        25
                      ]
                    ];
              } else {
                throw exn$3;
              }
            }
            break;
        default:
          return /* RigidHead */Block.__(0, [/* RigidType */0]);
      }
    };
  };
  var on_subterm = function (k, l, with_case, x) {
    if (typeof x === "number") {
      if (x === 0 && with_case) {
        return /* NotImmediatelyComputableHead */1;
      } else {
        return x;
      }
    } else if (x.tag) {
      var i = x[1];
      var n = x[0];
      var m = Curry._1(Util$ReactTemplate.List[/* length */0], l);
      var match;
      if (n > m) {
        var a = i <= m ? Vars$ReactTemplate.lift(n - m | 0)(Curry._2(Util$ReactTemplate.List[/* nth */3], l, i - 1 | 0)) : Constr$ReactTemplate.mkRel((n - i | 0) + 1 | 0);
        match = /* tuple */[
          (k + n | 0) - m | 0,
          /* [] */0,
          a
        ];
      } else {
        match = /* tuple */[
          k,
          Curry._2(Util$ReactTemplate.List[/* skipn */107], n, l),
          Curry._2(Util$ReactTemplate.List[/* nth */3], l, i - 1 | 0)
        ];
      }
      var l$prime = Util$ReactTemplate.$at(Curry._2(Util$ReactTemplate.List[/* make */56], x[2], Constr$ReactTemplate.mkMeta(0)), match[1]);
      return aux(match[0], l$prime, match[2], x[3] || with_case);
    } else {
      return x;
    }
  };
  return aux(0, /* [] */0, t, /* false */0);
}

function compute_head(param) {
  if (param.tag) {
    var cst = param[0];
    var env = Global$ReactTemplate.env(/* () */0);
    var cb = Environ$ReactTemplate.lookup_constant(cst, env);
    var is_Def = function (param) {
      switch (param.tag | 0) {
        case 1 : 
            return /* true */1;
        case 0 : 
        case 2 : 
            return /* false */0;
        
      }
    };
    var body = cb[/* const_proj */5] === /* None */0 && is_Def(cb[/* const_body */1]) ? Global$ReactTemplate.body_of_constant(cst) : /* None */0;
    if (body) {
      return kind_of_head(env, body[0][0]);
    } else {
      return /* RigidHead */Block.__(0, [/* RigidParameter */Block.__(0, [cst])]);
    }
  } else {
    var id = param[0];
    var match = Global$ReactTemplate.lookup_named(id);
    if (match.tag) {
      if (Decls$ReactTemplate.variable_opacity(id)) {
        return /* RigidHead */Block.__(0, [/* RigidVar */Block.__(1, [id])]);
      } else {
        return kind_of_head(Global$ReactTemplate.env(/* () */0), match[1]);
      }
    } else {
      return /* RigidHead */Block.__(0, [/* RigidVar */Block.__(1, [id])]);
    }
  }
}

function is_rigid(env, t) {
  var match = kind_of_head(env, t);
  if (typeof match === "number") {
    if (match) {
      return /* false */0;
    } else {
      return /* true */1;
    }
  } else if (match.tag) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function load_head(_, param) {
  var match = param[1];
  head_map[0] = Curry._3(Evalrefmap[/* add */3], match[0], match[1], head_map[0]);
  return /* () */0;
}

function cache_head(o) {
  return load_head(1, o);
}

function subst_head_approximation(subst, k) {
  if (typeof k === "number") {
    return k;
  } else if (k.tag) {
    return k;
  } else {
    var match = k[0];
    if (typeof match === "number") {
      return k;
    } else if (match.tag) {
      return k;
    } else {
      var match$1 = Mod_subst$ReactTemplate.subst_con_kn(subst, match[0]);
      var c = match$1[1];
      if (Constr$ReactTemplate.isConst(c) && Names$ReactTemplate.Constant[/* equal */12](Constr$ReactTemplate.destConst(c)[0], match$1[0])) {
        return k;
      } else {
        return kind_of_head(Global$ReactTemplate.env(/* () */0), c);
      }
    }
  }
}

function subst_head(param) {
  var match = param[1];
  var subst = param[0];
  return /* tuple */[
          Mod_subst$ReactTemplate.subst_evaluable_reference(subst, match[0]),
          subst_head_approximation(subst, match[1])
        ];
}

function discharge_head(param) {
  var match = param[1];
  var ref = match[0];
  if (ref.tag) {
    return /* Some */[/* tuple */[
              /* EvalConstRef */Block.__(1, [Globnames$ReactTemplate.pop_con(ref[0])]),
              match[1]
            ]];
  } else {
    return /* None */0;
  }
}

function rebuild_head(param) {
  var ref = param[0];
  return /* tuple */[
          ref,
          compute_head(ref)
        ];
}

var init = Libobject$ReactTemplate.default_object("HEAD");

var inHead = Libobject$ReactTemplate.declare_object(/* record */[
      /* object_name */init[/* object_name */0],
      /* cache_function */cache_head,
      /* load_function */load_head,
      /* open_function */init[/* open_function */3],
      /* classify_function */(function (x) {
          return /* Substitute */Block.__(0, [x]);
        }),
      /* subst_function */subst_head,
      /* discharge_function */discharge_head,
      /* rebuild_function */rebuild_head
    ]);

function declare_head(c) {
  var hd = compute_head(c);
  return Lib$ReactTemplate.add_anonymous_leaf(/* None */0, Curry._1(inHead, /* tuple */[
                  c,
                  hd
                ]));
}

exports.declare_head = declare_head;
exports.is_rigid = is_rigid;
/* Evalrefmap Not a pure module */
