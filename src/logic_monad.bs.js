// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Monad$ReactTemplate = require("./monad.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Control$ReactTemplate = require("../shims/control.bs.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");
var Feedback$ReactTemplate = require("./feedback.bs.js");

var Exception = Caml_exceptions.create("Logic_monad-ReactTemplate.Exception");

var Timeout = Caml_exceptions.create("Logic_monad-ReactTemplate.Timeout");

var TacticFailure = Caml_exceptions.create("Logic_monad-ReactTemplate.TacticFailure");

CErrors$ReactTemplate.register_handler((function (param) {
        if (param === Timeout) {
          return CErrors$ReactTemplate.user_err(/* None */0, /* Some */["Some timeout function"], Pp$ReactTemplate.str("Timeout!"));
        } else if (param[0] === Exception) {
          return CErrors$ReactTemplate.print(/* None */0, param[1]);
        } else if (param[0] === TacticFailure) {
          return CErrors$ReactTemplate.print(/* None */0, param[1]);
        } else {
          throw CErrors$ReactTemplate.Unhandled;
        }
      }));

function $$return(a) {
  return (function () {
      return a;
    });
}

function $great$great$eq(a, k) {
  return (function () {
      return Curry._2(k, Curry._1(a, /* () */0), /* () */0);
    });
}

function $great$great(a, k) {
  return (function () {
      Curry._1(a, /* () */0);
      return Curry._1(k, /* () */0);
    });
}

function map(f, a) {
  return (function () {
      return Curry._1(f, Curry._1(a, /* () */0));
    });
}

var include = Monad$ReactTemplate.Make(/* module */[
      /* return */$$return,
      /* >>= */$great$great$eq,
      /* >> */$great$great,
      /* map */map
    ]);

var $$return$1 = include[0];

var $great$great$eq$1 = include[1];

function ignore(a) {
  return (function () {
      Curry._1(a, /* () */0);
      return /* () */0;
    });
}

function ref(a) {
  return (function () {
      return [a];
    });
}

function $colon$eq(r, a) {
  return (function () {
      r[0] = a;
      return /* () */0;
    });
}

function $bang(r) {
  return (function () {
      return r[0];
    });
}

function raise(info, e) {
  return (function () {
      return Exninfo$ReactTemplate.raise(info, [
                  Exception,
                  e
                ]);
    });
}

function $$catch(s, h) {
  return (function () {
      try {
        return Curry._1(s, /* () */0);
      }
      catch (raw_src){
        var src = Js_exn.internalToOCamlException(raw_src);
        if (src[0] === Exception) {
          var match = CErrors$ReactTemplate.push(src);
          return Curry._2(h, /* tuple */[
                      src[1],
                      match[1]
                    ], /* () */0);
        } else {
          throw src;
        }
      }
    });
}

function read_line() {
  try {
    return Pervasives.read_line(/* () */0);
  }
  catch (raw_e){
    var e = Js_exn.internalToOCamlException(raw_e);
    var match = CErrors$ReactTemplate.push(e);
    return raise(/* Some */[match[1]], match[0])(/* () */0);
  }
}

function print_char(c) {
  return (function () {
      return Pervasives.print_char(c);
    });
}

function timeout(n, t) {
  return (function () {
      return Control$ReactTemplate.timeout(n, t, /* () */0, [
                  Exception,
                  Timeout
                ]);
    });
}

function make(f) {
  return (function () {
      try {
        return Curry._1(f, /* () */0);
      }
      catch (raw_e){
        var e = Js_exn.internalToOCamlException(raw_e);
        if (CErrors$ReactTemplate.noncritical(e)) {
          var match = CErrors$ReactTemplate.push(e);
          return Util$ReactTemplate.iraise(/* tuple */[
                      [
                        Exception,
                        match[0]
                      ],
                      match[1]
                    ]);
        } else {
          throw e;
        }
      }
    });
}

function print_debug(s) {
  return make((function () {
                return Feedback$ReactTemplate.msg_info(/* None */0, s);
              }));
}

function print_info(s) {
  return make((function () {
                return Feedback$ReactTemplate.msg_info(/* None */0, s);
              }));
}

function print_warning(s) {
  return make((function () {
                return Feedback$ReactTemplate.msg_warning(/* None */0, s);
              }));
}

function print_notice(s) {
  return make((function () {
                return Feedback$ReactTemplate.msg_notice(/* None */0, s);
              }));
}

function run(x) {
  try {
    return Curry._1(x, /* () */0);
  }
  catch (raw_src){
    var src = Js_exn.internalToOCamlException(raw_src);
    if (src[0] === Exception) {
      var match = CErrors$ReactTemplate.push(src);
      return Util$ReactTemplate.iraise(/* tuple */[
                  src[1],
                  match[1]
                ]);
    } else {
      throw src;
    }
  }
}

function $$return$2(x) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(cons, x, s, nil);
            })];
}

function $great$great$eq$2(m, f) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, nil, (function (x, s, next) {
                            return Curry._3(Curry._1(f, x)[/* iolist */0], s, next, cons);
                          }));
            })];
}

function $great$great$1(m, f) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, nil, (function (_, s, next) {
                            return Curry._3(f[/* iolist */0], s, next, cons);
                          }));
            })];
}

function map$1(f, m) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, nil, (function (x, s, next) {
                            return Curry._3(cons, Curry._1(f, x), s, next);
                          }));
            })];
}

function zero(e) {
  return /* record */[/* iolist */(function (_, nil, _$1) {
              return Curry._1(nil, e);
            })];
}

function plus(m1, m2) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m1[/* iolist */0], s, (function (e) {
                            return Curry._3(Curry._1(m2, e)[/* iolist */0], s, nil, cons);
                          }), cons);
            })];
}

function ignore$1(m) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, nil, (function (_, s, next) {
                            return Curry._3(cons, /* () */0, s, next);
                          }));
            })];
}

function lift(m) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._2($great$great$eq$1, m, (function (x) {
                            return Curry._3(cons, x, s, nil);
                          }));
            })];
}

var get = /* record */[/* iolist */(function (s, nil, cons) {
      return Curry._3(cons, s, s, nil);
    })];

function set(s) {
  return /* record */[/* iolist */(function (_, nil, cons) {
              return Curry._3(cons, /* () */0, s, nil);
            })];
}

function modify(f) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(cons, /* () */0, Curry._1(f, s), nil);
            })];
}

function interleave(src, dst, m) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, (function (e1) {
                            return Curry._1(nil, Curry._1(src, e1));
                          }), (function (x, s, next) {
                            return Curry._3(cons, x, s, (function (e2) {
                                          return Curry._1(next, Curry._1(dst, e2));
                                        }));
                          }));
            })];
}

function once(m) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, nil, (function (x, s, _) {
                            return Curry._3(cons, x, s, nil);
                          }));
            })];
}

function $$break(f, m) {
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._3(m[/* iolist */0], s, nil, (function (x, s, next) {
                            return Curry._3(cons, x, s, (function (e) {
                                          var match = Curry._1(f, e);
                                          if (match) {
                                            return Curry._1(nil, match[0]);
                                          } else {
                                            return Curry._1(next, e);
                                          }
                                        }));
                          }));
            })];
}

function reflect(m) {
  return /* record */[/* iolist */(function (s0, nil, cons) {
              var next = function (param) {
                if (param.tag) {
                  var l = param[1];
                  var match = param[0];
                  return Curry._3(cons, match[0], match[1], (function (e) {
                                return Curry._3(reflect(Curry._1(l, e))[/* iolist */0], s0, nil, cons);
                              }));
                } else {
                  return Curry._1(nil, param[0]);
                }
              };
              return Curry._2($great$great$eq$1, m, next);
            })];
}

function split(m) {
  var rnil = function (e) {
    return Curry._1($$return$1, /* Nil */Block.__(0, [e]));
  };
  var rcons = function (p, s, l) {
    return Curry._1($$return$1, /* Cons */Block.__(1, [
                  /* tuple */[
                    p,
                    s
                  ],
                  l
                ]));
  };
  return /* record */[/* iolist */(function (s, nil, cons) {
              return Curry._2($great$great$eq$1, Curry._3(m[/* iolist */0], s, rnil, rcons), (function (param) {
                            if (param.tag) {
                              var l = param[1];
                              var match = param[0];
                              var l$1 = function (e) {
                                return reflect(Curry._1(l, e));
                              };
                              return Curry._3(cons, /* Cons */Block.__(1, [
                                            match[0],
                                            l$1
                                          ]), match[1], nil);
                            } else {
                              return Curry._3(cons, /* Nil */Block.__(0, [param[0]]), s, nil);
                            }
                          }));
            })];
}

function run$1(m, s) {
  var rnil = function (e) {
    return Curry._1($$return$1, /* Nil */Block.__(0, [e]));
  };
  var rcons = function (x, s, l) {
    var p = /* tuple */[
      x,
      s
    ];
    return Curry._1($$return$1, /* Cons */Block.__(1, [
                  p,
                  l
                ]));
  };
  return Curry._3(m[/* iolist */0], s, rnil, rcons);
}

function repr(x) {
  return x;
}

var NonLogical_002 = include[2];

var NonLogical_003 = include[3];

var NonLogical_004 = include[4];

var NonLogical = [
  $$return$1,
  $great$great$eq$1,
  NonLogical_002,
  NonLogical_003,
  NonLogical_004,
  ignore,
  ref,
  $colon$eq,
  $bang,
  read_line,
  print_char,
  print_debug,
  print_warning,
  print_notice,
  print_info,
  raise,
  $$catch,
  timeout,
  make,
  run
];

var BackState = [
  $$return$2,
  $great$great$eq$2,
  $great$great$1,
  map$1,
  ignore$1,
  set,
  get,
  modify,
  interleave,
  zero,
  plus,
  split,
  once,
  $$break,
  lift,
  repr,
  run$1
];

function Logical(funarg) {
  var make = function (m) {
    return m;
  };
  var repr$1 = function (m) {
    return m;
  };
  var Unsafe = /* module */[
    /* make */make,
    /* repr */repr$1
  ];
  var include = Monad$ReactTemplate.Make(/* module */[
        /* return */$$return$2,
        /* >>= */$great$great$eq$2,
        /* >> */$great$great$1,
        /* map */map$1
      ]);
  var get = /* record */[/* iolist */(function (s, nil, cons) {
        return Curry._3(cons, s[/* sstate */3], s, nil);
      })];
  var set = function (sstate) {
    return /* record */[/* iolist */(function (s, nil, cons) {
                return Curry._3(cons, /* () */0, /* record */[
                            /* rstate */s[/* rstate */0],
                            /* ustate */s[/* ustate */1],
                            /* wstate */s[/* wstate */2],
                            /* sstate */sstate
                          ], nil);
              })];
  };
  var modify = function (f) {
    return /* record */[/* iolist */(function (s, nil, cons) {
                return Curry._3(cons, /* () */0, /* record */[
                            /* rstate */s[/* rstate */0],
                            /* ustate */s[/* ustate */1],
                            /* wstate */s[/* wstate */2],
                            /* sstate */Curry._1(f, s[/* sstate */3])
                          ], nil);
              })];
  };
  var current = /* record */[/* iolist */(function (s, nil, cons) {
        return Curry._3(cons, s[/* rstate */0], s, nil);
      })];
  var local = function (e, m) {
    return /* record */[/* iolist */(function (s, nil, cons) {
                return Curry._3(m[/* iolist */0], /* record */[
                            /* rstate */e,
                            /* ustate */s[/* ustate */1],
                            /* wstate */s[/* wstate */2],
                            /* sstate */s[/* sstate */3]
                          ], nil, (function (x, s$prime, next) {
                              return Curry._3(cons, x, /* record */[
                                          /* rstate */s[/* rstate */0],
                                          /* ustate */s$prime[/* ustate */1],
                                          /* wstate */s$prime[/* wstate */2],
                                          /* sstate */s$prime[/* sstate */3]
                                        ], next);
                            }));
              })];
  };
  var put = function (w) {
    return /* record */[/* iolist */(function (s, nil, cons) {
                return Curry._3(cons, /* () */0, /* record */[
                            /* rstate */s[/* rstate */0],
                            /* ustate */s[/* ustate */1],
                            /* wstate */Curry._2(funarg[/* wprod */1], s[/* wstate */2], w),
                            /* sstate */s[/* sstate */3]
                          ], nil);
              })];
  };
  var update = function (f) {
    return /* record */[/* iolist */(function (s, nil, cons) {
                return Curry._3(cons, /* () */0, /* record */[
                            /* rstate */s[/* rstate */0],
                            /* ustate */Curry._1(f, s[/* ustate */1]),
                            /* wstate */s[/* wstate */2],
                            /* sstate */s[/* sstate */3]
                          ], nil);
              })];
  };
  var run = function (m, r, s) {
    var s_001 = /* ustate */funarg[/* uunit */2];
    var s_002 = /* wstate */funarg[/* wunit */0];
    var s$1 = /* record */[
      /* rstate */r,
      s_001,
      s_002,
      /* sstate */s
    ];
    var rnil = function (e) {
      return Curry._1($$return$1, /* Nil */Block.__(0, [e]));
    };
    var rcons = function (x, s, l) {
      var p_001 = s[/* sstate */3];
      var p_002 = s[/* wstate */2];
      var p_003 = s[/* ustate */1];
      var p = /* tuple */[
        x,
        p_001,
        p_002,
        p_003
      ];
      return Curry._1($$return$1, /* Cons */Block.__(1, [
                    p,
                    l
                  ]));
    };
    return Curry._3(m[/* iolist */0], s$1, rnil, rcons);
  };
  return [
          include[0],
          include[1],
          include[2],
          include[3],
          include[4],
          ignore$1,
          set,
          get,
          modify,
          put,
          current,
          local,
          update,
          zero,
          plus,
          split,
          once,
          $$break,
          lift,
          repr,
          run,
          Unsafe
        ];
}

exports.Exception = Exception;
exports.Timeout = Timeout;
exports.TacticFailure = TacticFailure;
exports.NonLogical = NonLogical;
exports.BackState = BackState;
exports.Logical = Logical;
/*  Not a pure module */
