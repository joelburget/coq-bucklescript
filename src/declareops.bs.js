// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Rtree$ReactTemplate = require("./rtree.bs.js");
var Sorts$ReactTemplate = require("./sorts.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Mod_subst$ReactTemplate = require("./mod_subst.bs.js");
var Cemitcodes$ReactTemplate = require("./cemitcodes.bs.js");
var Opaqueproof$ReactTemplate = require("./opaqueproof.bs.js");

function safe_flags(oracle) {
  return /* record */[
          /* check_guarded : true */1,
          /* check_universes : true */1,
          /* conv_oracle */oracle
        ];
}

function map_decl_arity(f, g, param) {
  if (param.tag) {
    return /* TemplateArity */Block.__(1, [Curry._1(g, param[0])]);
  } else {
    return /* RegularArity */Block.__(0, [Curry._1(f, param[0])]);
  }
}

function hcons_template_arity(ar) {
  return /* record */[
          /* template_param_levels */ar[/* template_param_levels */0],
          /* template_level */Univ$ReactTemplate.hcons_univ(ar[/* template_level */1])
        ];
}

function constant_is_polymorphic(cb) {
  var match = cb[/* const_universes */4];
  if (match.tag) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function constant_has_body(cb) {
  var match = cb[/* const_body */1];
  switch (match.tag | 0) {
    case 0 : 
        return /* false */0;
    case 1 : 
    case 2 : 
        return /* true */1;
    
  }
}

function constant_polymorphic_context(cb) {
  var match = cb[/* const_universes */4];
  if (match.tag) {
    return match[0];
  } else {
    return Univ$ReactTemplate.AUContext[/* empty */1];
  }
}

function is_opaque(cb) {
  var match = cb[/* const_body */1];
  switch (match.tag | 0) {
    case 0 : 
    case 1 : 
        return /* false */0;
    case 2 : 
        return /* true */1;
    
  }
}

function subst_rel_declaration(sub) {
  return Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], (function (param) {
                return Mod_subst$ReactTemplate.subst_mps(sub, param);
              }));
}

function subst_const_type(sub, arity) {
  if (Mod_subst$ReactTemplate.is_empty_subst(sub)) {
    return arity;
  } else {
    return Mod_subst$ReactTemplate.subst_mps(sub, arity);
  }
}

function subst_const_def(sub, def) {
  switch (def.tag | 0) {
    case 0 : 
        return def;
    case 1 : 
        return /* Def */Block.__(1, [Mod_subst$ReactTemplate.subst_constr(sub, def[0])]);
    case 2 : 
        return /* OpaqueDef */Block.__(2, [Opaqueproof$ReactTemplate.subst_opaque(sub, def[0])]);
    
  }
}

function subst_const_proj(sub, pb) {
  return /* record */[
          /* proj_ind */Mod_subst$ReactTemplate.subst_mind(sub, pb[/* proj_ind */0]),
          /* proj_npars */pb[/* proj_npars */1],
          /* proj_arg */pb[/* proj_arg */2],
          /* proj_type */Mod_subst$ReactTemplate.subst_mps(sub, pb[/* proj_type */3]),
          /* proj_eta */pb[/* proj_eta */4],
          /* proj_body */subst_const_type(sub, pb[/* proj_body */5])
        ];
}

function subst_const_body(sub, cb) {
  if (!Curry._1(Util$ReactTemplate.List[/* is_empty */45], cb[/* const_hyps */0])) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "declareops.ml",
            92,
            2
          ]
        ];
  }
  if (Mod_subst$ReactTemplate.is_empty_subst(sub)) {
    return cb;
  } else {
    var body$prime = subst_const_def(sub, cb[/* const_body */1]);
    var type$prime = subst_const_type(sub, cb[/* const_type */2]);
    var proj$prime = Option$ReactTemplate.smartmap((function (param) {
            return subst_const_proj(sub, param);
          }), cb[/* const_proj */5]);
    if (body$prime === cb[/* const_body */1] && type$prime === cb[/* const_type */2] && proj$prime === cb[/* const_proj */5]) {
      return cb;
    } else {
      return /* record */[
              /* const_hyps : [] */0,
              /* const_body */body$prime,
              /* const_type */type$prime,
              /* const_body_code */Option$ReactTemplate.map((function (param) {
                      return Cemitcodes$ReactTemplate.subst_to_patch_subst(sub, param);
                    }), cb[/* const_body_code */3]),
              /* const_universes */cb[/* const_universes */4],
              /* const_proj */proj$prime,
              /* const_inline_code */cb[/* const_inline_code */6],
              /* const_typing_flags */cb[/* const_typing_flags */7]
            ];
    }
  }
}

var partial_arg = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* map_type */12], Constr$ReactTemplate.hcons);

var partial_arg$1 = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* map_value */11], Constr$ReactTemplate.hcons);

var partial_arg$2 = Curry._1(Context$ReactTemplate.Rel[/* Declaration */0][/* map_name */10], Names$ReactTemplate.Name[/* hcons */6]);

function partial_arg$3(param) {
  return Util$ReactTemplate.$percent$great(partial_arg$2, partial_arg$1, param);
}

function hcons_rel_decl(param) {
  return Util$ReactTemplate.$percent$great(partial_arg$3, partial_arg, param);
}

function hcons_const_def(x) {
  switch (x.tag | 0) {
    case 0 : 
        return /* Undef */Block.__(0, [x[0]]);
    case 1 : 
        var constr = Mod_subst$ReactTemplate.force_constr(x[0]);
        return /* Def */Block.__(1, [Mod_subst$ReactTemplate.from_val(Constr$ReactTemplate.hcons(constr))]);
    case 2 : 
        return x;
    
  }
}

function hcons_const_universes(cbu) {
  if (cbu.tag) {
    return /* Polymorphic_const */Block.__(1, [Univ$ReactTemplate.hcons_abstract_universe_context(cbu[0])]);
  } else {
    return /* Monomorphic_const */Block.__(0, [Univ$ReactTemplate.hcons_universe_context_set(cbu[0])]);
  }
}

function hcons_const_body(cb) {
  return /* record */[
          /* const_hyps */cb[/* const_hyps */0],
          /* const_body */hcons_const_def(cb[/* const_body */1]),
          /* const_type */Constr$ReactTemplate.hcons(cb[/* const_type */2]),
          /* const_body_code */cb[/* const_body_code */3],
          /* const_universes */hcons_const_universes(cb[/* const_universes */4]),
          /* const_proj */cb[/* const_proj */5],
          /* const_inline_code */cb[/* const_inline_code */6],
          /* const_typing_flags */cb[/* const_typing_flags */7]
        ];
}

function eq_recarg(r1, r2) {
  if (typeof r1 === "number") {
    if (typeof r2 === "number") {
      return /* true */1;
    } else {
      return /* false */0;
    }
  } else if (r1.tag) {
    if (typeof r2 === "number" || !r2.tag) {
      return /* false */0;
    } else {
      return Names$ReactTemplate.eq_ind(r1[0], r2[0]);
    }
  } else if (typeof r2 === "number" || r2.tag) {
    return /* false */0;
  } else {
    return Names$ReactTemplate.eq_ind(r1[0], r2[0]);
  }
}

function subst_recarg(sub, r) {
  if (typeof r === "number") {
    return r;
  } else if (r.tag) {
    var match = r[0];
    var kn = match[0];
    var kn$prime = Mod_subst$ReactTemplate.subst_mind(sub, kn);
    if (kn === kn$prime) {
      return r;
    } else {
      return /* Imbr */Block.__(1, [/* tuple */[
                  kn$prime,
                  match[1]
                ]]);
    }
  } else {
    var match$1 = r[0];
    var kn$1 = match$1[0];
    var kn$prime$1 = Mod_subst$ReactTemplate.subst_mind(sub, kn$1);
    if (kn$1 === kn$prime$1) {
      return r;
    } else {
      return /* Mrec */Block.__(0, [/* tuple */[
                  kn$prime$1,
                  match$1[1]
                ]]);
    }
  }
}

var mk_norec = Rtree$ReactTemplate.mk_node(/* Norec */0, /* array */[]);

function mk_paths(r, recargs) {
  return Rtree$ReactTemplate.mk_node(r, Util$ReactTemplate.$$Array[/* map */12]((function (l) {
                    return Rtree$ReactTemplate.mk_node(/* Norec */0, Util$ReactTemplate.$$Array[/* of_list */10](l));
                  }), recargs));
}

function dest_recarg(p) {
  return Rtree$ReactTemplate.dest_node(p)[0];
}

function dest_subterms(p) {
  var match = Rtree$ReactTemplate.dest_node(p);
  if (!(
      typeof match[0] === "number" ? /* false */0 : /* true */1
    )) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "declareops.ml",
            174,
            2
          ]
        ];
  }
  return Util$ReactTemplate.$$Array[/* map */12]((function (t) {
                return Util$ReactTemplate.$$Array[/* to_list */9](Rtree$ReactTemplate.dest_node(t)[1]);
              }), match[1]);
}

function recarg_length(p, j) {
  var match = Rtree$ReactTemplate.dest_node(p);
  return Rtree$ReactTemplate.dest_node(Caml_array.caml_array_get(match[1], j - 1 | 0))[1].length;
}

function subst_wf_paths(sub, p) {
  return Rtree$ReactTemplate.smartmap((function (param) {
                return subst_recarg(sub, param);
              }), p);
}

function subst_regular_ind_arity(sub, s) {
  var uar$prime = Mod_subst$ReactTemplate.subst_mps(sub, s[/* mind_user_arity */0]);
  if (uar$prime === s[/* mind_user_arity */0]) {
    return s;
  } else {
    return /* record */[
            /* mind_user_arity */uar$prime,
            /* mind_sort */s[/* mind_sort */1]
          ];
  }
}

function subst_template_ind_arity(_, s) {
  return s;
}

function subst_ind_arity(param, param$1) {
  var f = subst_regular_ind_arity;
  var g = subst_template_ind_arity;
  var sub = param;
  var ar = param$1;
  if (ar.tag) {
    var x = ar[0];
    var x$prime = Curry._2(g, sub, x);
    if (x$prime === x) {
      return ar;
    } else {
      return /* TemplateArity */Block.__(1, [x$prime]);
    }
  } else {
    var x$1 = ar[0];
    var x$prime$1 = Curry._2(f, sub, x$1);
    if (x$prime$1 === x$1) {
      return ar;
    } else {
      return /* RegularArity */Block.__(0, [x$prime$1]);
    }
  }
}

function subst_mind_body(sub, mib) {
  var match = mib[/* mind_hyps */4];
  var tmp;
  if (match) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "declareops.ml",
            223,
            58
          ]
        ];
  } else {
    tmp = /* [] */0;
  }
  return /* record */[
          /* mind_packets */Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                  var sub$1 = sub;
                  var mbp = param;
                  return /* record */[
                          /* mind_typename */mbp[/* mind_typename */0],
                          /* mind_arity_ctxt */Curry._2(Util$ReactTemplate.List[/* smartmap */65], subst_rel_declaration(sub$1), mbp[/* mind_arity_ctxt */1]),
                          /* mind_arity */subst_ind_arity(sub$1, mbp[/* mind_arity */2]),
                          /* mind_consnames */mbp[/* mind_consnames */3],
                          /* mind_user_lc */Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                                  return Mod_subst$ReactTemplate.subst_mps(sub$1, param);
                                }), mbp[/* mind_user_lc */4]),
                          /* mind_nrealargs */mbp[/* mind_nrealargs */5],
                          /* mind_nrealdecls */mbp[/* mind_nrealdecls */6],
                          /* mind_kelim */mbp[/* mind_kelim */7],
                          /* mind_nf_lc */Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                                  return Mod_subst$ReactTemplate.subst_mps(sub$1, param);
                                }), mbp[/* mind_nf_lc */8]),
                          /* mind_consnrealargs */mbp[/* mind_consnrealargs */9],
                          /* mind_consnrealdecls */mbp[/* mind_consnrealdecls */10],
                          /* mind_recargs */Rtree$ReactTemplate.smartmap((function (param) {
                                  return subst_recarg(sub$1, param);
                                }), mbp[/* mind_recargs */11]),
                          /* mind_nb_constant */mbp[/* mind_nb_constant */12],
                          /* mind_nb_args */mbp[/* mind_nb_args */13],
                          /* mind_reloc_tbl */mbp[/* mind_reloc_tbl */14]
                        ];
                }), mib[/* mind_packets */0]),
          /* mind_record */Option$ReactTemplate.smartmap((function (param) {
                  return Option$ReactTemplate.smartmap((function (param) {
                                var sub$1 = sub;
                                var r = param;
                                var pb = r[2];
                                var ps = r[1];
                                var ps$prime = Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                                        return Mod_subst$ReactTemplate.subst_constant(sub$1, param);
                                      }), ps);
                                var pb$prime = Util$ReactTemplate.$$Array[/* smartmap */47]((function (param) {
                                        return subst_const_proj(sub$1, param);
                                      }), pb);
                                if (ps$prime === ps && pb$prime === pb) {
                                  return r;
                                } else {
                                  return /* tuple */[
                                          r[0],
                                          ps$prime,
                                          pb$prime
                                        ];
                                }
                              }), param);
                }), mib[/* mind_record */1]),
          /* mind_finite */mib[/* mind_finite */2],
          /* mind_ntypes */mib[/* mind_ntypes */3],
          /* mind_hyps */tmp,
          /* mind_nparams */mib[/* mind_nparams */5],
          /* mind_nparams_rec */mib[/* mind_nparams_rec */6],
          /* mind_params_ctxt */Curry._1(Context$ReactTemplate.Rel[/* map */7]((function (param) {
                      return Mod_subst$ReactTemplate.subst_mps(sub, param);
                    })), mib[/* mind_params_ctxt */7]),
          /* mind_universes */mib[/* mind_universes */8],
          /* mind_private */mib[/* mind_private */9],
          /* mind_typing_flags */mib[/* mind_typing_flags */10]
        ];
}

function inductive_polymorphic_context(mib) {
  var match = mib[/* mind_universes */8];
  switch (match.tag | 0) {
    case 0 : 
        return Univ$ReactTemplate.AUContext[/* empty */1];
    case 1 : 
        return match[0];
    case 2 : 
        return Univ$ReactTemplate.ACumulativityInfo[/* univ_context */0](match[0]);
    
  }
}

function inductive_is_polymorphic(mib) {
  var match = mib[/* mind_universes */8];
  switch (match.tag | 0) {
    case 0 : 
        return /* false */0;
    case 1 : 
    case 2 : 
        return /* true */1;
    
  }
}

function inductive_is_cumulative(mib) {
  var match = mib[/* mind_universes */8];
  switch (match.tag | 0) {
    case 0 : 
    case 1 : 
        return /* false */0;
    case 2 : 
        return /* true */1;
    
  }
}

function hcons_regular_ind_arity(a) {
  return /* record */[
          /* mind_user_arity */Constr$ReactTemplate.hcons(a[/* mind_user_arity */0]),
          /* mind_sort */Sorts$ReactTemplate.hcons(a[/* mind_sort */1])
        ];
}

function hcons_mind_packet(oib) {
  var user = Util$ReactTemplate.$$Array[/* smartmap */47](Constr$ReactTemplate.hcons, oib[/* mind_user_lc */4]);
  var nf = Util$ReactTemplate.$$Array[/* smartmap */47](Constr$ReactTemplate.hcons, oib[/* mind_nf_lc */8]);
  var nf$1 = Util$ReactTemplate.$$Array[/* equal */21]((function (prim, prim$1) {
          return +(prim === prim$1);
        }), user, nf) ? user : nf;
  return /* record */[
          /* mind_typename */Curry._1(Names$ReactTemplate.Id[/* hcons */13], oib[/* mind_typename */0]),
          /* mind_arity_ctxt */Curry._2(Util$ReactTemplate.List[/* smartmap */65], hcons_rel_decl, oib[/* mind_arity_ctxt */1]),
          /* mind_arity */map_decl_arity(hcons_regular_ind_arity, hcons_template_arity, oib[/* mind_arity */2]),
          /* mind_consnames */Util$ReactTemplate.$$Array[/* smartmap */47](Names$ReactTemplate.Id[/* hcons */13], oib[/* mind_consnames */3]),
          /* mind_user_lc */user,
          /* mind_nrealargs */oib[/* mind_nrealargs */5],
          /* mind_nrealdecls */oib[/* mind_nrealdecls */6],
          /* mind_kelim */oib[/* mind_kelim */7],
          /* mind_nf_lc */nf$1,
          /* mind_consnrealargs */oib[/* mind_consnrealargs */9],
          /* mind_consnrealdecls */oib[/* mind_consnrealdecls */10],
          /* mind_recargs */oib[/* mind_recargs */11],
          /* mind_nb_constant */oib[/* mind_nb_constant */12],
          /* mind_nb_args */oib[/* mind_nb_args */13],
          /* mind_reloc_tbl */oib[/* mind_reloc_tbl */14]
        ];
}

function hcons_mind_universes(miu) {
  switch (miu.tag | 0) {
    case 0 : 
        return /* Monomorphic_ind */Block.__(0, [Univ$ReactTemplate.hcons_universe_context_set(miu[0])]);
    case 1 : 
        return /* Polymorphic_ind */Block.__(1, [Univ$ReactTemplate.hcons_abstract_universe_context(miu[0])]);
    case 2 : 
        return /* Cumulative_ind */Block.__(2, [Univ$ReactTemplate.hcons_abstract_cumulativity_info(miu[0])]);
    
  }
}

function hcons_mind(mib) {
  var newrecord = mib.slice();
  newrecord[/* mind_packets */0] = Util$ReactTemplate.$$Array[/* smartmap */47](hcons_mind_packet, mib[/* mind_packets */0]);
  newrecord[/* mind_params_ctxt */7] = Curry._2(Util$ReactTemplate.List[/* smartmap */65], hcons_rel_decl, mib[/* mind_params_ctxt */7]);
  newrecord[/* mind_universes */8] = hcons_mind_universes(mib[/* mind_universes */8]);
  return newrecord;
}

function string_of_side_effect(param) {
  var eff = param[/* eff */1];
  if (eff.tag) {
    return "S(" + (Curry._2(Util$ReactTemplate.$$String[/* concat */6], ", ", Curry._2(Util$ReactTemplate.List[/* map */10], (function (param) {
                        return Names$ReactTemplate.Constant[/* to_string */15](param[1]);
                      }), eff[0])) + ")");
  } else {
    return "P(" + (Names$ReactTemplate.Constant[/* to_string */15](eff[0]) + ")");
  }
}

function hcons_functorize(hty, he, hself, f) {
  if (f.tag) {
    var mid = f[0];
    var nf = f[2];
    var ty = f[1];
    var ty$prime = Curry._1(hty, ty);
    var nf$prime = Curry._1(hself, nf);
    if (mid === mid && ty === ty$prime && nf === nf$prime) {
      return f;
    } else {
      return /* MoreFunctor */Block.__(1, [
                mid,
                ty$prime,
                nf$prime
              ]);
    }
  } else {
    var e = f[0];
    var e$prime = Curry._1(he, e);
    if (e === e$prime) {
      return f;
    } else {
      return /* NoFunctor */Block.__(0, [e$prime]);
    }
  }
}

function hcons_module_alg_expr(me) {
  return me;
}

function hcons_structure_field_body(sb) {
  switch (sb.tag | 0) {
    case 0 : 
        var cb = sb[0];
        var cb$prime = hcons_const_body(cb);
        if (cb === cb$prime) {
          return sb;
        } else {
          return /* SFBconst */Block.__(0, [cb$prime]);
        }
    case 1 : 
        var mib = sb[0];
        var mib$prime = hcons_mind(mib);
        if (mib === mib$prime) {
          return sb;
        } else {
          return /* SFBmind */Block.__(1, [mib$prime]);
        }
    case 2 : 
        var mb = sb[0];
        var mb$prime = hcons_module_body(mb);
        if (mb === mb$prime) {
          return sb;
        } else {
          return /* SFBmodule */Block.__(2, [mb$prime]);
        }
    case 3 : 
        var mb$1 = sb[0];
        var mb$prime$1 = hcons_module_type(mb$1);
        if (mb$1 === mb$prime$1) {
          return sb;
        } else {
          return /* SFBmodtype */Block.__(3, [mb$prime$1]);
        }
    
  }
}

function hcons_structure_body(sb) {
  var map = function (fb) {
    var sfb = fb[1];
    var l = fb[0];
    var l$prime = Curry._1(Names$ReactTemplate.Label[/* hcons */10], l);
    var sfb$prime = hcons_structure_field_body(sfb);
    if (l === l$prime && sfb === sfb$prime) {
      return fb;
    } else {
      return /* tuple */[
              l$prime,
              sfb$prime
            ];
    }
  };
  return Curry._2(Util$ReactTemplate.List[/* smartmap */65], map, sb);
}

function hcons_module_signature(ms) {
  return hcons_functorize(hcons_module_type, hcons_structure_body, hcons_module_signature, ms);
}

function hcons_module_expression(me) {
  return hcons_functorize(hcons_module_type, hcons_module_alg_expr, hcons_module_expression, me);
}

function hcons_module_implementation(mip) {
  if (typeof mip === "number") {
    if (mip) {
      return /* FullStruct */1;
    } else {
      return /* Abstract */0;
    }
  } else if (mip.tag) {
    var ms = mip[0];
    var ms$prime = hcons_module_signature(ms);
    if (ms === ms$prime) {
      return mip;
    } else {
      return /* Struct */Block.__(1, [ms]);
    }
  } else {
    var me = mip[0];
    var me$prime = hcons_module_expression(me);
    if (me === me$prime) {
      return mip;
    } else {
      return /* Algebraic */Block.__(0, [me$prime]);
    }
  }
}

function hcons_generic_module_body(hcons_impl, mb) {
  var mp$prime = mb[/* mod_mp */0];
  var expr$prime = Curry._1(hcons_impl, mb[/* mod_expr */1]);
  var type$prime = hcons_module_signature(mb[/* mod_type */2]);
  var type_alg$prime = mb[/* mod_type_alg */3];
  var constraints$prime = Univ$ReactTemplate.hcons_universe_context_set(mb[/* mod_constraints */4]);
  var delta$prime = mb[/* mod_delta */5];
  var retroknowledge$prime = mb[/* mod_retroknowledge */6];
  if (mb[/* mod_mp */0] === mp$prime && mb[/* mod_expr */1] === expr$prime && mb[/* mod_type */2] === type$prime && mb[/* mod_type_alg */3] === type_alg$prime && mb[/* mod_constraints */4] === constraints$prime && mb[/* mod_delta */5] === delta$prime && mb[/* mod_retroknowledge */6] === retroknowledge$prime) {
    return mb;
  } else {
    return /* record */[
            /* mod_mp */mp$prime,
            /* mod_expr */expr$prime,
            /* mod_type */type$prime,
            /* mod_type_alg */type_alg$prime,
            /* mod_constraints */constraints$prime,
            /* mod_delta */delta$prime,
            /* mod_retroknowledge */retroknowledge$prime
          ];
  }
}

function hcons_module_body(mb) {
  return hcons_generic_module_body(hcons_module_implementation, mb);
}

function hcons_module_type(mb) {
  return hcons_generic_module_body((function () {
                return /* () */0;
              }), mb);
}

exports.map_decl_arity = map_decl_arity;
exports.subst_const_body = subst_const_body;
exports.constant_has_body = constant_has_body;
exports.constant_polymorphic_context = constant_polymorphic_context;
exports.constant_is_polymorphic = constant_is_polymorphic;
exports.is_opaque = is_opaque;
exports.string_of_side_effect = string_of_side_effect;
exports.eq_recarg = eq_recarg;
exports.subst_recarg = subst_recarg;
exports.mk_norec = mk_norec;
exports.mk_paths = mk_paths;
exports.dest_recarg = dest_recarg;
exports.dest_subterms = dest_subterms;
exports.recarg_length = recarg_length;
exports.subst_wf_paths = subst_wf_paths;
exports.subst_mind_body = subst_mind_body;
exports.inductive_polymorphic_context = inductive_polymorphic_context;
exports.inductive_is_polymorphic = inductive_is_polymorphic;
exports.inductive_is_cumulative = inductive_is_cumulative;
exports.safe_flags = safe_flags;
exports.hcons_const_body = hcons_const_body;
exports.hcons_mind = hcons_mind;
exports.hcons_module_body = hcons_module_body;
exports.hcons_module_type = hcons_module_type;
/* partial_arg Not a pure module */
