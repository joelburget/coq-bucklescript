// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Sorts$ReactTemplate = require("./sorts.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Esubst$ReactTemplate = require("./esubst.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Context$ReactTemplate = require("./context.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var LocalOccur = Caml_exceptions.create("Vars-ReactTemplate.LocalOccur");

function closedn(n, c) {
  var closed_rec = function (n, c) {
    var match = Constr$ReactTemplate.kind(c);
    if (match.tag) {
      return Constr$ReactTemplate.iter_with_binders((function (prim) {
                    return prim + 1 | 0;
                  }), closed_rec, n, c);
    } else if (match[0] > n) {
      throw LocalOccur;
    } else {
      return 0;
    }
  };
  try {
    closed_rec(n, c);
    return /* true */1;
  }
  catch (exn){
    if (exn === LocalOccur) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

function closed0(c) {
  return closedn(0, c);
}

function noccurn(n, term) {
  var occur_rec = function (n, c) {
    var match = Constr$ReactTemplate.kind(c);
    if (match.tag) {
      return Constr$ReactTemplate.iter_with_binders((function (prim) {
                    return prim + 1 | 0;
                  }), occur_rec, n, c);
    } else if (match[0] === n) {
      throw LocalOccur;
    } else {
      return 0;
    }
  };
  try {
    occur_rec(n, term);
    return /* true */1;
  }
  catch (exn){
    if (exn === LocalOccur) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

function noccur_between(n, m, term) {
  var occur_rec = function (n, c) {
    var match = Constr$ReactTemplate.kind(c);
    if (match.tag) {
      return Constr$ReactTemplate.iter_with_binders((function (prim) {
                    return prim + 1 | 0;
                  }), occur_rec, n, c);
    } else {
      var p = match[0];
      if (n <= p && p < (n + m | 0)) {
        throw LocalOccur;
      } else {
        return 0;
      }
    }
  };
  try {
    occur_rec(n, term);
    return /* true */1;
  }
  catch (exn){
    if (exn === LocalOccur) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

function isMeta(c) {
  var match = Constr$ReactTemplate.kind(c);
  if (match.tag === 2) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function noccur_with_meta(n, m, term) {
  var occur_rec = function (n, c) {
    var match = Constr$ReactTemplate.kind(c);
    switch (match.tag | 0) {
      case 0 : 
          var p = match[0];
          if (n <= p && p < (n + m | 0)) {
            throw LocalOccur;
          } else {
            return 0;
          }
          break;
      case 3 : 
          return /* () */0;
      case 9 : 
          var match$1 = Constr$ReactTemplate.kind(match[0]);
          var exit = 0;
          switch (match$1.tag | 0) {
            case 2 : 
                return /* () */0;
            case 5 : 
                if (isMeta(match$1[0])) {
                  return /* () */0;
                } else {
                  exit = 1;
                }
                break;
            default:
              exit = 1;
          }
          if (exit === 1) {
            return Constr$ReactTemplate.iter_with_binders((function (prim) {
                          return prim + 1 | 0;
                        }), occur_rec, n, c);
          }
          break;
      default:
        return Constr$ReactTemplate.iter_with_binders((function (prim) {
                      return prim + 1 | 0;
                    }), occur_rec, n, c);
    }
  };
  try {
    occur_rec(n, term);
    return /* true */1;
  }
  catch (exn){
    if (exn === LocalOccur) {
      return /* false */0;
    } else {
      throw exn;
    }
  }
}

function exliftn(el, c) {
  var match = Constr$ReactTemplate.kind(c);
  if (match.tag) {
    return Constr$ReactTemplate.map_with_binders(Esubst$ReactTemplate.el_lift, exliftn, el, c);
  } else {
    return Constr$ReactTemplate.mkRel(Esubst$ReactTemplate.reloc_rel(match[0], el));
  }
}

function liftn(n, k, c) {
  var el = Esubst$ReactTemplate.el_liftn(k - 1 | 0, Esubst$ReactTemplate.el_shft(n, Esubst$ReactTemplate.el_id));
  if (typeof el === "number") {
    return c;
  } else {
    return exliftn(el, c);
  }
}

function lift(n) {
  return (function (param) {
      return liftn(n, 1, param);
    });
}

function lift_substituend(depth, s) {
  var match = s[/* sinfo */0];
  switch (match) {
    case 0 : 
        return s[/* sit */1];
    case 1 : 
        return liftn(depth, 1, s[/* sit */1]);
    case 2 : 
        var sit = s[/* sit */1];
        if (closedn(0, sit)) {
          s[/* sinfo */0] = /* Closed */0;
          return sit;
        } else {
          s[/* sinfo */0] = /* Open */1;
          return liftn(depth, 1, sit);
        }
    
  }
}

function substn_many(lamv, n, c) {
  var lv = lamv.length;
  if (lv) {
    var substrec = function (depth, c) {
      var match = Constr$ReactTemplate.kind(c);
      if (match.tag) {
        return Constr$ReactTemplate.map_with_binders((function (prim) {
                      return prim + 1 | 0;
                    }), substrec, depth, c);
      } else {
        var k = match[0];
        if (k <= depth) {
          return c;
        } else if ((k - depth | 0) <= lv) {
          return lift_substituend(depth, lamv[(k - depth | 0) - 1 | 0]);
        } else {
          return Constr$ReactTemplate.mkRel(k - lv | 0);
        }
      }
    };
    return substrec(n, c);
  } else {
    return c;
  }
}

function make_subst(param) {
  if (param) {
    var tl = param[1];
    var len = List.length(tl);
    var subst = Caml_array.caml_make_vect(1 + len | 0, /* record */[
          /* sinfo : Unknown */2,
          /* sit */param[0]
        ]);
    var s = tl;
    for(var i = 1; i <= len; ++i){
      var match = s;
      if (match) {
        subst[i] = /* record */[
          /* sinfo : Unknown */2,
          /* sit */match[0]
        ];
        s = match[1];
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "vars.ml",
                150,
                12
              ]
            ];
      }
    }
    return subst;
  } else {
    return /* array */[];
  }
}

function substnl(laml, n, c) {
  return substn_many(make_subst(laml), n, c);
}

function substl(laml, c) {
  return substn_many(make_subst(laml), 0, c);
}

function subst1(lam, c) {
  return substn_many(/* array */[/* record */[
                /* sinfo : Unknown */2,
                /* sit */lam
              ]], 0, c);
}

function substnl_decl(laml, k, r) {
  return Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], (function (c) {
                return substnl(laml, k, c);
              }), r);
}

function substl_decl(laml, r) {
  return Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], (function (c) {
                return substnl(laml, 0, c);
              }), r);
}

function subst1_decl(lam, r) {
  return Curry._2(Context$ReactTemplate.Rel[/* Declaration */0][/* map_constr */13], (function (c) {
                return subst1(lam, c);
              }), r);
}

function subst_of_rel_context_instance(sign, l) {
  var _subst = /* [] */0;
  var _sign = List.rev(sign);
  var _l = l;
  while(true) {
    var l$1 = _l;
    var sign$1 = _sign;
    var subst = _subst;
    if (sign$1) {
      var match = sign$1[0];
      if (match.tag) {
        _sign = sign$1[1];
        _subst = /* :: */[
          substl(subst, match[1]),
          subst
        ];
        continue ;
        
      } else if (l$1) {
        _l = l$1[1];
        _sign = sign$1[1];
        _subst = /* :: */[
          l$1[0],
          subst
        ];
        continue ;
        
      } else {
        return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Instance and signature do not match."));
      }
    } else if (l$1) {
      return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.str("Instance and signature do not match."));
    } else {
      return subst;
    }
  };
}

function adjust_subst_to_rel_context(sign, l) {
  return List.rev(subst_of_rel_context_instance(sign, l));
}

function adjust_rel_to_rel_context(sign, n) {
  var aux = function (sign) {
    if (sign) {
      if (sign[0].tag) {
        var match = aux(sign[1]);
        var p = match[1];
        var n$prime = match[0];
        return /* tuple */[
                n$prime + 1 | 0,
                n$prime < n ? p + 1 | 0 : p
              ];
      } else {
        var match$1 = aux(sign[1]);
        return /* tuple */[
                match$1[0] + 1 | 0,
                match$1[1]
              ];
      }
    } else {
      return /* tuple */[
              0,
              n
            ];
    }
  };
  return aux(sign)[1];
}

function thin_val(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var tl = param[1];
      var match = param[0];
      var c = match[1];
      var id = match[0];
      var match$1 = Constr$ReactTemplate.kind(c);
      if (match$1.tag === 1) {
        if (Names$ReactTemplate.Id[/* equal */0](id, match$1[0])) {
          _param = tl;
          continue ;
          
        } else {
          return /* :: */[
                  /* tuple */[
                    id,
                    /* record */[
                      /* sinfo : Unknown */2,
                      /* sit */c
                    ]
                  ],
                  thin_val(tl)
                ];
        }
      } else {
        return /* :: */[
                /* tuple */[
                  id,
                  /* record */[
                    /* sinfo : Unknown */2,
                    /* sit */c
                  ]
                ],
                thin_val(tl)
              ];
      }
    } else {
      return /* [] */0;
    }
  };
}

function find_var(id, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (Names$ReactTemplate.Id[/* equal */0](id, match[0])) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function replace_vars(var_alist, x) {
  var var_alist$1 = thin_val(var_alist);
  if (var_alist$1) {
    var substrec = function (n, c) {
      var match = Constr$ReactTemplate.kind(c);
      if (match.tag === 1) {
        try {
          return lift_substituend(n, find_var(match[0], var_alist$1));
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            return c;
          } else {
            throw exn;
          }
        }
      } else {
        return Constr$ReactTemplate.map_with_binders((function (prim) {
                      return prim + 1 | 0;
                    }), substrec, n, c);
      }
    };
    return substrec(0, x);
  } else {
    return x;
  }
}

function subst_var(str, t) {
  return replace_vars(/* :: */[
              /* tuple */[
                str,
                Constr$ReactTemplate.mkRel(1)
              ],
              /* [] */0
            ], t);
}

function substn_vars(p, vars, c) {
  var match = List.fold_left((function (param, $$var) {
          var n = param[0];
          return /* tuple */[
                  n + 1 | 0,
                  /* :: */[
                    /* tuple */[
                      $$var,
                      Constr$ReactTemplate.mkRel(n)
                    ],
                    param[1]
                  ]
                ];
        }), /* tuple */[
        p,
        /* [] */0
      ], vars);
  return replace_vars(List.rev(match[1]), c);
}

function subst_vars(subst, c) {
  return substn_vars(1, subst, c);
}

function subst_univs_level_constr(subst, c) {
  if (Curry._1(Univ$ReactTemplate.is_empty_level_subst, subst)) {
    return c;
  } else {
    var partial_arg = Univ$ReactTemplate.Instance[/* subst_fn */10];
    var f = function (param) {
      return partial_arg((function (param) {
                    return Univ$ReactTemplate.subst_univs_level_level(subst, param);
                  }), param);
    };
    var changed = [/* false */0];
    var aux = function (t) {
      var match = Constr$ReactTemplate.kind(t);
      switch (match.tag | 0) {
        case 4 : 
            var match$1 = match[0];
            if (match$1.tag) {
              var u = match$1[0];
              var u$prime = Univ$ReactTemplate.subst_univs_level_universe(subst, u);
              if (u$prime === u) {
                return t;
              } else {
                changed[0] = /* true */1;
                return Constr$ReactTemplate.mkSort(Sorts$ReactTemplate.sort_of_univ(u$prime));
              }
            } else {
              return Constr$ReactTemplate.map(aux, t);
            }
            break;
        case 10 : 
            var match$2 = match[0];
            var u$1 = match$2[1];
            if (Univ$ReactTemplate.Instance[/* is_empty */1](u$1)) {
              return t;
            } else {
              var u$prime$1 = Curry._1(f, u$1);
              if (u$prime$1 === u$1) {
                return t;
              } else {
                changed[0] = /* true */1;
                return Constr$ReactTemplate.mkConstU(/* tuple */[
                            match$2[0],
                            u$prime$1
                          ]);
              }
            }
            break;
        case 11 : 
            var match$3 = match[0];
            var u$2 = match$3[1];
            if (Univ$ReactTemplate.Instance[/* is_empty */1](u$2)) {
              return t;
            } else {
              var u$prime$2 = Curry._1(f, u$2);
              if (u$prime$2 === u$2) {
                return t;
              } else {
                changed[0] = /* true */1;
                return Constr$ReactTemplate.mkIndU(/* tuple */[
                            match$3[0],
                            u$prime$2
                          ]);
              }
            }
            break;
        case 12 : 
            var match$4 = match[0];
            var u$3 = match$4[1];
            if (Univ$ReactTemplate.Instance[/* is_empty */1](u$3)) {
              return t;
            } else {
              var u$prime$3 = Curry._1(f, u$3);
              if (u$prime$3 === u$3) {
                return t;
              } else {
                changed[0] = /* true */1;
                return Constr$ReactTemplate.mkConstructU(/* tuple */[
                            match$4[0],
                            u$prime$3
                          ]);
              }
            }
            break;
        default:
          return Constr$ReactTemplate.map(aux, t);
      }
    };
    var c$prime = aux(c);
    if (changed[0]) {
      return c$prime;
    } else {
      return c;
    }
  }
}

function subst_univs_level_context(s) {
  return Context$ReactTemplate.Rel[/* map */7]((function (param) {
                return subst_univs_level_constr(s, param);
              }));
}

function subst_instance_constr(subst, c) {
  if (Univ$ReactTemplate.Instance[/* is_empty */1](subst)) {
    return c;
  } else {
    var aux = function (t) {
      var match = Constr$ReactTemplate.kind(t);
      switch (match.tag | 0) {
        case 4 : 
            var match$1 = match[0];
            if (match$1.tag) {
              var u = match$1[0];
              var u$prime = Univ$ReactTemplate.subst_instance_universe(subst, u);
              if (u$prime === u) {
                return t;
              } else {
                return Constr$ReactTemplate.mkSort(Sorts$ReactTemplate.sort_of_univ(u$prime));
              }
            } else {
              return Constr$ReactTemplate.map(aux, t);
            }
            break;
        case 10 : 
            var match$2 = match[0];
            var u$1 = match$2[1];
            if (Univ$ReactTemplate.Instance[/* is_empty */1](u$1)) {
              return t;
            } else {
              var u$prime$1 = Univ$ReactTemplate.subst_instance_instance(subst, u$1);
              if (u$prime$1 === u$1) {
                return t;
              } else {
                return Constr$ReactTemplate.mkConstU(/* tuple */[
                            match$2[0],
                            u$prime$1
                          ]);
              }
            }
            break;
        case 11 : 
            var match$3 = match[0];
            var u$2 = match$3[1];
            if (Univ$ReactTemplate.Instance[/* is_empty */1](u$2)) {
              return t;
            } else {
              var u$prime$2 = Univ$ReactTemplate.subst_instance_instance(subst, u$2);
              if (u$prime$2 === u$2) {
                return t;
              } else {
                return Constr$ReactTemplate.mkIndU(/* tuple */[
                            match$3[0],
                            u$prime$2
                          ]);
              }
            }
            break;
        case 12 : 
            var match$4 = match[0];
            var u$3 = match$4[1];
            if (Univ$ReactTemplate.Instance[/* is_empty */1](u$3)) {
              return t;
            } else {
              var u$prime$3 = Univ$ReactTemplate.subst_instance_instance(subst, u$3);
              if (u$prime$3 === u$3) {
                return t;
              } else {
                return Constr$ReactTemplate.mkConstructU(/* tuple */[
                            match$4[0],
                            u$prime$3
                          ]);
              }
            }
            break;
        default:
          return Constr$ReactTemplate.map(aux, t);
      }
    };
    return aux(c);
  }
}

function subst_instance_context(s, ctx) {
  if (Univ$ReactTemplate.Instance[/* is_empty */1](s)) {
    return ctx;
  } else {
    return Curry._1(Context$ReactTemplate.Rel[/* map */7]((function (x) {
                      return subst_instance_constr(s, x);
                    })), ctx);
  }
}

exports.closedn = closedn;
exports.closed0 = closed0;
exports.noccurn = noccurn;
exports.noccur_between = noccur_between;
exports.noccur_with_meta = noccur_with_meta;
exports.exliftn = exliftn;
exports.liftn = liftn;
exports.lift = lift;
exports.subst_of_rel_context_instance = subst_of_rel_context_instance;
exports.adjust_subst_to_rel_context = adjust_subst_to_rel_context;
exports.adjust_rel_to_rel_context = adjust_rel_to_rel_context;
exports.substnl = substnl;
exports.substl = substl;
exports.subst1 = subst1;
exports.substnl_decl = substnl_decl;
exports.substl_decl = substl_decl;
exports.subst1_decl = subst1_decl;
exports.replace_vars = replace_vars;
exports.substn_vars = substn_vars;
exports.subst_vars = subst_vars;
exports.subst_var = subst_var;
exports.subst_univs_level_constr = subst_univs_level_constr;
exports.subst_univs_level_context = subst_univs_level_context;
exports.subst_instance_constr = subst_instance_constr;
exports.subst_instance_context = subst_instance_context;
/* Pp-ReactTemplate Not a pure module */
