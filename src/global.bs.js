// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Environ$ReactTemplate = require("./environ.bs.js");
var Summary$ReactTemplate = require("./summary.bs.js");
var Inductive$ReactTemplate = require("./inductive.bs.js");
var Mod_subst$ReactTemplate = require("./mod_subst.bs.js");
var Declareops$ReactTemplate = require("./declareops.bs.js");
var Opaqueproof$ReactTemplate = require("./opaqueproof.bs.js");
var Safe_typing$ReactTemplate = require("./safe_typing.bs.js");

var global_env = [Safe_typing$ReactTemplate.empty_environment];

function join_safe_environment(except, _) {
  global_env[0] = Safe_typing$ReactTemplate.join_safe_environment(except, global_env[0]);
  return /* () */0;
}

function is_joined_environment() {
  return Safe_typing$ReactTemplate.is_joined_environment(global_env[0]);
}

var global_env_summary_tag = Summary$ReactTemplate.declare_summary_tag("Global environment", /* record */[
      /* freeze_function */(function (param) {
          if (param !== 4448519) {
            return global_env[0];
          } else {
            join_safe_environment(/* None */0, /* () */0);
            return global_env[0];
          }
        }),
      /* unfreeze_function */(function (fr) {
          global_env[0] = fr;
          return /* () */0;
        }),
      /* init_function */(function () {
          global_env[0] = Safe_typing$ReactTemplate.empty_environment;
          return /* () */0;
        })
    ]);

function assert_not_parsing() {
  if (Flags$ReactTemplate.we_are_parsing[0]) {
    return CErrors$ReactTemplate.anomaly(/* None */0, /* None */0, Pp$ReactTemplate.strbrk("The global environment cannot be accessed during parsing."));
  } else {
    return 0;
  }
}

function safe_env() {
  assert_not_parsing(/* () */0);
  return global_env[0];
}

function join_safe_environment$1(except, _) {
  return join_safe_environment(except, /* () */0);
}

function env() {
  return Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0));
}

function env_is_initial() {
  return Safe_typing$ReactTemplate.is_initial(safe_env(/* () */0));
}

function globalize0(f) {
  global_env[0] = Curry._1(f, safe_env(/* () */0));
  return /* () */0;
}

function globalize(f) {
  var match = Curry._1(f, safe_env(/* () */0));
  global_env[0] = match[1];
  return match[0];
}

function globalize_with_summary(fs, f) {
  var match = Curry._1(f, safe_env(/* () */0));
  Summary$ReactTemplate.unfreeze_summaries(/* None */0, fs);
  global_env[0] = match[1];
  return match[0];
}

var i2l = Names$ReactTemplate.Label[/* of_id */5];

function push_named_assum(a) {
  return globalize0((function (param) {
                return Safe_typing$ReactTemplate.push_named_assum(a, param);
              }));
}

function push_named_def(d) {
  return globalize0((function (param) {
                return Safe_typing$ReactTemplate.push_named_def(d, param);
              }));
}

function add_constraints(c) {
  return globalize0(Safe_typing$ReactTemplate.add_constraints(c));
}

function push_context_set(b, c) {
  return globalize0(Safe_typing$ReactTemplate.push_context_set(b, c));
}

function push_context(b, c) {
  return globalize0(Safe_typing$ReactTemplate.push_context(b, c));
}

function set_engagement(c) {
  return globalize0((function (param) {
                return Safe_typing$ReactTemplate.set_engagement(c, param);
              }));
}

function set_typing_flags(c) {
  return globalize0((function (param) {
                return Safe_typing$ReactTemplate.set_typing_flags(c, param);
              }));
}

function export_private_constants(in_section, cd) {
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.export_private_constants(in_section, cd, param);
              }));
}

function add_constant(dir, id, d) {
  var partial_arg = Curry._1(i2l, id);
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.add_constant(dir, partial_arg, d, param);
              }));
}

function add_mind(dir, id, mie) {
  var partial_arg = Curry._1(i2l, id);
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.add_mind(dir, partial_arg, mie, param);
              }));
}

function add_modtype(id, me, inl) {
  var partial_arg = Curry._1(i2l, id);
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.add_modtype(partial_arg, me, inl, param);
              }));
}

function add_module(id, me, inl) {
  var partial_arg = Curry._1(i2l, id);
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.add_module(partial_arg, me, inl, param);
              }));
}

function add_include(me, ismod, inl) {
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.add_include(me, ismod, inl, param);
              }));
}

function start_module(id) {
  var partial_arg = Curry._1(i2l, id);
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.start_module(partial_arg, param);
              }));
}

function start_modtype(id) {
  var partial_arg = Curry._1(i2l, id);
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.start_modtype(partial_arg, param);
              }));
}

function end_module(fs, id, mtyo) {
  var partial_arg = Curry._1(i2l, id);
  return globalize_with_summary(fs, (function (param) {
                return Safe_typing$ReactTemplate.end_module(partial_arg, mtyo, param);
              }));
}

function end_modtype(fs, id) {
  var partial_arg = Curry._1(i2l, id);
  return globalize_with_summary(fs, (function (param) {
                return Safe_typing$ReactTemplate.end_modtype(partial_arg, param);
              }));
}

function add_module_parameter(mbid, mte, inl) {
  return globalize((function (param) {
                return Safe_typing$ReactTemplate.add_module_parameter(mbid, mte, inl, param);
              }));
}

function universes() {
  return Environ$ReactTemplate.universes(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function named_context() {
  return Environ$ReactTemplate.named_context(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function named_context_val() {
  return Environ$ReactTemplate.named_context_val(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function lookup_named(id) {
  return Environ$ReactTemplate.lookup_named(id, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function lookup_constant(kn) {
  return Environ$ReactTemplate.lookup_constant(kn, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function lookup_inductive(ind) {
  return Inductive$ReactTemplate.lookup_mind_specif(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)), ind);
}

function lookup_pinductive(param) {
  return Inductive$ReactTemplate.lookup_mind_specif(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)), param[0]);
}

function lookup_mind(kn) {
  return Environ$ReactTemplate.lookup_mind(kn, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function lookup_module(mp) {
  return Environ$ReactTemplate.lookup_module(mp, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function lookup_modtype(kn) {
  return Environ$ReactTemplate.lookup_modtype(kn, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function exists_objlabel(id) {
  return Safe_typing$ReactTemplate.exists_objlabel(id, safe_env(/* () */0));
}

function opaque_tables() {
  return Environ$ReactTemplate.opaque_tables(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function instantiate(cb, c) {
  var match = cb[/* const_universes */4];
  if (match.tag) {
    return /* tuple */[
            c,
            match[0]
          ];
  } else {
    return /* tuple */[
            c,
            Univ$ReactTemplate.AUContext[/* empty */1]
          ];
  }
}

function body_of_constant_body(cb) {
  var otab = Environ$ReactTemplate.opaque_tables(Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
  var match = cb[/* const_body */1];
  switch (match.tag | 0) {
    case 0 : 
        return /* None */0;
    case 1 : 
        return /* Some */[instantiate(cb, Mod_subst$ReactTemplate.force_constr(match[0]))];
    case 2 : 
        return /* Some */[instantiate(cb, Opaqueproof$ReactTemplate.force_proof(otab, match[0]))];
    
  }
}

function body_of_constant(cst) {
  return body_of_constant_body(Environ$ReactTemplate.lookup_constant(cst, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0))));
}

function constant_of_delta_kn(kn) {
  var match = Safe_typing$ReactTemplate.delta_of_senv(safe_env(/* () */0));
  return Mod_subst$ReactTemplate.constant_of_deltas_kn(match[1], match[0], kn);
}

function mind_of_delta_kn(kn) {
  var match = Safe_typing$ReactTemplate.delta_of_senv(safe_env(/* () */0));
  return Mod_subst$ReactTemplate.mind_of_deltas_kn(match[1], match[0], kn);
}

function env_of_context(hyps) {
  return Environ$ReactTemplate.reset_with_named_context(hyps, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)));
}

function constr_of_global_in_context(env, r) {
  switch (r.tag | 0) {
    case 0 : 
        return /* tuple */[
                Constr$ReactTemplate.mkVar(r[0]),
                Univ$ReactTemplate.AUContext[/* empty */1]
              ];
    case 1 : 
        var c = r[0];
        var cb = Environ$ReactTemplate.lookup_constant(c, env);
        var univs = Declareops$ReactTemplate.constant_polymorphic_context(cb);
        return /* tuple */[
                Constr$ReactTemplate.mkConstU(/* tuple */[
                      c,
                      Univ$ReactTemplate.make_abstract_instance(univs)
                    ]),
                univs
              ];
    case 2 : 
        var ind = r[0];
        var specif = Inductive$ReactTemplate.lookup_mind_specif(env, ind);
        var univs$1 = Declareops$ReactTemplate.inductive_polymorphic_context(specif[0]);
        return /* tuple */[
                Constr$ReactTemplate.mkIndU(/* tuple */[
                      ind,
                      Univ$ReactTemplate.make_abstract_instance(univs$1)
                    ]),
                univs$1
              ];
    case 3 : 
        var cstr = r[0];
        var specif$1 = Inductive$ReactTemplate.lookup_mind_specif(env, Names$ReactTemplate.inductive_of_constructor(cstr));
        var univs$2 = Declareops$ReactTemplate.inductive_polymorphic_context(specif$1[0]);
        return /* tuple */[
                Constr$ReactTemplate.mkConstructU(/* tuple */[
                      cstr,
                      Univ$ReactTemplate.make_abstract_instance(univs$2)
                    ]),
                univs$2
              ];
    
  }
}

function type_of_global_in_context(env, r) {
  switch (r.tag | 0) {
    case 0 : 
        return /* tuple */[
                Environ$ReactTemplate.named_type(r[0], env),
                Univ$ReactTemplate.AUContext[/* empty */1]
              ];
    case 1 : 
        var cb = Environ$ReactTemplate.lookup_constant(r[0], env);
        var univs = Declareops$ReactTemplate.constant_polymorphic_context(cb);
        return /* tuple */[
                cb[/* const_type */2],
                univs
              ];
    case 2 : 
        var specif = Inductive$ReactTemplate.lookup_mind_specif(env, r[0]);
        var univs$1 = Declareops$ReactTemplate.inductive_polymorphic_context(specif[0]);
        var inst = Univ$ReactTemplate.make_abstract_instance(univs$1);
        var env$1 = Environ$ReactTemplate.push_context(/* Some */[/* false */0], Univ$ReactTemplate.AUContext[/* repr */0](univs$1), env);
        return /* tuple */[
                Inductive$ReactTemplate.type_of_inductive(env$1, /* tuple */[
                      specif,
                      inst
                    ]),
                univs$1
              ];
    case 3 : 
        var cstr = r[0];
        var specif$1 = Inductive$ReactTemplate.lookup_mind_specif(env, Names$ReactTemplate.inductive_of_constructor(cstr));
        var univs$2 = Declareops$ReactTemplate.inductive_polymorphic_context(specif$1[0]);
        var inst$1 = Univ$ReactTemplate.make_abstract_instance(univs$2);
        return /* tuple */[
                Inductive$ReactTemplate.type_of_constructor(/* tuple */[
                      cstr,
                      inst$1
                    ], specif$1),
                univs$2
              ];
    
  }
}

function universes_of_global(gr) {
  var env = Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0));
  var r = gr;
  switch (r.tag | 0) {
    case 0 : 
        return Univ$ReactTemplate.AUContext[/* empty */1];
    case 1 : 
        return Declareops$ReactTemplate.constant_polymorphic_context(Environ$ReactTemplate.lookup_constant(r[0], env));
    case 2 : 
        var match = Inductive$ReactTemplate.lookup_mind_specif(env, r[0]);
        return Declareops$ReactTemplate.inductive_polymorphic_context(match[0]);
    case 3 : 
        var match$1 = Inductive$ReactTemplate.lookup_mind_specif(env, Names$ReactTemplate.inductive_of_constructor(r[0]));
        return Declareops$ReactTemplate.inductive_polymorphic_context(match$1[0]);
    
  }
}

function is_polymorphic(r) {
  var env = Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0));
  switch (r.tag | 0) {
    case 0 : 
        return /* false */0;
    case 1 : 
        return Environ$ReactTemplate.polymorphic_constant(r[0], env);
    case 2 : 
        return Environ$ReactTemplate.polymorphic_ind(r[0], env);
    case 3 : 
        return Environ$ReactTemplate.polymorphic_ind(Names$ReactTemplate.inductive_of_constructor(r[0]), env);
    
  }
}

function is_template_polymorphic(r) {
  var env = Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0));
  switch (r.tag | 0) {
    case 0 : 
    case 1 : 
        return /* false */0;
    case 2 : 
        return Environ$ReactTemplate.template_polymorphic_ind(r[0], env);
    case 3 : 
        return Environ$ReactTemplate.template_polymorphic_ind(Names$ReactTemplate.inductive_of_constructor(r[0]), env);
    
  }
}

function is_type_in_type(r) {
  var env = Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0));
  switch (r.tag | 0) {
    case 0 : 
        return /* false */0;
    case 1 : 
        return Environ$ReactTemplate.type_in_type_constant(r[0], env);
    case 2 : 
        return Environ$ReactTemplate.type_in_type_ind(r[0], env);
    case 3 : 
        return Environ$ReactTemplate.type_in_type_ind(Names$ReactTemplate.inductive_of_constructor(r[0]), env);
    
  }
}

function current_dirpath() {
  return Pervasives.failwith("unimplemented: current_dirpath");
}

function with_global(f) {
  var match = Curry._2(f, Safe_typing$ReactTemplate.env_of_safe_env(safe_env(/* () */0)), Pervasives.failwith("unimplemented: current_dirpath"));
  push_context_set(/* false */0, match[1]);
  return match[0];
}

function set_strategy(k, l) {
  global_env[0] = Safe_typing$ReactTemplate.set_strategy(safe_env(/* () */0), k, l);
  return /* () */0;
}

exports.safe_env = safe_env;
exports.env = env;
exports.env_is_initial = env_is_initial;
exports.universes = universes;
exports.named_context_val = named_context_val;
exports.named_context = named_context;
exports.set_engagement = set_engagement;
exports.set_typing_flags = set_typing_flags;
exports.push_named_assum = push_named_assum;
exports.push_named_def = push_named_def;
exports.export_private_constants = export_private_constants;
exports.add_constant = add_constant;
exports.add_mind = add_mind;
exports.add_constraints = add_constraints;
exports.push_context = push_context;
exports.push_context_set = push_context_set;
exports.add_module = add_module;
exports.add_modtype = add_modtype;
exports.add_include = add_include;
exports.start_module = start_module;
exports.start_modtype = start_modtype;
exports.end_module = end_module;
exports.end_modtype = end_modtype;
exports.add_module_parameter = add_module_parameter;
exports.lookup_named = lookup_named;
exports.lookup_constant = lookup_constant;
exports.lookup_inductive = lookup_inductive;
exports.lookup_pinductive = lookup_pinductive;
exports.lookup_mind = lookup_mind;
exports.lookup_module = lookup_module;
exports.lookup_modtype = lookup_modtype;
exports.exists_objlabel = exists_objlabel;
exports.constant_of_delta_kn = constant_of_delta_kn;
exports.mind_of_delta_kn = mind_of_delta_kn;
exports.opaque_tables = opaque_tables;
exports.body_of_constant = body_of_constant;
exports.body_of_constant_body = body_of_constant_body;
exports.env_of_context = env_of_context;
exports.join_safe_environment = join_safe_environment$1;
exports.is_joined_environment = is_joined_environment;
exports.is_polymorphic = is_polymorphic;
exports.is_template_polymorphic = is_template_polymorphic;
exports.is_type_in_type = is_type_in_type;
exports.constr_of_global_in_context = constr_of_global_in_context;
exports.type_of_global_in_context = type_of_global_in_context;
exports.universes_of_global = universes_of_global;
exports.set_strategy = set_strategy;
exports.current_dirpath = current_dirpath;
exports.with_global = with_global;
exports.global_env_summary_tag = global_env_summary_tag;
/* global_env_summary_tag Not a pure module */
