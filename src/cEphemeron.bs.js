// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Gc = require("bs-platform/lib/js/gc.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var bid = [0];

function mk_key() {
  bid[0] = bid[0] + 1 | 0;
  return [[bid[0]]];
}

function equal(k1, k2) {
  return +(k1 === k2);
}

function hash(id) {
  return id[0];
}

var HT = Hashtbl.Make(/* module */[
      /* equal */equal,
      /* hash */hash
    ]);

var values = Curry._1(HT[/* create */0], 1001);

var collection_queue = [[/* Empty */0]];

function enqueue(x) {
  collection_queue[0] = [/* Item */[
      x[0],
      collection_queue[0]
    ]];
  return /* () */0;
}

function run_collection() {
  var aux = function (_l) {
    while(true) {
      var l = _l;
      var match = l[0];
      if (match) {
        Curry._2(HT[/* remove */5], values, match[0]);
        _l = match[1];
        continue ;
        
      } else {
        return /* () */0;
      }
    };
  };
  var l = collection_queue[0];
  aux(l);
  l[0] = /* Empty */0;
  return /* () */0;
}

function create(v) {
  run_collection(/* () */0);
  var k = mk_key(/* () */0);
  Curry._3(HT[/* add */4], values, k[0], v);
  Gc.finalise(enqueue, k);
  return k;
}

var InvalidKey = Caml_exceptions.create("CEphemeron-ReactTemplate.InvalidKey");

function get(k) {
  run_collection(/* () */0);
  try {
    return Curry._2(HT[/* find */6], values, k[0]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      throw InvalidKey;
    } else {
      throw exn;
    }
  }
}

function $$default(k, v) {
  try {
    return get(k);
  }
  catch (exn){
    if (exn === InvalidKey) {
      return v;
    } else {
      throw exn;
    }
  }
}

function iter_opt(k, f) {
  var match;
  try {
    match = /* Some */[get(k)];
  }
  catch (exn){
    if (exn === InvalidKey) {
      match = /* None */0;
    } else {
      throw exn;
    }
  }
  if (match) {
    return Curry._1(f, match[0]);
  } else {
    return /* () */0;
  }
}

function clear() {
  return run_collection(/* () */0);
}

exports.create = create;
exports.InvalidKey = InvalidKey;
exports.get = get;
exports.iter_opt = iter_opt;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.clear = clear;
/* HT Not a pure module */
