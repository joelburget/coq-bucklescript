// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");

function create(fname, line_nb, bol_pos, bp, ep) {
  return /* record */[
          /* fname */fname,
          /* line_nb */line_nb,
          /* bol_pos */bol_pos,
          /* line_nb_last */line_nb,
          /* bol_pos_last */bol_pos,
          /* bp */bp,
          /* ep */ep
        ];
}

function make_loc(param) {
  return /* record */[
          /* fname : ToplevelInput */0,
          /* line_nb */-1,
          /* bol_pos */0,
          /* line_nb_last */-1,
          /* bol_pos_last */0,
          /* bp */param[0],
          /* ep */param[1]
        ];
}

function mergeable(loc1, loc2) {
  return Caml_obj.caml_equal(loc1[/* fname */0], loc2[/* fname */0]);
}

function merge(loc1, loc2) {
  if (!mergeable(loc1, loc2)) {
    Pervasives.failwith("Trying to merge unmergeable locations.");
  }
  if (loc1[/* bp */5] < loc2[/* bp */5]) {
    if (loc1[/* ep */6] < loc2[/* ep */6]) {
      return /* record */[
              /* fname */loc1[/* fname */0],
              /* line_nb */loc1[/* line_nb */1],
              /* bol_pos */loc1[/* bol_pos */2],
              /* line_nb_last */loc2[/* line_nb_last */3],
              /* bol_pos_last */loc2[/* bol_pos_last */4],
              /* bp */loc1[/* bp */5],
              /* ep */loc2[/* ep */6]
            ];
    } else {
      return loc1;
    }
  } else if (loc2[/* ep */6] < loc1[/* ep */6]) {
    return /* record */[
            /* fname */loc2[/* fname */0],
            /* line_nb */loc2[/* line_nb */1],
            /* bol_pos */loc2[/* bol_pos */2],
            /* line_nb_last */loc1[/* line_nb_last */3],
            /* bol_pos_last */loc1[/* bol_pos_last */4],
            /* bp */loc2[/* bp */5],
            /* ep */loc1[/* ep */6]
          ];
  } else {
    return loc2;
  }
}

function merge_opt(l1, l2) {
  if (l1) {
    var l = l1[0];
    if (l2) {
      return /* Some */[merge(l, l2[0])];
    } else {
      return /* Some */[l];
    }
  } else if (l2) {
    return /* Some */[l2[0]];
  } else {
    return /* None */0;
  }
}

function unloc(loc) {
  return /* tuple */[
          loc[/* bp */5],
          loc[/* ep */6]
        ];
}

function shift_loc(kb, kp, loc) {
  return /* record */[
          /* fname */loc[/* fname */0],
          /* line_nb */loc[/* line_nb */1],
          /* bol_pos */loc[/* bol_pos */2],
          /* line_nb_last */loc[/* line_nb_last */3],
          /* bol_pos_last */loc[/* bol_pos_last */4],
          /* bp */loc[/* bp */5] + kb | 0,
          /* ep */loc[/* ep */6] + kp | 0
        ];
}

function tag(loc, x) {
  return /* tuple */[
          loc,
          x
        ];
}

function map(f, param) {
  return /* tuple */[
          param[0],
          Curry._1(f, param[1])
        ];
}

var $$location = Curry._1(Exninfo$ReactTemplate.make, /* () */0);

function add_loc(e, loc) {
  return Curry._3(Exninfo$ReactTemplate.add, e, $$location, loc);
}

function get_loc(e) {
  return Curry._2(Exninfo$ReactTemplate.get, e, $$location);
}

function raise(loc, e) {
  if (loc) {
    var info = Curry._3(Exninfo$ReactTemplate.add, Exninfo$ReactTemplate.$$null, $$location, loc[0]);
    return Exninfo$ReactTemplate.iraise(/* tuple */[
                e,
                info
              ]);
  } else {
    throw e;
  }
}

exports.create = create;
exports.unloc = unloc;
exports.make_loc = make_loc;
exports.merge = merge;
exports.merge_opt = merge_opt;
exports.shift_loc = shift_loc;
exports.add_loc = add_loc;
exports.get_loc = get_loc;
exports.raise = raise;
exports.tag = tag;
exports.map = map;
/* location Not a pure module */
