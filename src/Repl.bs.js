// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Repl");

function onSubmit(text) {
  console.log(text);
  return /* () */0;
}

function valueFromEvent(evt) {
  return evt.target.value;
}

function setInputRef(theRef, param) {
  param[/* state */2][/* inputRef */2][0] = (theRef == null) ? /* None */0 : [theRef];
  return /* () */0;
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var match = param[/* state */2];
      var inputRef = match[/* inputRef */2];
      var text = match[/* text */0];
      var reduce = param[/* reduce */1];
      var output = $$Array.of_list(List.rev(List.mapi((function (i, op) {
                      return React.createElement("p", {
                                  key: Pervasives.string_of_int(i)
                                }, "> " + op);
                    }), match[/* history */1])));
      return React.createElement("div", {
                  className: "input",
                  onClick: (function () {
                      var match = inputRef[0];
                      if (match) {
                        return match[0].focus();
                      } else {
                        return /* () */0;
                      }
                    })
                }, output, React.createElement("p", undefined, React.createElement("span", {
                          className: "prompt"
                        }, "> "), React.createElement("input", {
                          ref: Curry._1(param[/* handle */0], setInputRef),
                          autoFocus: true,
                          type: "text",
                          value: text,
                          onKeyDown: (function (evt) {
                              if (evt.key === "Enter") {
                                console.log(text);
                                return Curry._2(reduce, (function () {
                                              return /* Command */Block.__(1, [text]);
                                            }), /* () */0);
                              } else {
                                return 0;
                              }
                            }),
                          onChange: Curry._1(reduce, (function (evt) {
                                  return /* Typed */Block.__(0, [evt.target.value]);
                                }))
                        })));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* text */"",
              /* history : [] */0,
              /* inputRef */[/* None */0]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action.tag) {
        return /* Update */Block.__(0, [/* record */[
                    /* text */"",
                    /* history : :: */[
                      action[0],
                      state[/* history */1]
                    ],
                    /* inputRef */state[/* inputRef */2]
                  ]]);
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* text */action[0],
                    /* history */state[/* history */1],
                    /* inputRef */state[/* inputRef */2]
                  ]]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.onSubmit = onSubmit;
exports.valueFromEvent = valueFromEvent;
exports.setInputRef = setInputRef;
exports.make = make;
/* component Not a pure module */
