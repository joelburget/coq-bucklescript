// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Hashset$ReactTemplate = require("./hashset.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Make(X) {
  var Htbl = Hashset$ReactTemplate.Make([X[1]]);
  var generate = function (u) {
    var tab = Curry._1(Htbl[/* create */0], 97);
    return /* tuple */[
            tab,
            u
          ];
  };
  var hcons = function (param, x) {
    var y = Curry._2(X[/* hashcons */0], param[1], x);
    return Curry._3(Htbl[/* repr */2], Curry._1(X[/* hash */2], y), y, param[0]);
  };
  return /* module */[
          /* generate */generate,
          /* hcons */hcons
        ];
}

function simple_hcons(h, f, u) {
  var table = Curry._1(h, u);
  return (function (x) {
      return Curry._2(f, table, x);
    });
}

function recursive_hcons(h, f, u) {
  var loop = [(function () {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "hashcons.ml",
                94,
                27
              ]
            ];
      })];
  var self = function (x) {
    return Curry._1(loop[0], x);
  };
  var table = Curry._1(h, /* tuple */[
        self,
        u
      ]);
  var hrec = function (x) {
    return Curry._2(f, table, x);
  };
  loop[0] = hrec;
  return hrec;
}

function Hlist(D) {
  var hashcons = function (param, l) {
    if (l) {
      return /* :: */[
              Curry._1(param[1], l[0]),
              Curry._1(param[0], l[1])
            ];
    } else {
      return l;
    }
  };
  var eq = function (l1, l2) {
    if (l1 === l2) {
      return /* true */1;
    } else if (l1) {
      if (l2 && l1[0] === l2[0]) {
        return +(l1[1] === l2[1]);
      } else {
        return /* false */0;
      }
    } else if (l2) {
      return /* false */0;
    } else {
      return /* true */1;
    }
  };
  var hash = function (_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        var accu$1 = Hashset$ReactTemplate.Combine[/* combine */0](Curry._1(D[/* hash */0], param[0]), accu);
        _param = param[1];
        _accu = accu$1;
        continue ;
        
      } else {
        return accu;
      }
    };
  };
  var Htbl = Hashset$ReactTemplate.Make([eq]);
  var generate = function (u) {
    var tab = Curry._1(Htbl[/* create */0], 97);
    return /* tuple */[
            tab,
            u
          ];
  };
  var hcons = function (param, x) {
    var y = hashcons(param[1], x);
    return Curry._3(Htbl[/* repr */2], hash(0, y), y, param[0]);
  };
  return /* module */[
          /* generate */generate,
          /* hcons */hcons
        ];
}

function hash(s) {
  var len = s.length;
  var len$1 = len;
  var s$1 = s;
  var _i = 0;
  var _accu = 0;
  while(true) {
    var accu = _accu;
    var i = _i;
    if (i === len$1) {
      return accu;
    } else {
      var c = s$1.charCodeAt(i);
      _accu = Caml_int32.imul(accu, 19) + c | 0;
      _i = i + 1 | 0;
      continue ;
      
    }
  };
}

function X_001(prim, prim$1) {
  return +(prim === prim$1);
}

var Htbl = Hashset$ReactTemplate.Make([X_001]);

function generate(u) {
  var tab = Curry._1(Htbl[/* create */0], 97);
  return /* tuple */[
          tab,
          u
        ];
}

function hcons(param, x) {
  return Curry._3(Htbl[/* repr */2], hash(x), x, param[0]);
}

var Hstring = /* module */[
  /* generate */generate,
  /* hcons */hcons
];

var NotEq = Caml_exceptions.create("Hashcons-ReactTemplate.NotEq");

function tuple_p(obj) {
  if (obj.length !== undefined) {
    return +((obj.tag | 0) < 251);
  } else {
    return /* false */0;
  }
}

function comp_obj(o1, o2) {
  if (tuple_p(o1) && tuple_p(o2)) {
    var n1 = o1.length;
    var n2 = o2.length;
    if (n1 === n2) {
      try {
        for(var i = 0 ,i_finish = n1 - 1 | 0; i <= i_finish; ++i){
          if (o1[i] !== o2[i]) {
            throw NotEq;
          }
          
        }
        return /* true */1;
      }
      catch (exn){
        if (exn === NotEq) {
          return /* false */0;
        } else {
          throw exn;
        }
      }
    } else {
      return /* false */0;
    }
  } else {
    return Caml_obj.caml_equal(o1, o2);
  }
}

function hashcons(param) {
  var partial_arg = param[0];
  return (function (param) {
      var hrec = partial_arg;
      var o = param;
      if (tuple_p(o)) {
        var n = o.length;
        for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
          o[i] = Curry._1(hrec, o[i]);
        }
      }
      return o;
    });
}

var Htbl$1 = Hashset$ReactTemplate.Make([comp_obj]);

function generate$1(u) {
  var tab = Curry._1(Htbl$1[/* create */0], 97);
  return /* tuple */[
          tab,
          u
        ];
}

function hcons$1(param, x) {
  var y = hashcons(param[1])(x);
  return Curry._3(Htbl$1[/* repr */2], Hashtbl.hash(y), y, param[0]);
}

var Hobj = /* module */[
  /* generate */generate$1,
  /* hcons */hcons$1
];

exports.Make = Make;
exports.simple_hcons = simple_hcons;
exports.recursive_hcons = recursive_hcons;
exports.Hstring = Hstring;
exports.Hlist = Hlist;
exports.Hobj = Hobj;
/* Htbl Not a pure module */
