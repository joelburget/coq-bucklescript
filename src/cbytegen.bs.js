// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Pp$ReactTemplate = require("./pp.bs.js");
var Univ$ReactTemplate = require("./univ.bs.js");
var Util$ReactTemplate = require("./util.bs.js");
var Flags$ReactTemplate = require("./flags.bs.js");
var Names$ReactTemplate = require("./names.bs.js");
var Constr$ReactTemplate = require("./constr.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var Uint31$ReactTemplate = require("./uint31.bs.js");
var CErrors$ReactTemplate = require("./cErrors.bs.js");
var Clambda$ReactTemplate = require("./clambda.bs.js");
var Pre_env$ReactTemplate = require("./pre_env.bs.js");
var Feedback$ReactTemplate = require("./feedback.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Mod_subst$ReactTemplate = require("./mod_subst.bs.js");
var Cbytecodes$ReactTemplate = require("./cbytecodes.bs.js");
var Cemitcodes$ReactTemplate = require("./cemitcodes.bs.js");

var empty_fv_002 = /* fv_fwd */Cbytecodes$ReactTemplate.FvMap[/* empty */0];

var empty_fv = /* record */[
  /* size */0,
  /* fv_rev : [] */0,
  empty_fv_002
];

function push_fv(d, e) {
  return /* record */[
          /* size */e[/* size */0] + 1 | 0,
          /* fv_rev : :: */[
            d,
            e[/* fv_rev */1]
          ],
          /* fv_fwd */Curry._3(Cbytecodes$ReactTemplate.FvMap[/* add */3], d, e[/* size */0], e[/* fv_fwd */2])
        ];
}

function empty_comp_env($staropt$star, _) {
  var univs = $staropt$star ? $staropt$star[0] : 0;
  return /* record */[
          /* nb_uni_stack */univs,
          /* nb_stack */0,
          /* in_stack : [] */0,
          /* nb_rec */0,
          /* pos_rec : [] */0,
          /* offset */0,
          /* in_env */[empty_fv]
        ];
}

var max_stack_size = [0];

function set_max_stack_size(stack_size) {
  if (stack_size > max_stack_size[0]) {
    max_stack_size[0] = stack_size;
    return /* () */0;
  } else {
    return 0;
  }
}

function ensure_stack_capacity(f, x) {
  var old = max_stack_size[0];
  max_stack_size[0] = 0;
  var code = Curry._1(f, x);
  var used_safe = max_stack_size[0] + 15 | 0;
  max_stack_size[0] = old;
  if (used_safe > 256) {
    return /* :: */[
            /* Kensurestackcapacity */Block.__(24, [used_safe]),
            code
          ];
  } else {
    return code;
  }
}

function add_param(_n, sz, _l) {
  while(true) {
    var l = _l;
    var n = _n;
    if (n) {
      _l = /* :: */[
        n + sz | 0,
        l
      ];
      _n = n - 1 | 0;
      continue ;
      
    } else {
      return l;
    }
  };
}

function comp_env_fun($staropt$star, arity) {
  var univs = $staropt$star ? $staropt$star[0] : 0;
  return /* record */[
          /* nb_uni_stack */univs,
          /* nb_stack */arity,
          /* in_stack */add_param(arity, 0, /* [] */0),
          /* nb_rec */0,
          /* pos_rec : [] */0,
          /* offset */1,
          /* in_env */[empty_fv]
        ];
}

function comp_env_fix_type(rfv) {
  return /* record */[
          /* nb_uni_stack */0,
          /* nb_stack */0,
          /* in_stack : [] */0,
          /* nb_rec */0,
          /* pos_rec : [] */0,
          /* offset */1,
          /* in_env */rfv
        ];
}

function comp_env_fix(ndef, curr_pos, arity, rfv) {
  var prec = /* [] */0;
  for(var i = ndef; i >= 1; --i){
    prec = /* :: */[
      /* Koffsetclosure */Block.__(3, [(((ndef - curr_pos | 0) - i | 0) << 1)]),
      prec
    ];
  }
  return /* record */[
          /* nb_uni_stack */0,
          /* nb_stack */arity,
          /* in_stack */add_param(arity, 0, /* [] */0),
          /* nb_rec */ndef,
          /* pos_rec */prec,
          /* offset */(((ndef - curr_pos | 0) - 1 | 0) << 1) + 1 | 0,
          /* in_env */rfv
        ];
}

function comp_env_cofix_type(ndef, rfv) {
  return /* record */[
          /* nb_uni_stack */0,
          /* nb_stack */0,
          /* in_stack : [] */0,
          /* nb_rec */0,
          /* pos_rec : [] */0,
          /* offset */1 + ndef | 0,
          /* in_env */rfv
        ];
}

function comp_env_cofix(ndef, arity, rfv) {
  var prec = /* [] */0;
  for(var i = 1; i <= ndef; ++i){
    prec = /* :: */[
      /* Kenvacc */Block.__(2, [i]),
      prec
    ];
  }
  return /* record */[
          /* nb_uni_stack */0,
          /* nb_stack */arity,
          /* in_stack */add_param(arity, 0, /* [] */0),
          /* nb_rec */ndef,
          /* pos_rec */prec,
          /* offset */ndef + 1 | 0,
          /* in_env */rfv
        ];
}

function push_param(n, sz, r) {
  return /* record */[
          /* nb_uni_stack */r[/* nb_uni_stack */0],
          /* nb_stack */r[/* nb_stack */1] + n | 0,
          /* in_stack */add_param(n, sz, r[/* in_stack */2]),
          /* nb_rec */r[/* nb_rec */3],
          /* pos_rec */r[/* pos_rec */4],
          /* offset */r[/* offset */5],
          /* in_env */r[/* in_env */6]
        ];
}

function push_local(sz, r) {
  return /* record */[
          /* nb_uni_stack */r[/* nb_uni_stack */0],
          /* nb_stack */r[/* nb_stack */1] + 1 | 0,
          /* in_stack : :: */[
            sz + 1 | 0,
            r[/* in_stack */2]
          ],
          /* nb_rec */r[/* nb_rec */3],
          /* pos_rec */r[/* pos_rec */4],
          /* offset */r[/* offset */5],
          /* in_env */r[/* in_env */6]
        ];
}

function find_at(fv, env) {
  return Curry._2(Cbytecodes$ReactTemplate.FvMap[/* find */21], fv, env[/* fv_fwd */2]);
}

function pos_named(id, r) {
  var env = r[/* in_env */6][0];
  var cid = /* FVnamed */Block.__(0, [id]);
  try {
    return /* Kenvacc */Block.__(2, [r[/* offset */5] + find_at(cid, env) | 0]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      var pos = env[/* size */0];
      r[/* in_env */6][0] = push_fv(cid, env);
      return /* Kenvacc */Block.__(2, [r[/* offset */5] + pos | 0]);
    } else {
      throw exn;
    }
  }
}

function pos_rel(i, r, sz) {
  if (i <= r[/* nb_stack */1]) {
    return /* Kacc */Block.__(1, [sz - Curry._2(Util$ReactTemplate.List[/* nth */3], r[/* in_stack */2], i - 1 | 0) | 0]);
  } else {
    var i$1 = i - r[/* nb_stack */1] | 0;
    if (i$1 <= r[/* nb_rec */3]) {
      try {
        return Curry._2(Util$ReactTemplate.List[/* nth */3], r[/* pos_rec */4], i$1 - 1 | 0);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                [
                  "cbytegen.ml",
                  239,
                  45
                ]
              ];
        } else if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                [
                  "cbytegen.ml",
                  239,
                  45
                ]
              ];
        } else {
          throw exn;
        }
      }
    } else {
      var i$2 = i$1 - r[/* nb_rec */3] | 0;
      var db = /* FVrel */Block.__(1, [i$2]);
      var env = r[/* in_env */6][0];
      try {
        return /* Kenvacc */Block.__(2, [r[/* offset */5] + find_at(db, env) | 0]);
      }
      catch (exn$1){
        if (exn$1 === Caml_builtin_exceptions.not_found) {
          var pos = env[/* size */0];
          r[/* in_env */6][0] = push_fv(db, env);
          return /* Kenvacc */Block.__(2, [r[/* offset */5] + pos | 0]);
        } else {
          throw exn$1;
        }
      }
    }
  }
}

function pos_universe_var(i, r, sz) {
  if (i < r[/* nb_uni_stack */0]) {
    return /* Kacc */Block.__(1, [(sz - r[/* nb_stack */1] | 0) - (r[/* nb_uni_stack */0] - i | 0) | 0]);
  } else {
    var env = r[/* in_env */6][0];
    var db = /* FVuniv_var */Block.__(2, [i]);
    try {
      return /* Kenvacc */Block.__(2, [r[/* offset */5] + find_at(db, env) | 0]);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        var pos = env[/* size */0];
        r[/* in_env */6][0] = push_fv(db, env);
        return /* Kenvacc */Block.__(2, [r[/* offset */5] + pos | 0]);
      } else {
        throw exn;
      }
    }
  }
}

function pos_evar(evk, r) {
  var env = r[/* in_env */6][0];
  var cid = /* FVevar */Block.__(3, [evk]);
  try {
    return /* Kenvacc */Block.__(2, [r[/* offset */5] + find_at(cid, env) | 0]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      var pos = env[/* size */0];
      r[/* in_env */6][0] = push_fv(cid, env);
      return /* Kenvacc */Block.__(2, [r[/* offset */5] + pos | 0]);
    } else {
      throw exn;
    }
  }
}

function label_code(cont) {
  var exit = 0;
  if (cont) {
    var match = cont[0];
    if (typeof match === "number") {
      exit = 1;
    } else {
      switch (match.tag | 0) {
        case 0 : 
        case 25 : 
            return /* tuple */[
                    match[0],
                    cont
                  ];
        default:
          exit = 1;
      }
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    var lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
    return /* tuple */[
            lbl,
            /* :: */[
              /* Klabel */Block.__(0, [lbl]),
              cont
            ]
          ];
  }
  
}

function make_branch_2(lbl, _n, cont, _param) {
  while(true) {
    var param = _param;
    var n = _n;
    var exit = 0;
    if (param) {
      var match = param[0];
      if (typeof match === "number") {
        exit = 1;
      } else {
        switch (match.tag | 0) {
          case 0 : 
              _param = param[1];
              continue ;
              case 4 : 
              _param = param[1];
              _n = n + match[0] | 0;
              continue ;
              case 8 : 
              return /* tuple */[
                      /* Kreturn */Block.__(8, [n + match[0] | 0]),
                      cont
                    ];
          default:
            exit = 1;
        }
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (lbl) {
        return /* tuple */[
                /* Kbranch */Block.__(25, [lbl[0]]),
                cont
              ];
      } else {
        var lbl$1 = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
        return /* tuple */[
                /* Kbranch */Block.__(25, [lbl$1]),
                /* :: */[
                  /* Klabel */Block.__(0, [lbl$1]),
                  cont
                ]
              ];
      }
    }
    
  };
}

function make_branch(cont) {
  var exit = 0;
  if (cont) {
    var branch = cont[0];
    if (typeof branch === "number") {
      exit = 1;
    } else {
      switch (branch.tag | 0) {
        case 0 : 
            return make_branch_2(/* Some */[branch[0]], 0, cont, cont);
        case 8 : 
        case 25 : 
            return /* tuple */[
                    branch,
                    cont
                  ];
        default:
          exit = 1;
      }
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return make_branch_2(/* None */0, 0, cont, cont);
  }
  
}

function is_tailcall(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (typeof match === "number") {
        return /* None */0;
      } else {
        switch (match.tag | 0) {
          case 0 : 
              _param = param[1];
              continue ;
              case 8 : 
              return /* Some */[match[0]];
          default:
            return /* None */0;
        }
      }
    } else {
      return /* None */0;
    }
  };
}

function add_pop(_n, _cont) {
  while(true) {
    var cont = _cont;
    var n = _n;
    var exit = 0;
    if (cont) {
      var match = cont[0];
      if (typeof match === "number") {
        exit = 1;
      } else {
        switch (match.tag | 0) {
          case 4 : 
              _cont = cont[1];
              _n = n + match[0] | 0;
              continue ;
              case 8 : 
              return /* :: */[
                      /* Kreturn */Block.__(8, [n + match[0] | 0]),
                      cont[1]
                    ];
          default:
            exit = 1;
        }
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (n) {
        return /* :: */[
                /* Kpop */Block.__(4, [n]),
                cont
              ];
      } else {
        return cont;
      }
    }
    
  };
}

function add_grab(arity, lbl, cont) {
  if (arity === 1) {
    return /* :: */[
            /* Klabel */Block.__(0, [lbl]),
            cont
          ];
  } else {
    return /* :: */[
            /* Krestart */2,
            /* :: */[
              /* Klabel */Block.__(0, [lbl]),
              /* :: */[
                /* Kgrab */Block.__(9, [arity - 1 | 0]),
                cont
              ]
            ]
          ];
  }
}

function add_grabrec(rec_arg, arity, lbl, cont) {
  if (arity === 1 && rec_arg < arity) {
    return /* :: */[
            /* Klabel */Block.__(0, [lbl]),
            /* :: */[
              /* Kgrabrec */Block.__(10, [0]),
              /* :: */[
                /* Krestart */2,
                cont
              ]
            ]
          ];
  } else {
    return /* :: */[
            /* Krestart */2,
            /* :: */[
              /* Klabel */Block.__(0, [lbl]),
              /* :: */[
                /* Kgrabrec */Block.__(10, [rec_arg]),
                /* :: */[
                  /* Krestart */2,
                  /* :: */[
                    /* Kgrab */Block.__(9, [arity - 1 | 0]),
                    cont
                  ]
                ]
              ]
            ]
          ];
  }
}

function cont_cofix(arity) {
  return /* :: */[
          /* Kpush */0,
          /* :: */[
            /* Kpush */0,
            /* :: */[
              /* Kacc */Block.__(1, [2]),
              /* :: */[
                /* Kfield */Block.__(20, [1]),
                /* :: */[
                  /* Kfield */Block.__(20, [0]),
                  /* :: */[
                    /* Kmakeblock */Block.__(16, [
                        2,
                        Cbytecodes$ReactTemplate.cofix_evaluated_tag
                      ]),
                    /* :: */[
                      /* Kpush */0,
                      /* :: */[
                        /* Kacc */Block.__(1, [2]),
                        /* :: */[
                          /* Ksetfield */Block.__(21, [1]),
                          /* :: */[
                            /* Kacc */Block.__(1, [0]),
                            /* :: */[
                              /* Kreturn */Block.__(8, [arity + 2 | 0]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

var fun_code = [/* [] */0];

function nest_block(tag, arity, cont) {
  return /* :: */[
          /* Kconst */Block.__(15, [/* Const_b0 */Block.__(3, [tag - Cbytecodes$ReactTemplate.last_variant_tag | 0])]),
          /* :: */[
            /* Kmakeblock */Block.__(16, [
                arity + 1 | 0,
                Cbytecodes$ReactTemplate.last_variant_tag
              ]),
            cont
          ]
        ];
}

function code_makeblock(stack_size, arity, tag, cont) {
  if (tag < Cbytecodes$ReactTemplate.last_variant_tag) {
    return /* :: */[
            /* Kmakeblock */Block.__(16, [
                arity,
                tag
              ]),
            cont
          ];
  } else {
    set_max_stack_size(stack_size + 1 | 0);
    return /* :: */[
            /* Kpush */0,
            nest_block(tag, arity, cont)
          ];
  }
}

function compile_structured_constant(_, sc, sz, cont) {
  set_max_stack_size(sz);
  return /* :: */[
          /* Kconst */Block.__(15, [sc]),
          cont
        ];
}

function comp_args(comp_expr, reloc, args, sz, cont) {
  var nargs_m_1 = args.length - 1 | 0;
  var c = Curry._4(comp_expr, reloc, Caml_array.caml_array_get(args, 0), sz + nargs_m_1 | 0, cont);
  for(var i = 1; i <= nargs_m_1; ++i){
    c = Curry._4(comp_expr, reloc, Caml_array.caml_array_get(args, i), (sz + nargs_m_1 | 0) - i | 0, /* :: */[
          /* Kpush */0,
          c
        ]);
  }
  return c;
}

function comp_app(comp_fun, comp_arg, reloc, f, args, sz, cont) {
  var nargs = args.length;
  if (nargs) {
    var match = is_tailcall(cont);
    if (match) {
      return comp_args(comp_arg, reloc, args, sz, /* :: */[
                  /* Kpush */0,
                  Curry._4(comp_fun, reloc, f, sz + nargs | 0, /* :: */[
                        /* Kappterm */Block.__(7, [
                            nargs,
                            match[0] + nargs | 0
                          ]),
                        cont
                      ])
                ]);
    } else if (nargs < 4) {
      return comp_args(comp_arg, reloc, args, sz, /* :: */[
                  /* Kpush */0,
                  Curry._4(comp_fun, reloc, f, sz + nargs | 0, /* :: */[
                        /* Kapply */Block.__(6, [nargs]),
                        cont
                      ])
                ]);
    } else {
      var match$1 = label_code(cont);
      return /* :: */[
              /* Kpush_retaddr */Block.__(5, [match$1[0]]),
              comp_args(comp_arg, reloc, args, sz + 3 | 0, /* :: */[
                    /* Kpush */0,
                    Curry._4(comp_fun, reloc, f, (sz + 3 | 0) + nargs | 0, /* :: */[
                          /* Kapply */Block.__(6, [nargs]),
                          match$1[1]
                        ])
                  ])
            ];
    }
  } else {
    return Curry._4(comp_fun, reloc, f, sz, cont);
  }
}

function compile_fv_elem(reloc, fv, sz, cont) {
  switch (fv.tag | 0) {
    case 0 : 
        return /* :: */[
                pos_named(fv[0], reloc),
                cont
              ];
    case 1 : 
        return /* :: */[
                pos_rel(fv[0], reloc, sz),
                cont
              ];
    case 2 : 
        return /* :: */[
                pos_universe_var(fv[0], reloc, sz),
                cont
              ];
    case 3 : 
        return /* :: */[
                pos_evar(fv[0], reloc),
                cont
              ];
    
  }
}

function compile_fv(reloc, l, sz, cont) {
  if (l) {
    var tl = l[1];
    var fvn = l[0];
    if (tl) {
      return compile_fv_elem(reloc, fvn, sz, /* :: */[
                  /* Kpush */0,
                  compile_fv(reloc, tl, sz + 1 | 0, cont)
                ]);
    } else {
      set_max_stack_size(sz + 1 | 0);
      return compile_fv_elem(reloc, fvn, sz, cont);
    }
  } else {
    return cont;
  }
}

function get_alias(env, _kn) {
  while(true) {
    var kn = _kn;
    var cb = Pre_env$ReactTemplate.lookup_constant(kn, env);
    var tps = cb[/* const_body_code */3];
    if (tps) {
      var match = Cemitcodes$ReactTemplate.force(tps[0]);
      if (typeof match === "number") {
        return kn;
      } else if (match.tag) {
        _kn = match[0];
        continue ;
        
      } else {
        return kn;
      }
    } else {
      return kn;
    }
  };
}

function make_areconst(n, else_lbl, cont) {
  if (n <= 0) {
    return cont;
  } else {
    return /* :: */[
            /* Kareconst */Block.__(27, [
                n,
                else_lbl
              ]),
            cont
          ];
  }
}

function compile_lam(env, reloc, _lam, sz, _cont) {
  while(true) {
    var cont = _cont;
    var lam = _lam;
    set_max_stack_size(sz);
    switch (lam.tag | 0) {
      case 0 : 
          return /* :: */[
                  pos_rel(lam[1], reloc, sz),
                  cont
                ];
      case 1 : 
          return /* :: */[
                  pos_named(lam[0], reloc),
                  cont
                ];
      case 2 : 
          var args = lam[1];
          var evk = lam[0];
          if (Util$ReactTemplate.$$Array[/* is_empty */23](args)) {
            return compile_fv_elem(reloc, /* FVevar */Block.__(3, [evk]), sz, cont);
          } else {
            return comp_app(compile_fv_elem, (function (param, param$1, param$2, param$3) {
                          return compile_lam(env, param, param$1, param$2, param$3);
                        }), reloc, /* FVevar */Block.__(3, [evk]), args, sz, cont);
          }
      case 3 : 
          var cont1_001 = compile_lam(env, reloc, lam[0], sz + 1 | 0, /* :: */[
                /* Kmakeprod */3,
                cont
              ]);
          var cont1 = /* :: */[
            /* Kpush */0,
            cont1_001
          ];
          _cont = cont1;
          _lam = lam[1];
          continue ;
          case 4 : 
          var body = lam[1];
          var arity = lam[0].length;
          var r_fun = comp_env_fun(/* None */0, arity);
          var lbl_fun = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
          var cont_fun = ensure_stack_capacity((function(body,arity,r_fun){
              return function (param) {
                return compile_lam(env, r_fun, body, arity, param);
              }
              }(body,arity,r_fun)), /* :: */[
                /* Kreturn */Block.__(8, [arity]),
                /* [] */0
              ]);
          fun_code[0] = /* :: */[
            /* Ksequence */Block.__(22, [
                add_grab(arity, lbl_fun, cont_fun),
                fun_code[0]
              ]),
            /* [] */0
          ];
          var fv = r_fun[/* in_env */6][0];
          return compile_fv(reloc, fv[/* fv_rev */1], sz, /* :: */[
                      /* Kclosure */Block.__(11, [
                          lbl_fun,
                          fv[/* size */0]
                        ]),
                      cont
                    ]);
      case 5 : 
          _cont = /* :: */[
            /* Kpush */0,
            compile_lam(env, push_local(sz, reloc), lam[2], sz + 1 | 0, add_pop(1, cont))
          ];
          _lam = lam[1];
          continue ;
          case 6 : 
          var args$1 = lam[1];
          var f = lam[0];
          if (f.tag === 7) {
            var match = f[0];
            return compile_constant(env, reloc, match[0], match[1], args$1, sz, cont);
          } else {
            return comp_app((function (param, param$1, param$2, param$3) {
                          return compile_lam(env, param, param$1, param$2, param$3);
                        }), (function (param, param$1, param$2, param$3) {
                          return compile_lam(env, param, param$1, param$2, param$3);
                        }), reloc, f, args$1, sz, cont);
          }
          break;
      case 7 : 
          var match$1 = lam[0];
          return compile_constant(env, reloc, match$1[0], match$1[1], /* array */[], sz, cont);
      case 8 : 
          return op_compilation(env, lam[1], lam[2])(lam[0], reloc, lam[3], sz, cont);
      case 9 : 
          var branches = lam[4];
          var t = lam[2];
          var ci = lam[0];
          var ind = ci[/* ci_ind */0];
          var mib = Pre_env$ReactTemplate.lookup_mind(ind[0], env);
          var oib = Caml_array.caml_array_get(mib[/* mind_packets */0], ind[1]);
          var lbl_consts = Caml_array.caml_make_vect(oib[/* mind_nb_constant */12], Cbytecodes$ReactTemplate.Label[/* no */0]);
          var nallblock = oib[/* mind_nb_args */13] + 1 | 0;
          var nconst = branches[/* constant_branches */0].length;
          var nblock = Caml_primitive.caml_int_min(nallblock, Cbytecodes$ReactTemplate.last_variant_tag + 1 | 0);
          var lbl_blocks = Caml_array.caml_make_vect(nblock, Cbytecodes$ReactTemplate.Label[/* no */0]);
          var neblock = Caml_primitive.caml_int_max(0, nallblock - Cbytecodes$ReactTemplate.last_variant_tag | 0);
          var lbl_eblocks = Caml_array.caml_make_vect(neblock, Cbytecodes$ReactTemplate.Label[/* no */0]);
          var match$2 = make_branch(cont);
          var branch1 = match$2[0];
          var fcode = ensure_stack_capacity((function(t){
              return function (param) {
                return compile_lam(env, reloc, t, sz, param);
              }
              }(t)), /* :: */[
                /* Kpop */Block.__(4, [sz]),
                /* :: */[
                  /* Kstop */4,
                  /* [] */0
                ]
              ]);
          var match$3 = label_code(fcode);
          fun_code[0] = /* :: */[
            /* Ksequence */Block.__(22, [
                match$3[1],
                fun_code[0]
              ]),
            /* [] */0
          ];
          var lbl_sw = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
          var match$4;
          if (typeof branch1 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  [
                    "cbytegen.ml",
                    642,
                    15
                  ]
                ];
          } else {
            switch (branch1.tag | 0) {
              case 8 : 
                  if (branch1[0] !== sz) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          [
                            "cbytegen.ml",
                            639,
                            10
                          ]
                        ];
                  }
                  match$4 = /* tuple */[
                    sz,
                    branch1,
                    /* true */1
                  ];
                  break;
              case 25 : 
                  match$4 = /* tuple */[
                    sz + 3 | 0,
                    /* Kjump */1,
                    /* false */0
                  ];
                  break;
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "cbytegen.ml",
                        642,
                        15
                      ]
                    ];
            }
          }
          var branch = match$4[1];
          var sz_b = match$4[0];
          var c = match$2[1];
          if (neblock !== 0) {
            var match$5 = label_code(/* :: */[
                  /* Kpush */0,
                  /* :: */[
                    /* Kfield */Block.__(20, [0]),
                    /* :: */[
                      /* Kswitch */Block.__(18, [
                          lbl_eblocks,
                          /* int array */[]
                        ]),
                      c
                    ]
                  ]
                ]);
            Caml_array.caml_array_set(lbl_blocks, Cbytecodes$ReactTemplate.last_variant_tag, match$5[0]);
            c = match$5[1];
          }
          for(var i = nconst - 1 | 0; i >= 0; --i){
            var aux = compile_lam(env, reloc, Caml_array.caml_array_get(branches[/* constant_branches */0], i), sz_b, /* :: */[
                  branch,
                  c
                ]);
            var match$6 = label_code(aux);
            Caml_array.caml_array_set(lbl_consts, i, match$6[0]);
            c = match$6[1];
          }
          for(var i$1 = nallblock - 2 | 0; i$1 >= 0; --i$1){
            var tag = i$1 + 1 | 0;
            var match$7 = Caml_array.caml_array_get(branches[/* nonconstant_branches */1], i$1);
            var arity$1 = match$7[0].length;
            var code_b = compile_lam(env, push_param(arity$1, sz_b, reloc), match$7[1], sz_b + arity$1 | 0, add_pop(arity$1, /* :: */[
                      branch,
                      c
                    ]));
            var code_b$1 = tag < Cbytecodes$ReactTemplate.last_variant_tag ? (set_max_stack_size(sz_b + arity$1 | 0), /* :: */[
                  /* Kpushfields */Block.__(19, [arity$1]),
                  code_b
                ]) : (set_max_stack_size((sz_b + arity$1 | 0) + 1 | 0), /* :: */[
                  /* Kacc */Block.__(1, [0]),
                  /* :: */[
                    /* Kpop */Block.__(4, [1]),
                    /* :: */[
                      /* Kpushfields */Block.__(19, [arity$1 + 1 | 0]),
                      /* :: */[
                        /* Kpop */Block.__(4, [1]),
                        code_b
                      ]
                    ]
                  ]
                ]);
            var match$8 = label_code(code_b$1);
            var lbl_b = match$8[0];
            if (tag < Cbytecodes$ReactTemplate.last_variant_tag) {
              Caml_array.caml_array_set(lbl_blocks, tag, lbl_b);
            } else {
              Caml_array.caml_array_set(lbl_eblocks, tag - Cbytecodes$ReactTemplate.last_variant_tag | 0, lbl_b);
            }
            c = match$8[1];
          }
          var annot_001 = /* rtbl */lam[1];
          var annot_002 = /* tailcall */match$4[2];
          var annot_003 = /* max_stack_size */max_stack_size[0] - sz | 0;
          var annot = /* record */[
            /* ci */ci,
            annot_001,
            annot_002,
            annot_003
          ];
          set_max_stack_size(sz + 3 | 0);
          var match$9 = label_code(/* :: */[
                /* Kmakeswitchblock */Block.__(17, [
                    match$3[0],
                    lbl_sw,
                    annot,
                    sz
                  ]),
                /* :: */[
                  branch,
                  c
                ]
              ]);
          Caml_array.caml_array_set(lbl_blocks, 0, match$9[0]);
          c = /* :: */[
            /* Klabel */Block.__(0, [lbl_sw]),
            /* :: */[
              /* Kswitch */Block.__(18, [
                  lbl_consts,
                  lbl_blocks
                ]),
              match$9[1]
            ]
          ];
          var code_sw;
          code_sw = typeof branch1 === "number" || branch1.tag !== 25 ? c : /* :: */[
              /* Kpush_retaddr */Block.__(5, [branch1[0]]),
              c
            ];
          _cont = code_sw;
          _lam = lam[3];
          continue ;
          case 10 : 
          var match$10 = lam[1];
          var bodies = match$10[2];
          var types = match$10[1];
          var match$11 = lam[0];
          var rec_args = match$11[0];
          var ndef = types.length;
          var rfv = [empty_fv];
          var lbl_types = Caml_array.caml_make_vect(ndef, Cbytecodes$ReactTemplate.Label[/* no */0]);
          var lbl_bodies = Caml_array.caml_make_vect(ndef, Cbytecodes$ReactTemplate.Label[/* no */0]);
          var env_type = comp_env_fix_type(rfv);
          (function(env_type){
          for(var i$2 = 0 ,i_finish = ndef - 1 | 0; i$2 <= i_finish; ++i$2){
            var partial_arg = Caml_array.caml_array_get(types, i$2);
            var fcode$1 = ensure_stack_capacity((function(partial_arg){
                return function (param) {
                  return compile_lam(env, env_type, partial_arg, 0, param);
                }
                }(partial_arg)), /* :: */[
                  /* Kstop */4,
                  /* [] */0
                ]);
            var match$12 = label_code(fcode$1);
            Caml_array.caml_array_set(lbl_types, i$2, match$12[0]);
            fun_code[0] = /* :: */[
              /* Ksequence */Block.__(22, [
                  match$12[1],
                  fun_code[0]
                ]),
              /* [] */0
            ];
          }
          }(env_type));
          for(var i$3 = 0 ,i_finish$1 = ndef - 1 | 0; i$3 <= i_finish$1; ++i$3){
            var match$13 = Clambda$ReactTemplate.decompose_Llam(Caml_array.caml_array_get(bodies, i$3));
            var body$1 = match$13[1];
            var arity$2 = match$13[0].length;
            var env_body = comp_env_fix(ndef, i$3, arity$2, rfv);
            var cont1$1 = ensure_stack_capacity((function(body$1,arity$2,env_body){
                return function (param) {
                  return compile_lam(env, env_body, body$1, arity$2, param);
                }
                }(body$1,arity$2,env_body)), /* :: */[
                  /* Kreturn */Block.__(8, [arity$2]),
                  /* [] */0
                ]);
            var lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
            Caml_array.caml_array_set(lbl_bodies, i$3, lbl);
            var fcode$2 = add_grabrec(Caml_array.caml_array_get(rec_args, i$3), arity$2, lbl, cont1$1);
            fun_code[0] = /* :: */[
              /* Ksequence */Block.__(22, [
                  fcode$2,
                  fun_code[0]
                ]),
              /* [] */0
            ];
          }
          var fv$1 = rfv[0];
          return compile_fv(reloc, fv$1[/* fv_rev */1], sz, /* :: */[
                      /* Kclosurerec */Block.__(12, [
                          fv$1[/* size */0],
                          match$11[1],
                          lbl_types,
                          lbl_bodies
                        ]),
                      cont
                    ]);
      case 11 : 
          var match$14 = lam[1];
          var bodies$1 = match$14[2];
          var types$1 = match$14[1];
          var ndef$1 = types$1.length;
          var lbl_types$1 = Caml_array.caml_make_vect(ndef$1, Cbytecodes$ReactTemplate.Label[/* no */0]);
          var lbl_bodies$1 = Caml_array.caml_make_vect(ndef$1, Cbytecodes$ReactTemplate.Label[/* no */0]);
          var rfv$1 = [empty_fv];
          var env_type$1 = comp_env_cofix_type(ndef$1, rfv$1);
          (function(env_type$1){
          for(var i$4 = 0 ,i_finish$2 = ndef$1 - 1 | 0; i$4 <= i_finish$2; ++i$4){
            var partial_arg$1 = Caml_array.caml_array_get(types$1, i$4);
            var fcode$3 = ensure_stack_capacity((function(partial_arg$1){
                return function (param) {
                  return compile_lam(env, env_type$1, partial_arg$1, 0, param);
                }
                }(partial_arg$1)), /* :: */[
                  /* Kstop */4,
                  /* [] */0
                ]);
            var match$15 = label_code(fcode$3);
            Caml_array.caml_array_set(lbl_types$1, i$4, match$15[0]);
            fun_code[0] = /* :: */[
              /* Ksequence */Block.__(22, [
                  match$15[1],
                  fun_code[0]
                ]),
              /* [] */0
            ];
          }
          }(env_type$1));
          for(var i$5 = 0 ,i_finish$3 = ndef$1 - 1 | 0; i$5 <= i_finish$3; ++i$5){
            var match$16 = Clambda$ReactTemplate.decompose_Llam(Caml_array.caml_array_get(bodies$1, i$5));
            var body$2 = match$16[1];
            var arity$3 = match$16[0].length;
            var env_body$1 = comp_env_cofix(ndef$1, arity$3, rfv$1);
            var lbl$1 = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
            var comp = (function(body$2,env_body$1){
            return function comp(arity) {
              set_max_stack_size(arity + 4 | 0);
              return compile_lam(env, env_body$1, body$2, arity + 1 | 0, cont_cofix(arity));
            }
            }(body$2,env_body$1));
            var cont$1 = ensure_stack_capacity(comp, arity$3);
            Caml_array.caml_array_set(lbl_bodies$1, i$5, lbl$1);
            fun_code[0] = /* :: */[
              /* Ksequence */Block.__(22, [
                  add_grab(arity$3 + 1 | 0, lbl$1, cont$1),
                  fun_code[0]
                ]),
              /* [] */0
            ];
          }
          var fv$2 = rfv$1[0];
          set_max_stack_size(((sz + fv$2[/* size */0] | 0) + ndef$1 | 0) + 2 | 0);
          return compile_fv(reloc, fv$2[/* fv_rev */1], sz, /* :: */[
                      /* Kclosurecofix */Block.__(13, [
                          fv$2[/* size */0],
                          lam[0],
                          lbl_types$1,
                          lbl_bodies$1
                        ]),
                      cont
                    ]);
      case 12 : 
          var args$2 = lam[1];
          var arity$4 = args$2.length;
          var cont$2 = code_makeblock((sz + arity$4 | 0) - 1 | 0, arity$4, lam[0], cont);
          return comp_args((function (param, param$1, param$2, param$3) {
                        return compile_lam(env, param, param$1, param$2, param$3);
                      }), reloc, args$2, sz, cont$2);
      case 13 : 
          return compile_structured_constant(reloc, lam[0], sz, cont);
      case 14 : 
          var s = lam[0];
          if (s.tag) {
            var match$17 = Univ$ReactTemplate.Universe[/* compact */18](s[0]);
            var s$1 = match$17[1];
            var u = match$17[0];
            var compile_get_univ = function (reloc, idx, sz, cont) {
              set_max_stack_size(sz);
              return compile_fv_elem(reloc, /* FVuniv_var */Block.__(2, [idx]), sz, cont);
            };
            if (Curry._1(Util$ReactTemplate.List[/* is_empty */45], s$1)) {
              return compile_structured_constant(reloc, /* Const_sort */Block.__(0, [/* Type */Block.__(1, [u])]), sz, cont);
            } else {
              return comp_app(compile_structured_constant, compile_get_univ, reloc, /* Const_sort */Block.__(0, [/* Type */Block.__(1, [u])]), Util$ReactTemplate.$$Array[/* of_list */10](s$1), sz, cont);
            }
          } else {
            return compile_structured_constant(reloc, /* Const_sort */Block.__(0, [s]), sz, cont);
          }
          break;
      case 15 : 
          var match$18 = lam[0];
          var u$1 = match$18[1];
          var ind$1 = match$18[0];
          if (Univ$ReactTemplate.Instance[/* is_empty */1](u$1)) {
            return compile_structured_constant(reloc, /* Const_ind */Block.__(1, [ind$1]), sz, cont);
          } else {
            return comp_app(compile_structured_constant, compile_universe, reloc, /* Const_ind */Block.__(1, [ind$1]), Univ$ReactTemplate.Instance[/* to_array */3](u$1), sz, cont);
          }
      case 16 : 
          _cont = /* :: */[
            /* Kproj */Block.__(23, [
                lam[0],
                lam[1]
              ]),
            cont
          ];
          _lam = lam[2];
          continue ;
          case 17 : 
          var v = lam[0];
          switch (v.tag | 0) {
            case 0 : 
                return compile_structured_constant(reloc, /* Const_b0 */Block.__(3, [Uint31$ReactTemplate.to_int(v[0])]), sz, cont);
            case 1 : 
                var ds = v[0];
                var nargs = ds.length;
                if (nargs === 31) {
                  var match$19 = make_branch(cont);
                  var else_lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
                  return comp_args((function (param, param$1, param$2, param$3) {
                                return compile_lam(env, param, param$1, param$2, param$3);
                              }), reloc, ds, sz, /* :: */[
                              /* Kisconst */Block.__(26, [else_lbl]),
                              /* :: */[
                                /* Kareconst */Block.__(27, [
                                    30,
                                    else_lbl
                                  ]),
                                /* :: */[
                                  /* Kcompint31 */19,
                                  /* :: */[
                                    match$19[0],
                                    /* :: */[
                                      /* Klabel */Block.__(0, [else_lbl]),
                                      /* :: */[
                                        /* Kmakeblock */Block.__(16, [
                                            31,
                                            1
                                          ]),
                                        match$19[1]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]);
                } else {
                  return comp_app((function (_, _$1, _$2, cont) {
                                var cont$1 = cont;
                                var else_lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
                                var f_cont_000 = /* Kacc */Block.__(1, [0]);
                                var f_cont_001 = /* :: */[
                                  /* Kpop */Block.__(4, [1]),
                                  /* :: */[
                                    /* Kisconst */Block.__(26, [else_lbl]),
                                    /* :: */[
                                      /* Kareconst */Block.__(27, [
                                          30,
                                          else_lbl
                                        ]),
                                      /* :: */[
                                        /* Kcompint31 */19,
                                        /* :: */[
                                          /* Kreturn */Block.__(8, [0]),
                                          /* :: */[
                                            /* Klabel */Block.__(0, [else_lbl]),
                                            /* :: */[
                                              /* Kmakeblock */Block.__(16, [
                                                  31,
                                                  1
                                                ]),
                                              /* :: */[
                                                /* Kreturn */Block.__(8, [0]),
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ];
                                var f_cont = /* :: */[
                                  f_cont_000,
                                  f_cont_001
                                ];
                                var lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
                                fun_code[0] = /* :: */[
                                  /* Ksequence */Block.__(22, [
                                      add_grab(31, lbl, f_cont),
                                      fun_code[0]
                                    ]),
                                  /* [] */0
                                ];
                                return /* :: */[
                                        /* Kclosure */Block.__(11, [
                                            lbl,
                                            0
                                          ]),
                                        cont$1
                                      ];
                              }), (function (param, param$1, param$2, param$3) {
                                return compile_lam(env, param, param$1, param$2, param$3);
                              }), reloc, /* () */0, ds, sz, cont);
                }
                break;
            case 2 : 
                var match$20 = label_code(cont);
                _cont = /* :: */[
                  /* Kisconst */Block.__(26, [match$20[0]]),
                  /* :: */[
                    /* Kdecompint31 */20,
                    match$20[1]
                  ]
                ];
                _lam = v[0];
                continue ;
                
          }
          break;
      
    }
  };
}

function compile_get_global(reloc, param, sz, cont) {
  var u = param[1];
  var kn = param[0];
  set_max_stack_size(sz);
  if (Univ$ReactTemplate.Instance[/* is_empty */1](u)) {
    return /* :: */[
            /* Kgetglobal */Block.__(14, [kn]),
            cont
          ];
  } else {
    return comp_app((function (_, _$1, _$2, cont) {
                  return /* :: */[
                          /* Kgetglobal */Block.__(14, [kn]),
                          cont
                        ];
                }), compile_universe, reloc, /* () */0, Univ$ReactTemplate.Instance[/* to_array */3](u), sz, cont);
  }
}

function compile_universe(reloc, uni, sz, cont) {
  set_max_stack_size(sz);
  var match = Univ$ReactTemplate.Level[/* var_index */12](uni);
  if (match) {
    return /* :: */[
            pos_universe_var(match[0], reloc, sz),
            cont
          ];
  } else {
    return compile_structured_constant(reloc, /* Const_univ_level */Block.__(5, [uni]), sz, cont);
  }
}

function compile_constant(env, reloc, kn, u, args, sz, cont) {
  set_max_stack_size(sz);
  if (Univ$ReactTemplate.Instance[/* is_empty */1](u)) {
    return comp_app((function (_, _$1, sz, cont) {
                  return compile_get_global(reloc, /* tuple */[
                              kn,
                              u
                            ], sz, cont);
                }), (function (param, param$1, param$2, param$3) {
                  return compile_lam(env, param, param$1, param$2, param$3);
                }), reloc, /* () */0, args, sz, cont);
  } else {
    var compile_arg = function (reloc, constr_or_uni, sz, cont) {
      if (constr_or_uni.tag) {
        return compile_universe(reloc, constr_or_uni[0], sz, cont);
      } else {
        return compile_lam(env, reloc, constr_or_uni[0], sz, cont);
      }
    };
    var u$1 = Univ$ReactTemplate.Instance[/* to_array */3](u);
    var lu = u$1.length;
    var all = Util$ReactTemplate.$$Array[/* init */0](lu + args.length | 0, (function (i) {
            if (i < lu) {
              return /* ArgUniv */Block.__(1, [Caml_array.caml_array_get(u$1, i)]);
            } else {
              return /* ArgLambda */Block.__(0, [Caml_array.caml_array_get(args, i - lu | 0)]);
            }
          }));
    return comp_app((function (_, _$1, _$2, cont) {
                  return /* :: */[
                          /* Kgetglobal */Block.__(14, [kn]),
                          cont
                        ];
                }), compile_arg, reloc, /* () */0, all, sz, cont);
  }
}

function op_compilation(env, n, op) {
  return (function (kn, reloc, args, sz, cont) {
      var nargs = args.length;
      if (nargs === n) {
        var match = make_branch(cont);
        var else_lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
        if (n >= 4) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                [
                  "cbytegen.ml",
                  811,
                  4
                ]
              ];
        }
        return comp_args((function (param, param$1, param$2, param$3) {
                      return compile_lam(env, param, param$1, param$2, param$3);
                    }), reloc, args, sz, /* :: */[
                    /* Kisconst */Block.__(26, [else_lbl]),
                    make_areconst(n - 1 | 0, else_lbl, /* :: */[
                          op,
                          /* :: */[
                            match[0],
                            /* :: */[
                              /* Klabel */Block.__(0, [else_lbl]),
                              /* :: */[
                                /* Kpush */0,
                                compile_get_global(reloc, kn, sz + n | 0, /* :: */[
                                      /* Kapply */Block.__(6, [n]),
                                      match[1]
                                    ])
                              ]
                            ]
                          ]
                        ])
                  ]);
      } else {
        return comp_app((function (reloc, _, sz, cont) {
                      var reloc$1 = reloc;
                      var kn$1 = kn;
                      var sz$1 = sz;
                      var cont$1 = cont;
                      var else_lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
                      var f_cont_000 = /* Kareconst */Block.__(27, [
                          n,
                          else_lbl
                        ]);
                      var f_cont_001 = /* :: */[
                        /* Kacc */Block.__(1, [0]),
                        /* :: */[
                          /* Kpop */Block.__(4, [1]),
                          /* :: */[
                            op,
                            /* :: */[
                              /* Kreturn */Block.__(8, [0]),
                              /* :: */[
                                /* Klabel */Block.__(0, [else_lbl]),
                                compile_get_global(reloc$1, kn$1, sz$1, /* :: */[
                                      /* Kappterm */Block.__(7, [
                                          n,
                                          n
                                        ]),
                                      /* [] */0
                                    ])
                              ]
                            ]
                          ]
                        ]
                      ];
                      var f_cont = /* :: */[
                        f_cont_000,
                        f_cont_001
                      ];
                      var lbl = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
                      fun_code[0] = /* :: */[
                        /* Ksequence */Block.__(22, [
                            add_grab(n, lbl, f_cont),
                            fun_code[0]
                          ]),
                        /* [] */0
                      ];
                      return /* :: */[
                              /* Kclosure */Block.__(11, [
                                  lbl,
                                  0
                                ]),
                              cont$1
                            ];
                    }), (function (param, param$1, param$2, param$3) {
                      return compile_lam(env, param, param$1, param$2, param$3);
                    }), reloc, /* () */0, args, sz, cont);
      }
    });
}

function is_univ_copy(max, u) {
  var u$1 = Univ$ReactTemplate.Instance[/* to_array */3](u);
  if (u$1.length === max) {
    return Util$ReactTemplate.$$Array[/* fold_left_i */38]((function (i, acc, u) {
                  if (acc) {
                    var match = Univ$ReactTemplate.Level[/* var_index */12](u);
                    if (match) {
                      return +(match[0] === i);
                    } else {
                      return /* false */0;
                    }
                  } else {
                    return /* false */0;
                  }
                }), /* true */1, u$1);
  } else {
    return /* false */0;
  }
}

function dump_bytecodes(init, code, fvs) {
  return Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.$plus$plus(Pp$ReactTemplate.str("code ="), Pp$ReactTemplate.fnl(/* () */0)), Cbytecodes$ReactTemplate.pp_bytecodes(init)), Pp$ReactTemplate.fnl(/* () */0)), Cbytecodes$ReactTemplate.pp_bytecodes(code)), Pp$ReactTemplate.fnl(/* () */0)), Pp$ReactTemplate.str("fv = ")), Pp$ReactTemplate.prlist_with_sep((function () {
                        return Pp$ReactTemplate.str("; ");
                      }), Cbytecodes$ReactTemplate.pp_fv_elem, fvs)), Pp$ReactTemplate.fnl(/* () */0));
}

function compile(fail_on_error, $staropt$star, env, c) {
  var universes = $staropt$star ? $staropt$star[0] : 0;
  fun_code[0] = /* [] */0;
  Cbytecodes$ReactTemplate.Label[/* reset_label_counter */2](/* () */0);
  var cont = /* :: */[
    /* Kstop */4,
    /* [] */0
  ];
  try {
    var match;
    if (universes) {
      var lam = Clambda$ReactTemplate.lambda_of_constr(/* true */1, env, c);
      var match$1 = Clambda$ReactTemplate.decompose_Llam(lam);
      var body = match$1[1];
      var arity = match$1[0].length;
      var reloc = empty_comp_env(/* None */0, /* () */0);
      var full_arity = arity + universes | 0;
      var r_fun = comp_env_fun(/* Some */[universes], arity);
      var lbl_fun = Cbytecodes$ReactTemplate.Label[/* create */1](/* () */0);
      var cont_fun = ensure_stack_capacity((function (param) {
              return compile_lam(env, r_fun, body, full_arity, param);
            }), /* :: */[
            /* Kreturn */Block.__(8, [full_arity]),
            /* [] */0
          ]);
      fun_code[0] = /* :: */[
        /* Ksequence */Block.__(22, [
            add_grab(full_arity, lbl_fun, cont_fun),
            fun_code[0]
          ]),
        /* [] */0
      ];
      var fv = r_fun[/* in_env */6][0];
      var partial_arg = fv[/* fv_rev */1];
      var init_code = ensure_stack_capacity((function (param) {
              return compile_fv(reloc, partial_arg, 0, param);
            }), /* :: */[
            /* Kclosure */Block.__(11, [
                lbl_fun,
                fv[/* size */0]
              ]),
            cont
          ]);
      match = /* tuple */[
        reloc,
        init_code
      ];
    } else {
      var lam$1 = Clambda$ReactTemplate.lambda_of_constr(/* true */1, env, c);
      var reloc$1 = empty_comp_env(/* None */0, /* () */0);
      match = /* tuple */[
        reloc$1,
        ensure_stack_capacity((function (param) {
                return compile_lam(env, reloc$1, lam$1, 0, param);
              }), cont)
      ];
    }
    var init_code$1 = match[1];
    var fv$1 = Curry._1(Util$ReactTemplate.List[/* rev */4], match[0][/* in_env */6][0][/* fv_rev */1]);
    if (Flags$ReactTemplate.dump_bytecode[0]) {
      Feedback$ReactTemplate.msg_debug(/* None */0, dump_bytecodes(init_code$1, fun_code[0], fv$1));
    }
    return /* Some */[/* tuple */[
              init_code$1,
              fun_code[0],
              Util$ReactTemplate.$$Array[/* of_list */10](fv$1)
            ]];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Clambda$ReactTemplate.TooLargeInductive) {
      var fn;
      if (fail_on_error) {
        var partial_arg$1 = /* Some */["compile"];
        fn = (function (param) {
            return CErrors$ReactTemplate.user_err(/* None */0, partial_arg$1, param);
          });
      } else {
        fn = (function (x) {
            return Feedback$ReactTemplate.msg_warning(/* None */0, x);
          });
      }
      Curry._1(fn, exn[1]);
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function compile_constant_body(fail_on_error, env, univs, param) {
  switch (param.tag | 0) {
    case 1 : 
        var body = Mod_subst$ReactTemplate.force_constr(param[0]);
        var instance_size;
        instance_size = univs.tag ? Univ$ReactTemplate.AUContext[/* size */4](univs[0]) : 0;
        var match = Constr$ReactTemplate.kind(body);
        var exit = 0;
        if (match.tag === 10) {
          var match$1 = match[0];
          if (is_univ_copy(instance_size, match$1[1])) {
            var con = Names$ReactTemplate.Constant[/* make1 */1](Names$ReactTemplate.Constant[/* canonical */5](match$1[0]));
            return /* Some */[/* BCalias */Block.__(1, [get_alias(env, con)])];
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
        if (exit === 1) {
          var res = compile(fail_on_error, /* Some */[instance_size], env, body);
          return Option$ReactTemplate.map((function (x) {
                        return /* BCdefined */Block.__(0, [Cemitcodes$ReactTemplate.to_memory(x)]);
                      }), res);
        }
        break;
    case 0 : 
    case 2 : 
        return /* Some */[/* BCconstant */0];
    
  }
}

function compile_alias(kn) {
  return /* BCalias */Block.__(1, [Names$ReactTemplate.Constant[/* make1 */1](Names$ReactTemplate.Constant[/* canonical */5](kn))]);
}

exports.compile = compile;
exports.compile_constant_body = compile_constant_body;
exports.compile_alias = compile_alias;
/* Pp-ReactTemplate Not a pure module */
