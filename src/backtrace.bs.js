// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Exninfo$ReactTemplate = require("./exninfo.bs.js");

function of_raw(param) {
  if (param.tag) {
    return /* record */[
            /* frame_location : None */0,
            /* frame_raised */param[0]
          ];
  } else {
    var loc_000 = /* loc_filename */param[1];
    var loc_001 = /* loc_line */param[2];
    var loc_002 = /* loc_start */param[3];
    var loc_003 = /* loc_end */param[4];
    var loc = /* record */[
      loc_000,
      loc_001,
      loc_002,
      loc_003
    ];
    return /* record */[
            /* frame_location : Some */[loc],
            /* frame_raised */param[0]
          ];
  }
}

function repr(bt) {
  var _accu = /* [] */0;
  var _param = List.rev(bt);
  while(true) {
    var param = _param;
    var accu = _accu;
    if (param) {
      var fragment = param[0];
      var len = fragment.length;
      var append = (function(fragment,len){
      return function append(_accu, _i) {
        while(true) {
          var i = _i;
          var accu = _accu;
          if (i === len) {
            return accu;
          } else {
            _i = i + 1 | 0;
            _accu = /* :: */[
              of_raw(Caml_array.caml_array_get(fragment, i)),
              accu
            ];
            continue ;
            
          }
        };
      }
      }(fragment,len));
      _param = param[1];
      _accu = append(accu, 0);
      continue ;
      
    } else {
      return accu;
    }
  };
}

function push(stack) {
  var match = /* () */0;
  if (match) {
    return /* :: */[
            match[0],
            stack
          ];
  } else {
    return /* [] */0;
  }
}

function print_frame(frame) {
  var raise = frame[/* frame_raised */1] ? "raise" : "frame";
  var match = frame[/* frame_location */0];
  if (match) {
    var loc = match[0];
    return Curry._5(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* " " */32,
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@ ",
                                    1,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    "file \"",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* String_literal */Block.__(11, [
                                            "\", line ",
                                            /* Int */Block.__(4, [
                                                /* Int_d */0,
                                                /* No_padding */0,
                                                /* No_precision */0,
                                                /* String_literal */Block.__(11, [
                                                    ", characters ",
                                                    /* Int */Block.__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* "-" */45,
                                                            /* Int */Block.__(4, [
                                                                /* Int_d */0,
                                                                /* No_padding */0,
                                                                /* No_precision */0,
                                                                /* End_of_format */0
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s @ file \"%s\", line %d, characters %d-%d"
                  ]), raise, loc[/* loc_filename */0], loc[/* loc_line */1], loc[/* loc_start */2], loc[/* loc_end */3]);
  } else {
    return Curry._1(Printf.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* " " */32,
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@ ",
                                    1,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    "unknown",
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "%s @ unknown"
                  ]), raise);
  }
}

var backtrace = Curry._1(Exninfo$ReactTemplate.make, /* () */0);

var is_recording = [/* false */0];

function record_backtrace(b) {
  Printexc.record_backtrace(b);
  is_recording[0] = b;
  return /* () */0;
}

function get_backtrace(e) {
  return Curry._2(Exninfo$ReactTemplate.get, e, backtrace);
}

function add_backtrace(e) {
  if (is_recording[0]) {
    var current = /* () */0;
    var info = Exninfo$ReactTemplate.info(e);
    if (current) {
      var match = get_backtrace(info);
      var bt = match ? match[0] : /* [] */0;
      var bt_000 = current[0];
      var bt$1 = /* :: */[
        bt_000,
        bt
      ];
      return /* tuple */[
              e,
              Curry._3(Exninfo$ReactTemplate.add, info, backtrace, bt$1)
            ];
    } else {
      return /* tuple */[
              e,
              info
            ];
    }
  } else {
    var info$1 = Exninfo$ReactTemplate.info(e);
    return /* tuple */[
            e,
            info$1
          ];
  }
}

function app_backtrace(src, dst) {
  if (is_recording[0]) {
    var match = get_backtrace(src);
    if (match) {
      var bt = match[0];
      var match$1 = get_backtrace(dst);
      if (match$1) {
        var bt$1 = Pervasives.$at(bt, match$1[0]);
        return Curry._3(Exninfo$ReactTemplate.add, dst, backtrace, bt$1);
      } else {
        return Curry._3(Exninfo$ReactTemplate.add, dst, backtrace, bt);
      }
    } else {
      return dst;
    }
  } else {
    return dst;
  }
}

var empty = /* [] */0;

exports.empty = empty;
exports.push = push;
exports.repr = repr;
exports.print_frame = print_frame;
exports.record_backtrace = record_backtrace;
exports.get_backtrace = get_backtrace;
exports.add_backtrace = add_backtrace;
exports.app_backtrace = app_backtrace;
/* backtrace Not a pure module */
