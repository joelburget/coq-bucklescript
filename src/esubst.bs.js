// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Util$ReactTemplate = require("./util.bs.js");
var CArray$ReactTemplate = require("./cArray.bs.js");

function el_shft(n, el) {
  if (n) {
    var _n = n;
    var _el = el;
    while(true) {
      var el$1 = _el;
      var n$1 = _n;
      if (typeof el$1 === "number") {
        return /* ELSHFT */Block.__(0, [
                  el$1,
                  n$1
                ]);
      } else if (el$1.tag) {
        return /* ELSHFT */Block.__(0, [
                  el$1,
                  n$1
                ]);
      } else {
        _el = el$1[0];
        _n = el$1[1] + n$1 | 0;
        continue ;
        
      }
    };
  } else {
    return el;
  }
}

function el_liftn_rec(_n, _el) {
  while(true) {
    var el = _el;
    var n = _n;
    if (typeof el === "number") {
      return /* ELID */0;
    } else if (el.tag) {
      _el = el[1];
      _n = n + el[0] | 0;
      continue ;
      
    } else {
      return /* ELLFT */Block.__(1, [
                n,
                el
              ]);
    }
  };
}

function el_liftn(n, el) {
  if (n) {
    return el_liftn_rec(n, el);
  } else {
    return el;
  }
}

function el_lift(el) {
  return el_liftn_rec(1, el);
}

function reloc_rel(_n, _param) {
  while(true) {
    var param = _param;
    var n = _n;
    if (typeof param === "number") {
      return n;
    } else if (param.tag) {
      var k = param[0];
      if (n <= k) {
        return n;
      } else {
        return reloc_rel(n - k | 0, param[1]) + k | 0;
      }
    } else {
      _param = param[0];
      _n = n + param[1] | 0;
      continue ;
      
    }
  };
}

function is_lift_id(_param) {
  while(true) {
    var param = _param;
    if (typeof param === "number") {
      return /* true */1;
    } else if (param.tag) {
      _param = param[1];
      continue ;
      
    } else if (param[1]) {
      return /* false */0;
    } else {
      _param = param[0];
      continue ;
      
    }
  };
}

function subs_id(i) {
  return /* ESID */Block.__(0, [i]);
}

function subs_cons(param) {
  var s = param[1];
  var x = param[0];
  if (x.length) {
    return /* CONS */Block.__(1, [
              x,
              s
            ]);
  } else {
    return s;
  }
}

function subs_liftn(n, lenv) {
  switch (lenv.tag | 0) {
    case 0 : 
        return /* ESID */Block.__(0, [lenv[0] + n | 0]);
    case 1 : 
    case 2 : 
        return /* LIFT */Block.__(3, [
                  n,
                  lenv
                ]);
    case 3 : 
        return /* LIFT */Block.__(3, [
                  lenv[0] + n | 0,
                  lenv[1]
                ]);
    
  }
}

function subs_lift(a) {
  return subs_liftn(1, a);
}

function subs_liftn$1(n, a) {
  if (n) {
    return subs_liftn(n, a);
  } else {
    return a;
  }
}

function subs_shft(s) {
  if (s[0]) {
    var param = s;
    var n = param[0];
    if (n !== 0) {
      var s$1 = param[1];
      if (s$1.tag === 2) {
        return /* SHIFT */Block.__(2, [
                  s$1[0] + n | 0,
                  s$1[1]
                ]);
      } else {
        return /* SHIFT */Block.__(2, [
                  n,
                  s$1
                ]);
      }
    } else {
      return param[1];
    }
  } else {
    return s[1];
  }
}

function subs_shift_cons(param) {
  var k = param[0];
  if (k !== 0) {
    var s = param[1];
    if (s.tag === 2) {
      return /* CONS */Block.__(1, [
                param[2],
                /* SHIFT */Block.__(2, [
                    k + s[0] | 0,
                    s[1]
                  ])
              ]);
    } else {
      return /* CONS */Block.__(1, [
                param[2],
                /* SHIFT */Block.__(2, [
                    k,
                    s
                  ])
              ]);
    }
  } else {
    return /* CONS */Block.__(1, [
              param[2],
              param[1]
            ]);
  }
}

function is_subs_id(_param) {
  while(true) {
    var param = _param;
    switch (param.tag | 0) {
      case 0 : 
          return /* true */1;
      case 1 : 
          if (param[0].length) {
            return /* false */0;
          } else {
            _param = param[1];
            continue ;
            
          }
          break;
      case 2 : 
          if (param[0] !== 0) {
            return /* false */0;
          } else {
            _param = param[1];
            continue ;
            
          }
          break;
      case 3 : 
          _param = param[1];
          continue ;
          
    }
  };
}

function expand_rel(k, subs) {
  var _lams = 0;
  var _k = k;
  var _subs = subs;
  while(true) {
    var subs$1 = _subs;
    var k$1 = _k;
    var lams = _lams;
    switch (subs$1.tag | 0) {
      case 0 : 
          var n = subs$1[0];
          if (k$1 <= n) {
            return /* Inr */Block.__(1, [/* tuple */[
                        lams + k$1 | 0,
                        /* None */0
                      ]]);
          } else {
            return /* Inr */Block.__(1, [/* tuple */[
                        lams + k$1 | 0,
                        /* Some */[k$1 - n | 0]
                      ]]);
          }
      case 1 : 
          var def = subs$1[0];
          if (k$1 <= def.length) {
            return /* Inl */Block.__(0, [/* tuple */[
                        lams,
                        Caml_array.caml_array_get(def, def.length - k$1 | 0)
                      ]]);
          } else {
            _subs = subs$1[1];
            _k = k$1 - def.length | 0;
            continue ;
            
          }
          break;
      case 2 : 
          _subs = subs$1[1];
          _lams = subs$1[0] + lams | 0;
          continue ;
          case 3 : 
          var n$1 = subs$1[0];
          if (k$1 <= n$1) {
            return /* Inr */Block.__(1, [/* tuple */[
                        lams + k$1 | 0,
                        /* None */0
                      ]]);
          } else {
            _subs = subs$1[1];
            _k = k$1 - n$1 | 0;
            _lams = n$1 + lams | 0;
            continue ;
            
          }
          break;
      
    }
  };
}

function comp(mk_cl, _s1, _s2) {
  while(true) {
    var s2 = _s2;
    var s1 = _s1;
    var exit = 0;
    if (s2.tag) {
      switch (s1.tag | 0) {
        case 0 : 
            return s2;
        case 1 : 
            var s = s1[1];
            var x = s1[0];
            switch (s2.tag | 0) {
              case 1 : 
                  exit = 1;
                  break;
              case 2 : 
                  var s$prime = s2[1];
                  var k = s2[0];
                  var lg = x.length;
                  if (k === lg) {
                    _s2 = s$prime;
                    _s1 = s;
                    continue ;
                    
                  } else if (k > lg) {
                    _s2 = /* SHIFT */Block.__(2, [
                        k - lg | 0,
                        s$prime
                      ]);
                    _s1 = s;
                    continue ;
                    
                  } else {
                    _s2 = s$prime;
                    _s1 = /* CONS */Block.__(1, [
                        Util$ReactTemplate.$$Array[/* sub */5](x, 0, lg - k | 0),
                        s
                      ]);
                    continue ;
                    
                  }
                  break;
              case 3 : 
                  var s$prime$1 = s2[1];
                  var k$1 = s2[0];
                  var lg$1 = x.length;
                  if (k$1 === lg$1) {
                    return /* CONS */Block.__(1, [
                              x,
                              comp(mk_cl, s, s$prime$1)
                            ]);
                  } else if (k$1 > lg$1) {
                    return /* CONS */Block.__(1, [
                              x,
                              comp(mk_cl, s, /* LIFT */Block.__(3, [
                                      k$1 - lg$1 | 0,
                                      s$prime$1
                                    ]))
                            ]);
                  } else {
                    return /* CONS */Block.__(1, [
                              Util$ReactTemplate.$$Array[/* sub */5](x, lg$1 - k$1 | 0, k$1),
                              comp(mk_cl, /* CONS */Block.__(1, [
                                      Util$ReactTemplate.$$Array[/* sub */5](x, 0, lg$1 - k$1 | 0),
                                      s
                                    ]), s$prime$1)
                            ]);
                  }
              
            }
            break;
        case 2 : 
            return subs_shft(/* tuple */[
                        s1[0],
                        comp(mk_cl, s1[1], s2)
                      ]);
        case 3 : 
            var s$1 = s1[1];
            var k$2 = s1[0];
            switch (s2.tag | 0) {
              case 1 : 
                  exit = 1;
                  break;
              case 2 : 
                  var s$prime$2 = s2[1];
                  var k$prime = s2[0];
                  if (k$2 < k$prime) {
                    return subs_shft(/* tuple */[
                                k$2,
                                comp(mk_cl, s$1, subs_shft(/* tuple */[
                                          k$prime - k$2 | 0,
                                          s$prime$2
                                        ]))
                              ]);
                  } else {
                    return subs_shft(/* tuple */[
                                k$prime,
                                comp(mk_cl, subs_liftn$1(k$2 - k$prime | 0, s$1), s$prime$2)
                              ]);
                  }
              case 3 : 
                  var s$prime$3 = s2[1];
                  var k$prime$1 = s2[0];
                  if (k$2 < k$prime$1) {
                    return subs_liftn$1(k$2, comp(mk_cl, s$1, subs_liftn$1(k$prime$1 - k$2 | 0, s$prime$3)));
                  } else {
                    return subs_liftn$1(k$prime$1, comp(mk_cl, subs_liftn$1(k$2 - k$prime$1 | 0, s$1), s$prime$3));
                  }
              
            }
            break;
        
      }
    } else {
      return s1;
    }
    if (exit === 1) {
      return /* CONS */Block.__(1, [
                CArray$ReactTemplate.Fun1[/* map */0]((function (s, t) {
                        return Curry._1(mk_cl, /* tuple */[
                                    s,
                                    t
                                  ]);
                      }), s1, s2[0]),
                comp(mk_cl, s1, s2[1])
              ]);
    }
    
  };
}

var el_id = /* ELID */0;

exports.subs_id = subs_id;
exports.subs_cons = subs_cons;
exports.subs_shft = subs_shft;
exports.subs_lift = subs_lift;
exports.subs_liftn = subs_liftn$1;
exports.subs_shift_cons = subs_shift_cons;
exports.expand_rel = expand_rel;
exports.is_subs_id = is_subs_id;
exports.comp = comp;
exports.el_id = el_id;
exports.el_shft = el_shft;
exports.el_liftn = el_liftn;
exports.el_lift = el_lift;
exports.reloc_rel = reloc_rel;
exports.is_lift_id = is_lift_id;
/* Util-ReactTemplate Not a pure module */
